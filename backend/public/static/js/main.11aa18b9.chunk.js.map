{"version":3,"sources":["history.js","cmps/BoardPreview.js","cmps/BoardsList.js","services/SocketService.js","services/utils.js","services/HttpService.js","services/UserService.js","actions/UserActions.js","cmps/Login.js","services/BoardService.js","actions/BoardActions.js","pages/Home.js","cmps/LoadPage.js","cmps/TopMenuOptions.js","cmps/dynamics/TaskPreview.js","cmps/dynamics/mapDynamicComponents.js","cmps/dynamics/VideoPreview.js","cmps/dynamics/ImagePreview.js","cmps/dynamics/DynamicComponent.js","cmps/TasksList.js","cmps/TaskForm.js","cmps/BoardColumns.js","cmps/BoardHistory.js","cmps/BoardTeamMembers.js","cmps/ColumnAddForm.js","cmps/Filter.js","cmps/Sort.js","cmps/SplashMenu.js","cmps/DueDate.js","cmps/Labels.js","cmps/Members.js","cmps/Todos.js","cmps/TaskDetails.js","cmps/MiniDetailsButton.js","cmps/MiniDetailsEditor.js","cmps/ScreenFilter.js","cmps/dynamics/MiniTextDetails.js","cmps/dynamics/MiniImageDetails.js","cmps/dynamics/mapDynamicMiniComponents.js","cmps/dynamics/MiniVideoDetails.js","cmps/dynamics/DynamicMiniComponent.js","pages/Board.js","App.js","serviceWorker.js","reducers/BoardReducer.js","reducers/UserReducer.js","reducers/SystemReducer.js","reducers/index.js","store.js","index.js"],"names":["history","createBrowserHistory","BoardPreview","board","className","style","height","width","position","src","boardBgThumbnail","alt","title","withRouter","socket","newBoards","boards","filter","_id","map","key","to","setup","io","terminate","on","eventName","cb","off","emit","data","getRandomId","letters","id","i","ind","Math","floor","random","length","createUserIcon","firstName","lastName","charAt","getRandomColor","color","uploadImg","file","UPLOAD_URL","formData","FormData","append","axios","post","then","res","url","catch","err","console","error","getImagesFromUnsplash","filterName","URL","get","results","emitNotification","msg","type","notification","message","insert","container","animationIn","animationOut","dismiss","duration","SocketService","Axios","create","withCredentials","endpoint","ajax","a","async","method","log","dir","response","status","push","login","userCred","HttpService","user","logout","signup","getLoggedInUser","getUsers","users","dispatch","UserService","_setUser","_setUsers","Login","state","loginCred","email","password","signupCred","username","utils","loginHandleChange","ev","target","name","value","setState","prevState","signupHandleChange","doLogin","preventDefault","userCreds","props","doSignup","signupCreds","toggleLogin","doLogout","doStopPropagation","stopPropagation","this","signupSection","onSubmit","onChange","placeholder","loginSection","loggedInUser","toggleState","onClick","Component","mapDispatchToProps","connect","isLoading","system","add","query","boardId","filterBy","sortBy","sortOrder","Object","keys","join","_createQueryString","put","remove","_setBoards","loadBoard","BoardService","_setBoard","_boardUpdate","Home","closeLogin","createBoard","createdBy","time","Date","now","newBoard","loadBoards","button","Button","Fab","variant","href","addedBoard","_addBoard","LoadPage","CircularProgress","TopMenuOptions","onDuplicateColumn","column","newColumn","newId","idx","columnOrder","findIndex","columnId","splice","taskIds","forEach","taskId","clonedTaskId","taskIdIdx","taskIdx","tasks","columns","toggleTopMenuOptions","unshift","updateBoard","onDelete","TaskPreview","toggleMiniDetails","miniTask","task","boundingClientRect","taskContainer","current","getBoundingClientRect","previewType","React","createRef","provided","innerRef","isDragging","showEditBtn","onTaskId","ref","draggableProps","dragHandleProps","labels","label","e","description","todos","todosDone","taskTeamMembers","member","backgroundColor","text","video","videoContainer","allowFullScreen","security","image","imgContainer","DynamicComponent","componentType","mapDynamicComponents","Cmp","getComponent","Fragment","TasksList","showAddForm","currTaskId","showTaskDetails","toggleTaskDetails","canOpenTaskDetails","hideEditBtn","isDraggingOver","droppableProps","draggableId","index","snapshot","rotationMultiplier","_","onMouseEnter","onMouseLeave","TaskForm","createdAt","dueDate","importance","creator","edit","inputChange","fieldName","save","checkIfUrlAndSave","match","newUrl","replace","saveTask","includes","closeUpdateForm","toggleUpdateForm","textAreaAdjust","scrollHeight","nameInput","focus","setFormDataForEdit","prevProps","onKeyUp","input","BoardColumns","timer","taskKey","onDragEnd","result","destination","source","droppableId","newColumnOrder","slice","columnTitle","start","finish","newTaskIds","taskTitle","startTaskIds","newStart","finishTaskIds","newFinish","handleCheck","colId","clearTimeout","setTimeout","updatedBoard","emitChange","innerText","currColumnId","showTopMenuOptions","direction","columnKey","currId","contentEditable","spellCheck","onInput","suppressContentEditableWarning","openEditColumn","closeEditColumn","openAddForm","addCardText","closeAddForm","BoardHistory","showHistory","item","moment","calendar","BoardTeamMembers","currentBoardMembers","componentDidMount","teamMembers","updateTeamMembers","notificationType","find","teamMember","onStopPropagation","boardMember","toggleBoardTeamMembers","ColumnAddForm","saveColumn","toggleAddForm","Filter","onFilter","Sort","onSortBy","onSort","toggleButtonName","SplashMenu","splashImagesUrls","office","filterByName","onSave","splashImages","UrlIndx","currUrl","urls","setBoardBackground","imageUrl","boardBgImage","full","small","toggleSplashMenu","display","onAddImg","htmlFor","DueDate","setDate","handleChange","date","newTask","getTime","onToggle","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","Labels","choosenLabels","setNewState","updateChoosenLabels","classList","labelIdx","currLabel","updateStyle","left","top","toggleChooseLabels","Members","choosenMembers","availableMembers","setAvailableMembers","updateChoosenMembers","memberIdx","currMember","taskMember","pos","toggleChooseMembers","TaskList","updateTodo","onSaveTodo","todo","isDone","toggleTodos","TaskDetails","deuDate","choosenlabels","showActivity","showEditDescriptionForm","onToggleDueDate","toggleDeleteTodo","progressWidth","currTodoId","targetValue","toggleUpdateDescriptionForm","closeUpdateDescriptionForm","onStopPropagationAndCloseOptions","onSaveDescription","onDuplicateTask","onDeleteTask","toggleTodoDone","currTodo","updateProgressBar","doneTodosCounter","interval","round","setInterval","clearInterval","deleteTodo","todoId","currTask","textDecoration","fontSize","fontWeight","letterSpacing","Avatar","margin","textAlign","right","checked","format","rows","cols","defaultValue","MiniDetailsButton","MiniDetailsEditor","onToggleLabels","onToggleMembers","window","innerHeight","ScreenFilter","MiniTextDetails","handleFocus","select","textArea","labelLen","onFocus","MiniImageDetails","imgHeight","videoDimensions","bottom","DynamicMiniComponent","mapDynamicMiniComponents","Board","showColAddForm","showMiniTaskDetails","miniTaskDetails","isBoardLoaded","params","toggleAddColumn","goBack","closeAllTabs","undefined","files","toggleBoardHistory","setBoard","store","addNotification","backgroundImage","backgroundAttachment","showUploadBgImg","App","path","component","exact","Boolean","location","hostname","initialState","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.11aa18b9.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React from \"react\";\r\n\r\nexport default function BoardPreview({ board }) {\r\n  return (\r\n    <div className=\"board-preview card\">\r\n      <img style={{ height: \"100%\", width: \"100%\", position: \"absolute\" }} src={board.boardBgThumbnail} alt=\"none\">\r\n      </img>\r\n      <div>\r\n        <h2 className=\"capitalize\">{board.title}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport BoardPreview from \"./BoardPreview\";\r\n\r\nfunction BoardsList({ boards }) {\r\n\r\n    const newBoards = boards.filter(board => board._id !== '5e2581b51c9d44000081af2a');\r\n\r\n    return (\r\n        <section className=\"boards-list flex column\">\r\n            <h2 className=\"text-center uppercase\"> check our beautiful boards</h2>\r\n            <div className=\"boards-list-main-container fill-width\">\r\n                <div className=\"boards-list-main-inner-container\">\r\n                    {newBoards.map(board => (\r\n                        <NavLink className=\"boards-list-main-inner-container-item\" key={board._id} to={`/board/${board._id}`}>\r\n                            <BoardPreview board={board} />\r\n                        </NavLink>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default withRouter(BoardsList)","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n  process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport default {\r\n  setup,\r\n  terminate,\r\n  on,\r\n  off,\r\n  emit\r\n};\r\n\r\nfunction setup() {\r\n  socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n  socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n  socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n  socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n  socket.emit(eventName, data);\r\n}\r\n","import axios from 'axios'\r\n\r\nimport SocketService from './SocketService';\r\n\r\nexport default {\r\n  getRandomId,\r\n  createUserIcon,\r\n  getRandomColor,\r\n  uploadImg,\r\n  getImagesFromUnsplash,\r\n  emitNotification\r\n}\r\n\r\nfunction getRandomId() {\r\n  let letters = '1234567890poiiytreqwasdfghjklmnbvcxxssersgyushquiz';\r\n  let id = '';\r\n  for (let i = 0; i < 10; i++) {\r\n    let ind = Math.floor(Math.random() * letters.length)\r\n    id += letters[ind];\r\n  }\r\n  return id;\r\n}\r\n\r\nfunction createUserIcon(firstName, lastName) {\r\n  let newIcon = firstName.charAt(0) + lastName.charAt(0)\r\n  return (newIcon)\r\n}\r\n\r\nfunction getRandomColor() {\r\n  var letters = '0123456789ABCDEF';\r\n  var color = '#';\r\n  for (var i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n\r\nfunction uploadImg(file) {\r\n  const CLOUD_NAME = 'dujlxvxxv'\r\n  const PRESET_NAME = 'xi62wuas'\r\n  const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\r\n\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  formData.append('upload_preset', PRESET_NAME);\r\n\r\n  return axios.post(UPLOAD_URL, formData)\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      return res.url\r\n    })\r\n    .catch(err => console.error(err))\r\n}\r\n\r\nfunction getImagesFromUnsplash(filterName) {\r\n  const client_id = '9a992bf0a58ef7c4735758c98ec044dcdb524c2178db25d55cd773d7436f15d1'\r\n  const URL = `https://api.unsplash.com/search/photos?per_page=20&query=${filterName}&client_id=${client_id}`\r\n  return axios.get(URL)\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      return res.results\r\n    })\r\n    .catch(err => console.error(err))\r\n}\r\n\r\nfunction emitNotification(msg, type) {\r\n  const notification = {\r\n    message: msg,\r\n    type: type,\r\n    insert: \"top\",\r\n    container: \"bottom-right\",\r\n    animationIn: [\"animated\", \"zoomIn\"],\r\n    animationOut: [\"animated\", \"fadeOut\"],\r\n    dismiss: {\r\n      duration: 5000,\r\n    }\r\n  };\r\n  SocketService.emit('sendNotification', notification);\r\n}","import history from '../history';\r\nimport Axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data){\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data){\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data){\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data){\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method='get', data=null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        if (err.response && err.response.status === 401) {\r\n          history.push('/');\r\n        }\r\n        throw err;\r\n    }\r\n}","import HttpService from './HttpService'\r\n\r\nexport default {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getLoggedInUser,\r\n    getUsers\r\n}\r\n\r\nasync function login(userCred) {\r\n    try {\r\n        const user = await HttpService.post('auth/login', userCred);\r\n        return user;\r\n    } catch (err) {\r\n        console.log('UserService: err in login', err);\r\n    }\r\n}\r\n\r\nasync function signup(userCred) {\r\n    try {\r\n        const user = await HttpService.post('auth/signup', userCred);\r\n        return user;\r\n    } catch (err) {\r\n        console.log('UserService: err in signup', err);\r\n    }\r\n}\r\n\r\nasync function logout() {\r\n    try {\r\n        await HttpService.post('auth/logout');\r\n    } catch (err) {\r\n        console.log('UserService: err in logout', err);\r\n    }\r\n}\r\n\r\nasync function getLoggedInUser() {\r\n    try {\r\n        const user = await HttpService.get('auth/user');\r\n        return user;\r\n    } catch (err) {\r\n        console.log('UserService: err in getting loggedInUser', err);\r\n    }\r\n}\r\n\r\nasync function getUsers() {\r\n    try {\r\n        const users = await HttpService.get('user');\r\n        return users;\r\n    } catch (err) {\r\n        console.log('UserService: err in getting users', err);\r\n    }\r\n}\r\n","import UserService from '../services/UserService';\r\n// import { loading, doneLoading } from './SystemActions';\r\n// import history from './../history';\r\n\r\nexport function login(userCreds) {\r\n  return async dispatch => {\r\n    try {\r\n      const user = await UserService.login(userCreds);\r\n      dispatch(_setUser(user));\r\n    } catch (err) {\r\n      console.log('UserActions: err in login', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function signup(userCreds) {\r\n  return async dispatch => {\r\n    try {\r\n      const user = await UserService.signup(userCreds);\r\n      dispatch(_setUser(user));\r\n    } catch (err) {\r\n      console.log('UserActions: err in signup', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function logout() {\r\n  return async dispatch => {\r\n    try {\r\n      await UserService.logout();\r\n      dispatch(_setUser(null));\r\n    } catch (err) {\r\n      console.log('UserActions: err in logout', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function getLoggedInUser() {\r\n  return async dispatch => {\r\n    try {\r\n      const user = await UserService.getLoggedInUser();\r\n      // localStorage.setItem('user', JSON.stringify(user));\r\n      dispatch(_setUser(user));\r\n    }  catch (err) {\r\n      console.log('UserActions: err in logout', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _setUser(user) {\r\n  return {\r\n    type: 'SET_USER',\r\n    user\r\n  };\r\n}\r\n\r\nexport function getUsers() {\r\n  return async dispatch => {\r\n    try {\r\n      const users = await UserService.getUsers();\r\n      dispatch(_setUsers(users));\r\n    } catch (err) {\r\n      console.log('UserActions: err in getUsers', err);\r\n    }\r\n  }\r\n}\r\n\r\nfunction _setUsers(users) {\r\n  return {\r\n    type: 'SET_USERS',\r\n    users\r\n  };\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport utils from '../services/utils'\r\n\r\nimport {\r\n  // loadUsers,\r\n  getLoggedInUser,\r\n  login,\r\n  logout,\r\n  signup\r\n} from '../actions/UserActions';\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    msg: '',\r\n    loginCred: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n    signupCred: {\r\n      firstName: '',\r\n      lastName: '',\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n      color: utils.getRandomColor()\r\n    },\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getLoggedInUser();\r\n  }\r\n\r\n  loginHandleChange = ev => {\r\n    const { name, value } = ev.target;\r\n    this.setState(prevState => ({\r\n      loginCred: {\r\n        ...prevState.loginCred,\r\n        [name]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  signupHandleChange = ev => {\r\n    const { name, value } = ev.target;\r\n    this.setState(prevState => ({\r\n      signupCred: {\r\n        ...prevState.signupCred,\r\n        [name]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  doLogin = async ev => {\r\n    ev.preventDefault();\r\n    const { email, password } = this.state.loginCred;\r\n    if (!email || !password) {\r\n      return this.setState({ msg: 'Please enter user/password' });\r\n    }\r\n    const userCreds = { email, password };\r\n    this.props.login(userCreds);\r\n    this.setState({ loginCred: { email: '', password: '' } });\r\n    // this.props.toggleLogin();\r\n  };\r\n\r\n  doSignup = async ev => {\r\n    ev.preventDefault();\r\n    const { firstName, lastName, username, email, password, color } = this.state.signupCred;\r\n    if (!firstName || !lastName || !email || !password || !username) {\r\n      return this.setState({ msg: 'All inputs are required!' });\r\n    }\r\n    const signupCreds = { firstName, lastName, username, email, password, color };\r\n    this.props.signup(signupCreds);\r\n    this.setState({ signupCred: { firstName: '', lastName: '', username: '', email: '', password: '' } });\r\n    this.props.toggleLogin();\r\n  };\r\n\r\n  doLogout = () => {\r\n    this.props.logout();\r\n  }\r\n\r\n  doStopPropagation = (ev) => {\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    let signupSection = (\r\n      <form className=\"login-container-signup text-center\" onSubmit={this.doSignup}>\r\n        <p>Not a member yet? Sign up!</p>\r\n        <input\r\n          type=\"text\"\r\n          name=\"firstName\"\r\n          value={this.state.signupCred.firstName}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"First Name\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"lastName\"\r\n          value={this.state.signupCred.lastName}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Last Name\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          value={this.state.signupCred.email}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Email\"\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={this.state.signupCred.username}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Username\"\r\n        />\r\n        <br />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={this.state.signupCred.password}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Password\"\r\n        />\r\n        <br />\r\n        <button className=\"login-container-signup-btn\">Signup</button>\r\n      </form>\r\n    );\r\n    let loginSection = (\r\n      <form className=\"login-container-login text-center\" onSubmit={this.doLogin}>\r\n        <p> Login: </p>\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          value={this.state.loginCred.email}\r\n          onChange={this.loginHandleChange}\r\n          placeholder=\"Email\"\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={this.state.loginCred.password}\r\n          onChange={this.loginHandleChange}\r\n          placeholder=\"Password\"\r\n        />\r\n        <br />\r\n        <button className=\"login-container-login-btn\">Login</button>\r\n      </form>\r\n    );\r\n\r\n    const { loggedInUser } = this.props;\r\n\r\n    return (\r\n\r\n      // <div className=\"screen\" onClick={() => this.props.toggleLogin()} >\r\n\r\n      <div className={\"login-container flex column align-center\"\r\n        + (this.props.toggleState ? ' translateLeft' : '')}\r\n        style={this.props.style}\r\n        onClick={this.doStopPropagation}>\r\n\r\n\r\n        <div className=\"login-container-logo\">\r\n        </div>\r\n        <h2>{this.state.msg}</h2>\r\n        <div className={\"login-container-form-container\"}>\r\n          {loggedInUser && (\r\n            <div>\r\n              <h2 className=\"login-container-loggedin-username\"> <p>Welcome!</p> {loggedInUser.username} </h2>\r\n              <div className=\"fill-width flex\">\r\n                <button className=\"login-container-form-container-logout\" onClick={this.doLogout}>Logout</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {!this.props.loggedInUser && loginSection}\r\n          <hr />\r\n          {!this.props.loggedInUser && signupSection}\r\n        </div>\r\n      </div>\r\n\r\n      // </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    users: state.user.users,\r\n    loggedInUser: state.user.loggedInUser,\r\n    isLoading: state.system.isLoading\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  login,\r\n  logout,\r\n  signup,\r\n  getLoggedInUser\r\n  // loadUsers\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import HttpService from './HttpService';\r\n\r\nexport default {\r\n  add,\r\n  query,\r\n  get,\r\n  put,\r\n  remove\r\n};\r\n\r\nfunction query() {\r\n  return HttpService.get('board');\r\n}\r\n\r\nfunction get(boardId, filterBy, sortBy, sortOrder) {\r\n  return HttpService.get(`board/${boardId}?${_createQueryString(filterBy)}&sortby=${sortBy}&sortorder=${sortOrder}`);\r\n}\r\n\r\nfunction _createQueryString(filterBy) {\r\n  return Object.keys(filterBy).map(filter => filter + '=' + filterBy[filter]).join('&');\r\n}\r\n\r\nfunction put(board) {\r\n  return HttpService.put(`board/${board._id}`, board);\r\n}\r\n\r\nfunction remove(boardId) {\r\n  return HttpService.delete(`board/${boardId}`);\r\n}\r\n\r\nfunction add(board) {\r\n  return HttpService.post('board', board);\r\n}","import BoardService from '../services/BoardService';\r\nimport SocketService from '../services/SocketService';\r\nimport utils from '../services/utils';\r\n\r\nexport function loadBoards() {\r\n  return async dispatch => {\r\n    try {\r\n      const boards = await BoardService.query();\r\n      dispatch(_setBoards(boards));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoards', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _setBoards(boards) {\r\n  return {\r\n    type: 'SET_BOARDS',\r\n    boards\r\n  };\r\n}\r\n\r\nexport function loadBoard(boardId, filterBy, sortBy, sortOrder) {\r\n  return async dispatch => {\r\n    try {\r\n      const board = await BoardService.get(boardId, filterBy, sortBy, sortOrder);\r\n      dispatch(_setBoard(board));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoard', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _setBoard(board) {\r\n  return {\r\n    type: 'SET_BOARD',\r\n    board\r\n  }\r\n}\r\n\r\nexport function updateBoard(board, msg, notificationType) {\r\n  return async dispatch => {\r\n    try {\r\n      dispatch(_boardUpdate(board));\r\n      await BoardService.put(board);\r\n      SocketService.emit('boardUpdate', board);\r\n      utils.emitNotification(msg, notificationType);\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoard', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _boardUpdate(board) {\r\n  return {\r\n    type: 'UPDATE_BOARD',\r\n    board\r\n  }\r\n}\r\n\r\nexport function updateBoardOffline(board) {\r\n  return async dispatch => {\r\n    try {\r\n      dispatch(_boardUpdate(board));\r\n      sessionStorage.setItem('board', JSON.stringify(board));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoard', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function createBoard(board) {\r\n  return async dispatch => {\r\n    try {\r\n      const addedBoard = await BoardService.add(board);\r\n      dispatch(_addBoard(addedBoard));\r\n      return addedBoard;\r\n    } catch (err) {\r\n      console.log('BoardActions: err in createBoard', err);\r\n    }\r\n  }\r\n\r\n  function _addBoard(addedBoard) {\r\n    return {\r\n      type: 'ADD_BOARD',\r\n      addedBoard\r\n    };\r\n  }\r\n}\r\n\r\nexport function setBoard(board) {\r\n  return async dispatch => {\r\n    try {\r\n      dispatch(_setBoard(board));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in setBoard', err);\r\n    }\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\n\r\nimport BoardsList from '../cmps/BoardsList';\r\nimport Login from '../cmps/Login';\r\n\r\nimport utils from '../services/utils';\r\n\r\nimport { loadBoards, loadBoard, createBoard } from '../actions/BoardActions'\r\nimport { logout } from '../actions/UserActions'\r\n\r\nclass Home extends Component {\r\n\r\n  state = {\r\n    toggleLogin: false,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.loadBoards();\r\n  }\r\n\r\n  toggleLogin = (ev) => {\r\n    if (ev) ev.stopPropagation();\r\n    this.setState((prevState) => ({ toggleLogin: !prevState.toggleLogin }))\r\n  }\r\n\r\n  closeLogin = (ev) => {\r\n    ev.stopPropagation()\r\n    this.setState({ toggleLogin: false })\r\n  }\r\n\r\n  createBoard = async () => {\r\n    let board = this.props.board;\r\n    const username = (this.props.loggedInUser) ? this.props.loggedInUser.username : 'Guest';\r\n    let msg = `The Board was created by ${username}`;\r\n    delete board._id;\r\n    board.createdBy = this.props.loggedInUser;\r\n    board.history = [{ id: utils.getRandomId(), msg: msg, time: Date.now() }];\r\n    const newBoard = await this.props.createBoard(board);\r\n    this.props.history.push(`/board/${newBoard._id}`);\r\n  }\r\n\r\n  render() {\r\n    let button;\r\n    if (this.props.loggedInUser) {\r\n      button = <Button className=\"home-page-login-btn\">\r\n        <div onClick={this.props.logout}>logout</div>\r\n      </Button>\r\n    } else {\r\n      button = <Button className=\"home-page-login-btn\">\r\n        <div onClick={this.toggleLogin}>login</div>\r\n      </Button>\r\n    }\r\n\r\n    return (\r\n      <div className=\"home-page\" onClick={this.closeLogin}>\r\n        <section className=\"home-page-header\">\r\n          <div className=\"home-page-login flex justify-end align-center\">\r\n            {(this.props.loggedInUser) &&\r\n              <p className=\"flex column\">\r\n                <small>welcome!</small>\r\n                {this.props.loggedInUser.username}\r\n              </p>\r\n            }\r\n            {button}\r\n          </div>\r\n\r\n          <Login\r\n            className=\"home-page-login\"\r\n            toggleLogin={this.toggleLogin}\r\n            toggleState={this.state.toggleLogin} />\r\n\r\n          <div className=\"home-page-header-container flex\">\r\n            <div className=\"header-image flex align-center justify-center fill-width fill-height\">\r\n              <div className=\"login-get-started-container flex align-center justify-center align-center\">\r\n                <div className=\"home-page-logo-get-started flex column align-center\">\r\n                  <div className=\"home-page-header-container-logo-img fill-width fill-height\"></div>\r\n                  <div className=\"text-center\">\r\n                    <h2>Manage your tasks in a fun and easy way</h2>\r\n                  </div>\r\n                  <div className=\"get-started-btn\">\r\n                    <Fab variant=\"extended\">\r\n                      <p className=\"uppercase\" onClick={this.createBoard}>\r\n                        get started\r\n                    </p>\r\n                    </Fab>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        <section className=\"home-page-boards-list flex wrap colum justify-center\">\r\n          <div className=\"home-page-boards-list-img\"></div>\r\n          <p className=\"home-page-boards-list-start-new-board-right-text flex justify-center align-center\">\r\n            We, in Trebello, believe that simplicity and style must go together,\r\n            that's why we made our brand simple and easy to use for everyone.<br /> <br />\r\n            Organize your team and take them one step ahead.</p>\r\n        </section>\r\n\r\n\r\n\r\n        <BoardsList boards={this.props.boards} />\r\n\r\n        <section className=\"home-page-footer flex column align-center justify-center\">\r\n          <h2> OUR TEAM </h2>\r\n          <div className=\"home-pagge-footer-team-members-cards-container flex wrap justify-center\">\r\n\r\n            <div className=\"home-page-footer-team-member-card flex column align-center justify-center\">\r\n              <div className=\"home-page-footer-team-member-card-member-img vlad\"></div>\r\n              <p>Vlad Batalin</p>\r\n              <small>Design and overall technical support</small>\r\n              <div className=\"flex\">\r\n                <LinkedInIcon className=\"linkedInIcon\"></LinkedInIcon>\r\n                <FacebookIcon className=\"faceBookIcon\"></FacebookIcon>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"home-page-footer-team-member-card flex column align-center justify-center\">\r\n              <div className=\"home-page-footer-team-member-card-member-img margad\"></div>\r\n              <p>Margad Taikhir</p>\r\n              <small>High functionality backend support</small>\r\n              <div className=\"flex\">\r\n                <LinkedInIcon className=\"linkedInIcon\"></LinkedInIcon>\r\n                <FacebookIcon className=\"faceBookIcon\"></FacebookIcon>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"home-page-footer-team-member-card flex column align-center justify-center\">\r\n              <div className=\"home-page-footer-team-member-card-member-img paolo\"></div>\r\n              <p>Paolo Groppi</p>\r\n              <small>High functionality and backend</small>\r\n              <div className=\"flex\">\r\n                <a href=\"https://www.linkedin.com/in/paolo-groppi-6ba84117b\" target=\"blank\"><LinkedInIcon className=\"linkedInIcon\"></LinkedInIcon></a>\r\n                <a href=\"https://www.facebook.com/karma.tova\" target=\"blank\"><FacebookIcon className=\"faceBookIcon\"></FacebookIcon></a>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </section>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    boards: state.boards.boards,\r\n    board: state.boards.board,\r\n    loggedInUser: state.user.loggedInUser\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  loadBoards,\r\n  loadBoard,\r\n  createBoard,\r\n  logout\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nexport default function LoadPage() {\r\n  return (\r\n    <div className=\"loading-page flex column align-center justify-center\">\r\n      <h2 className=\"uppercase\"> just a moment :)</h2>\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class TopMenuOptions extends Component {\r\n\r\n    onDuplicateColumn = () => {\r\n\r\n        let column = this.props.column;\r\n        let board = this.props.board;\r\n        let newColumn = { ...this.props.column }\r\n        const newId = utils.getRandomId();\r\n        const idx = board.columnOrder.findIndex(columnId => columnId === column.id);\r\n\r\n        newColumn.id = newId;\r\n        board.columnOrder.splice(idx + 1, 0, newColumn.id);\r\n\r\n        newColumn.taskIds.forEach(taskId => {\r\n\r\n            const clonedTaskId = utils.getRandomId();\r\n            const taskIdIdx = column.taskIds.findIndex(taskIdx => taskIdx === taskId);\r\n\r\n            board.tasks[clonedTaskId] = { ...board.tasks[taskId], id: clonedTaskId }\r\n            newColumn.taskIds = [...newColumn.taskIds];\r\n            newColumn.taskIds.splice(taskIdIdx, 1, clonedTaskId);\r\n        });\r\n\r\n        board.columns[newId] = newColumn;\r\n        this.props.toggleTopMenuOptions(column.id);\r\n        const msg = `'${column.title}' was duplicated by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n        this.props.updateBoard(board, msg, notificationType);\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"top-menu-options\">\r\n            <h2 className=\"text-center capitalize\">options menu</h2>\r\n            <div className=\"options-container flex column\">\r\n                <p className=\"capitalize\" onClick={this.onDuplicateColumn}>duplicate list</p>\r\n                <p className=\"capitalize\" onClick={() => this.props.onDelete(this.props.column.id)}>delete list</p>\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport utils from '../../services/utils'\r\n\r\nexport default class TaskPreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.taskContainer = React.createRef();\r\n    }\r\n\r\n\r\n    toggleMiniDetails = ev => {\r\n        ev.stopPropagation();\r\n        const miniTask = {\r\n            task: this.props.task,\r\n            boundingClientRect: this.taskContainer.current.getBoundingClientRect(),\r\n            previewType: 'text',\r\n            column: this.props.column\r\n        };\r\n        this.props.toggleMiniDetails(miniTask);\r\n    }\r\n\r\n    render() {\r\n        const { task, provided, innerRef, isDragging, style, showEditBtn, onTaskId } = this.props;\r\n        return (\r\n            <section ref={this.taskContainer}>\r\n                <div\r\n                    className={\"task-container\" + (isDragging ? \" isDragging\" : \"\")}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={innerRef}\r\n                    style={style}\r\n                >\r\n                    <div className=\"task-container-labels flex wrap\">\r\n                        {task.labels.map(label => {\r\n                            return <div key={label} className={label + ' small-label'}>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n\r\n                    <p className=\"task-container-title\">{task.title}</p>\r\n\r\n\r\n                    {(showEditBtn && (onTaskId === task.id)) ?\r\n                        <CreateIcon className=\"task-container-open-menu\"\r\n                            onClick={e => this.toggleMiniDetails(e)} />\r\n                        : ''}\r\n\r\n                    <div className={\"bottom-container grid-container flex\" + (task.description === '' ? ' row-reverse' : '')}>\r\n\r\n\r\n                        {(task.description !== '') ?\r\n                            <div className=\"grid-item justify-self-center align-self-center\">\r\n                                <SubjectIcon />\r\n                            </div>\r\n                            : <div className=\"grid-item\"></div>\r\n                        }\r\n\r\n                        {(task.todos.length > 0) ?\r\n                            <div className=\"grid-item align-center flex\">\r\n                                <div className=\"flex\">\r\n                                    <CheckBoxIcon />\r\n                                    <p>{task.todosDone + '/' + task.todos.length}</p>\r\n                                </div>\r\n                            </div>\r\n                            : <div className=\"grid-item\"></div>\r\n                        }\r\n\r\n\r\n\r\n                        <div className=\"team-members-container grid-item\">\r\n                            <div className=\"flex justify-end\">\r\n                                {(task.taskTeamMembers.map(member => {\r\n                                    return <div key={member._id} className=\"team-member-icon-wrapper flex align-center\" style={{ backgroundColor: '#dfe1e6' }} >\r\n                                        <div className=\"team-member-icon\">\r\n                                            <p className=\"flex align-center\" style={{ color: '#172b4d' }}>\r\n                                                {utils.createUserIcon(member.firstName,\r\n                                                    member.lastName)}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n                                }))\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import TaskPreview from './TaskPreview';\r\nimport VideoPreview from './VideoPreview';\r\nimport ImagePreview from './ImagePreview';\r\n\r\nexport default {\r\n    text: TaskPreview,\r\n    video: VideoPreview,\r\n    image: ImagePreview\r\n}","import React, { Component } from \"react\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport utils from '../../services/utils'\r\n\r\n\r\nexport default class VideoPreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.videoContainer = React.createRef();\r\n    }\r\n\r\n    toggleMiniDetails = ev => {\r\n        ev.stopPropagation();\r\n        const miniTask = {\r\n            task: this.props.task,\r\n            boundingClientRect: this.videoContainer.current.getBoundingClientRect(),\r\n            previewType: 'video',\r\n            column: this.props.column\r\n        };\r\n        this.props.toggleMiniDetails(miniTask);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { task, provided, innerRef, isDragging, style, showEditBtn, onTaskId } = this.props;\r\n        return (\r\n            <section ref={this.videoContainer}>\r\n                <div\r\n                    className={\"task-container without-padding flex column\" + (isDragging ? \" isDragging\" : \"\")}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={innerRef}\r\n                    style={style}\r\n                >\r\n                    <iframe title={task.id} type='text/html' width=\"248\" height=\"140\" allowFullScreen=\"allowfullscreen\" src={task.url} security=\"restricted\"></iframe>\r\n                    <div className=\"task-container-labels flex\">\r\n                        {task.labels.map(label => {\r\n                            return <div key={label} className={label + ' small-label'}>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                    <p className=\"task-container-title\">{task.title}</p>\r\n                    <div className={\"flex align-center space-between\" + (task.description === '' ? ' row-reverse' : '')}>\r\n                        {(showEditBtn && (onTaskId === task.id)) ?\r\n                            <CreateIcon className=\"task-container-open-menu\"\r\n                                onClick={e => this.toggleMiniDetails(e)} />\r\n                            : ''}\r\n                        {(task.description !== '') ?\r\n                            <ListAltIcon /> : ''\r\n                        }\r\n\r\n                        <div className=\"flex\">\r\n                            {(task.taskTeamMembers.map(member => {\r\n                                return <div key={member._id} className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: `${member.color}` }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"flex align-center\">\r\n                                            {utils.createUserIcon(member.firstName,\r\n                                                member.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            }))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport utils from '../../services/utils'\r\n\r\n\r\nexport default class ImagePreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.imgContainer = React.createRef();\r\n    }\r\n    \r\n    toggleMiniDetails = ev => {\r\n        ev.stopPropagation();\r\n        const miniTask = {\r\n            task: this.props.task,\r\n            boundingClientRect: this.imgContainer.current.getBoundingClientRect(),\r\n            previewType: 'image',\r\n            column: this.props.column,\r\n        };\r\n        this.props.toggleMiniDetails(miniTask);\r\n    }\r\n\r\n    render() {\r\n        const { task, provided, innerRef, isDragging, style, showEditBtn, onTaskId } = this.props;\r\n        return (\r\n            <section ref={this.imgContainer}>\r\n                <div\r\n                    className={\"task-container without-padding flex column align center\" + (isDragging ? \" isDragging\" : \"\")}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={innerRef}\r\n                    style={style}\r\n                >\r\n                    <img title={task.id} alt=\"task\" src={task.url} />\r\n                    <div className=\"task-container-labels flex wrap\">\r\n                        {task.labels.map(label => {\r\n                            return <div key={label} className={label + ' small-label'}>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                    <p className=\"task-container-title\">{task.title}</p>\r\n                    <div className={\"flex align-center space-between\" + (task.description === '' ? ' row-reverse' : '')}>\r\n                        {(showEditBtn && (onTaskId === task.id)) ?\r\n                            <CreateIcon className=\"task-container-open-menu\"\r\n                                onClick={e => this.toggleMiniDetails(e)} />\r\n                            : ''}\r\n                        {(task.description !== '') ?\r\n                            <ListAltIcon /> : ''\r\n                        }\r\n                        <div className=\"flex\">\r\n                            {(task.taskTeamMembers.map(member => {\r\n                                return <div key={member._id} className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: `${member.color}` }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"flex align-center\">\r\n                                            {utils.createUserIcon(member.firstName,\r\n                                                member.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            }))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport mapDynamicComponents from \"./mapDynamicComponents\"\r\n\r\nexport default class DynamicComponent extends Component {\r\n    state = {\r\n        componentType: 'text',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ componentType: this.props.task.type });\r\n    }\r\n\r\n    getComponent() {\r\n        return mapDynamicComponents[this.state.componentType];\r\n    }\r\n\r\n    render() {\r\n        const Cmp = this.getComponent();\r\n        return <React.Fragment>\r\n            <Cmp\r\n                column={this.props.column}\r\n                provided={this.props.provided}\r\n                innerRef={this.props.innerRef}\r\n                task={this.props.task}\r\n                isDragging={this.props.isDragging}\r\n                style={this.props.style}\r\n                onTaskId={this.props.onTaskId}\r\n                showEditBtn={this.props.showEditBtn}\r\n                toggleMiniDetails = {this.props.toggleMiniDetails}\r\n                user={this.props.user}\r\n            >\r\n            </Cmp>\r\n        </React.Fragment>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\n\r\nimport DynamicComponent from './dynamics/DynamicComponent';\r\n\r\nexport default class TasksList extends Component {\r\n\r\n    state = {\r\n        showAddForm: false,\r\n        currTaskId: '',\r\n        onTaskId: '',\r\n        showTaskDetails: false\r\n    }\r\n\r\n    toggleTaskDetails = id => {\r\n        if (id) {\r\n            this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails, currTaskId: id }));\r\n        } else {\r\n            this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails }));\r\n        }\r\n\r\n    }\r\n\r\n    canOpenTaskDetails = taskId => {\r\n        return (this.state.showTaskDetails && this.state.currTaskId === taskId)\r\n    }\r\n\r\n    showEditBtn = (id) => {\r\n        this.setState({ showEditBtn: true, onTaskId: id })\r\n    }\r\n\r\n    hideEditBtn = () => {\r\n        this.setState({ showEditBtn: false })\r\n    }\r\n\r\n    render() {\r\n        const { tasks, provided, innerRef, isDraggingOver } = this.props;\r\n        return (\r\n            <section\r\n                className={\"task-list\" + (isDraggingOver ? \" isDraggingOver\" : \"\")}\r\n                {...provided.droppableProps}\r\n                ref={innerRef}\r\n            >\r\n                        {tasks.map((task, idx) => (\r\n                            <div key={task.id} className=\"task-list-container\">\r\n                                <Draggable draggableId={task.id} index={idx}>\r\n                                    {(provided, snapshot) => (\r\n                                        <NaturalDragAnimation\r\n                                            style={provided.draggableProps.style}\r\n                                            snapshot={snapshot}\r\n                                            rotationMultiplier={1.3}\r\n                                        >\r\n                                            {style => (\r\n                                                <div onClick={_ => this.props.toggleTaskDetails({ id: task.id, column: this.props.column })}\r\n                                                    onMouseEnter={() => this.showEditBtn(task.id)}\r\n                                                    onMouseLeave={() => this.hideEditBtn()}\r\n                                                >\r\n                                                    <DynamicComponent\r\n                                                        provided={provided}\r\n                                                        innerRef={provided.innerRef}\r\n                                                        task={task}\r\n                                                        column={this.props.column}\r\n                                                        isDragging={snapshot.isDragging}\r\n                                                        style={style}\r\n                                                        onTaskId={this.state.onTaskId}\r\n                                                        showEditBtn={this.state.showEditBtn}\r\n                                                        toggleMiniDetails = {this.props.toggleMiniDetails}\r\n                                                        user={this.props.user}\r\n                                                    >\r\n                                                    </DynamicComponent>\r\n                                                </div>\r\n                                            )}\r\n                                        </NaturalDragAnimation>\r\n                                    )}\r\n                                </Draggable>\r\n                            </div>\r\n                        ))}\r\n                        {provided.placeholder}\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport utils from '../services/utils'\r\n\r\nexport default class TaskForm extends Component {\r\n\r\n    state = {\r\n        task: {\r\n            id: utils.getRandomId(),\r\n            title: '',\r\n            createdAt: Date.now(),\r\n            dueDate: '',\r\n            importance: '',\r\n            description: '',\r\n            type: 'text',\r\n            labels: [],\r\n            todos: [],\r\n            creator: {},\r\n            taskTeamMembers: []\r\n        },\r\n        edit: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nameInput.focus();\r\n        this.setFormDataForEdit();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.task !== this.props.task) {\r\n            this.setFormDataForEdit();\r\n        }\r\n    }\r\n\r\n    setFormDataForEdit() {\r\n        if (this.props.task) {\r\n            const task = this.props.task;\r\n            this.setState({\r\n                task: {\r\n                    id: task.id,\r\n                    title: task.title,\r\n                    createdAt: task.createdAt,\r\n                    dueDate: task.dueDate,\r\n                    importance: task.importance,\r\n                    description: this.props.description,\r\n                    type: task.type,\r\n                    labels: task.labels,\r\n                    todos: task.todos,\r\n                    creator: task.creator,\r\n                    taskTeamMembers: task.taskTeamMembers\r\n                },\r\n                edit: true\r\n            })\r\n        }\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        const fieldName = ev.target.name;\r\n        const value = ev.target.value;\r\n        this.setState({ task: { ...this.state.task, [fieldName]: value } })\r\n    }\r\n\r\n    save = (ev) => {\r\n        ev.preventDefault();\r\n        this.checkIfUrlAndSave(this.state.task.title);\r\n    }\r\n\r\n    checkIfUrlAndSave = (url) => {\r\n        const youtubeREGEX = /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\r\n        const imgREGEX = /.(jpg|jpeg|png|gif)\\/?$/;\r\n        if (url.match(youtubeREGEX)) {\r\n            const newUrl = url.replace('watch?v=', 'embed/');\r\n            return this.setState(prevState => ({ task: { ...prevState.task, title: '', type: 'video', url: newUrl } }), _ => {\r\n                this.saveTask();\r\n            });\r\n        } else if (url.match(imgREGEX)) {\r\n            return this.setState(prevState => ({ task: { ...prevState.task, title: '', type: 'image', url } }), _ => {\r\n                this.saveTask();\r\n            });\r\n        }\r\n        this.saveTask();\r\n    }\r\n\r\n    saveTask = _ => {\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [this.state.task.id]: this.state.task\r\n            }\r\n        };\r\n        const column = this.props.column;\r\n        const id = this.state.task.id;\r\n        if (!column.taskIds.includes(id)) column.taskIds.push(id);\r\n        const msg = (!this.state.edit) ?\r\n            `The task '${this.state.task.title}' was added by ${this.props.user}` :\r\n            `${this.props.user} edited the task '${this.state.task.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.closeUpdateForm();\r\n        if (this.props.toggleUpdateForm) this.props.toggleUpdateForm();\r\n        if (this.props.toggleTaskDetails) this.props.toggleTaskDetails();\r\n    }\r\n\r\n    textAreaAdjust = ev => {\r\n        ev.target.style.height = \"1px\"\r\n        ev.target.style.height = (25 + ev.target.scrollHeight) + \"px\";\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"task-form\" >\r\n            <form onSubmit={this.save} onClick={ev => ev.stopPropagation()}>\r\n                <div className=\"flex column\" >\r\n\r\n                    <textarea type=\"text\"\r\n                        onKeyUp={this.textAreaAdjust}\r\n                        placeholder=\"Enter a title for this card...\"\r\n                        name=\"title\"\r\n                        ref={(input) => { this.nameInput = input; }}\r\n                        onChange={this.inputChange} value={this.state.task.title} />\r\n                    <div className=\"save-btn-container flex align-center\">\r\n                        <button className=\"task-form-save-btn save capitalize\">add card</button>\r\n                        <CloseIcon className=\"task-form-back-btn\" onClick={(ev) => { ev.stopPropagation(); this.props.closeUpdateForm() }} />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\n\r\n// import AddIcon from '@material-ui/icons/Add';\r\n\r\nimport TopMenuOptions from './TopMenuOptions'\r\nimport TasksList from './TasksList';\r\nimport TaskForm from '../cmps/TaskForm'\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class BoardColumns extends Component {\r\n\r\n    state = {\r\n        timer: null,\r\n        title: ''\r\n    }\r\n\r\n    onDelete = (id) => {\r\n        const board = { ...this.props.board };\r\n        const columnOrder = board.columnOrder;\r\n        const column = board.columns[id];\r\n        for (const taskId of column.taskIds) {\r\n            for (const taskKey in board.tasks) {\r\n                if (taskId === taskKey) {\r\n                    delete board.tasks[taskKey];\r\n                }\r\n            }\r\n        }\r\n        delete board.columns[id];\r\n        const idx = columnOrder.findIndex(column => column === id);\r\n        columnOrder.splice(idx, 1);\r\n        const msg = `'${column.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger';\r\n        this.props.updateBoard(board, msg, notificationType);\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n\r\n    }\r\n\r\n    onDragEnd = result => {\r\n        const { destination, source, draggableId, type } = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        };\r\n\r\n        if (destination.droppableId === source.droppableId &&\r\n            destination.index === source.index) {\r\n            return;\r\n        };\r\n\r\n        if (type === 'column') {\r\n            const newColumnOrder = this.props.board.columnOrder.slice();\r\n            newColumnOrder.splice(source.index, 1);\r\n            newColumnOrder.splice(destination.index, 0, draggableId);\r\n            const columnTitle = this.props.board.columns[draggableId].title;\r\n            const newBoard = {\r\n                ...this.props.board,\r\n                columnOrder: newColumnOrder\r\n            }\r\n            const msg = `'${columnTitle}' was moved by ${this.props.user}`;\r\n            const notificationType = 'success';\r\n            this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n            return this.props.updateBoard(newBoard, msg, notificationType);\r\n        };\r\n\r\n        const start = this.props.board.columns[source.droppableId];\r\n        const finish = this.props.board.columns[destination.droppableId];\r\n\r\n        if (start === finish) {\r\n            const newTaskIds = start.taskIds.slice();\r\n            newTaskIds.splice(source.index, 1);\r\n            newTaskIds.splice(destination.index, 0, draggableId);\r\n            const newColumn = {\r\n                ...start,\r\n                taskIds: newTaskIds\r\n            };\r\n            const newBoard = {\r\n                ...this.props.board,\r\n                columns: {\r\n                    ...this.props.board.columns,\r\n                    [newColumn.id]: newColumn\r\n                }\r\n            };\r\n            const taskTitle = this.props.board.tasks[draggableId].title;\r\n            const msg = `${this.props.user} changed the position of the task '${taskTitle}'`;\r\n            const notificationType = 'success';\r\n            this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n            return this.props.updateBoard(newBoard, msg, notificationType);\r\n        };\r\n\r\n        const startTaskIds = start.taskIds.slice();\r\n        startTaskIds.splice(source.index, 1);\r\n        const newStart = {\r\n            ...start,\r\n            taskIds: startTaskIds\r\n        };\r\n\r\n        const finishTaskIds = finish.taskIds.slice();\r\n        finishTaskIds.splice(destination.index, 0, draggableId);\r\n        const newFinish = {\r\n            ...finish,\r\n            taskIds: finishTaskIds\r\n        };\r\n\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            columns: {\r\n                ...this.props.board.columns,\r\n                [newStart.id]: newStart,\r\n                [newFinish.id]: newFinish\r\n            }\r\n        };\r\n        const taskTitle = this.props.board.tasks[draggableId].title;\r\n        const msg = `${this.props.user} moved the task '${taskTitle}' from '${newStart.title}' to '${newFinish.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    handleCheck = (colId, title) => {\r\n        const columnTitle = this.props.board.columns[colId].title;\r\n        const msg = `${this.props.user} changed the name of '${columnTitle}' to $${title}`;\r\n        const notificationType = 'success';\r\n        clearTimeout(this.state.timer);\r\n        this.setState({\r\n            timer: setTimeout(() => {\r\n                const updatedBoard = { ...this.props.board };\r\n                updatedBoard.columns[colId].title = title;\r\n                this.props.updateBoard(updatedBoard, msg, notificationType);\r\n                this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n            }, 1000)\r\n        });\r\n    }\r\n\r\n    emitChange = (ev, colId) => {\r\n        this.setState({ title: ev.target.innerText }, _ => {\r\n            this.handleCheck(colId, this.state.title);\r\n        });\r\n    }\r\n\r\n    addCardText(column) {\r\n        return (column.taskIds.length === 0) ? 'Add a card' : 'Add another card';\r\n    }\r\n\r\n    render() {\r\n        const { currColumnId, showTopMenuOptions, showAddForm } = this.props;\r\n        return (\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\r\n                    {provided => (\r\n                        <div\r\n                            className=\"board-columns flex\"\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            {this.props.board.columnOrder.map((columnKey, idx) => {\r\n\r\n                                const column = this.props.board.columns[columnKey];\r\n                                const tasks = column.taskIds.map(currId => this.props.board.tasks[currId]);\r\n\r\n                                return <Draggable draggableId={columnKey} key={column.id} index={idx}>\r\n\r\n                                    {(provided, snapshot) => (\r\n                                        <NaturalDragAnimation\r\n                                            style={provided.draggableProps.style}\r\n                                            snapshot={snapshot}\r\n                                            rotationMultiplier={1.3}\r\n                                        >\r\n                                            {style => (\r\n\r\n                                                <div\r\n                                                    className=\"board-columns-item\"\r\n                                                    {...provided.draggableProps}\r\n                                                    ref={provided.innerRef}\r\n                                                    style={style}\r\n                                                >\r\n                                                    <div\r\n                                                        className=\"board-columns-item-header flex align-center space-between\"\r\n                                                        {...provided.dragHandleProps}\r\n                                                    >\r\n                                                        <div className=\"board-columns-item-header-h2-wrapper\">\r\n                                                            <h2\r\n                                                                contentEditable='true'\r\n                                                                spellCheck=\"false\"\r\n                                                                onInput={(ev) => this.emitChange(ev, column.id)}\r\n                                                                suppressContentEditableWarning={true}\r\n                                                            >\r\n                                                                {column.title}\r\n                                                            </h2>\r\n                                                        </div>\r\n\r\n\r\n                                                        <div className=\"board-columns-item-header-menu-btn-icon\"\r\n                                                            onClick={(ev) => { ev.stopPropagation(); this.props.openEditColumn(column.id) }}> ... </div>\r\n                                                    </div>\r\n\r\n\r\n\r\n                                                    {showTopMenuOptions && (currColumnId === column.id) ?\r\n                                                        <TopMenuOptions\r\n                                                            onDelete={this.onDelete}\r\n                                                            column={column}\r\n                                                            board={this.props.board}\r\n                                                            updateBoard={this.props.updateBoard}\r\n                                                            toggleTopMenuOptions={this.props.closeEditColumn}\r\n                                                            user={this.props.user}\r\n                                                        />\r\n                                                        : ''}\r\n                                                    <Droppable droppableId={column.id} type=\"task\">\r\n                                                        {(provided, snapshot) => {\r\n                                                            return <TasksList\r\n                                                                board={this.props.board}\r\n                                                                innerRef={provided.innerRef}\r\n                                                                provided={provided}\r\n                                                                tasks={tasks}\r\n                                                                isDraggingOver={snapshot.isDraggingOver}\r\n                                                                column={column}\r\n                                                                toggleTaskDetails={this.props.toggleTaskDetails}\r\n                                                                updateBoard={this.props.updateBoard}\r\n                                                                toggleMiniDetails={this.props.toggleMiniDetails}\r\n                                                                user={this.props.user}\r\n                                                            >\r\n                                                            </TasksList>\r\n                                                        }}\r\n                                                    </Droppable>\r\n\r\n                                                    {/* <div className=\"task-list-footer\"> */}\r\n                                                    {(!showAddForm || currColumnId !== column.id) &&\r\n                                                        <div className=\"task-list-footer flex align-center\">\r\n                                                            {/* <AddIcon/> */}\r\n                                                            <div className=\"task-list-footer-add-task fill-width\"\r\n                                                                onClick={(ev) => { ev.stopPropagation(); this.props.openAddForm(column.id) }}>\r\n                                                                <span className=\"add-icon\">+</span>{this.addCardText(column)}</div>\r\n                                                        </div>\r\n                                                    }\r\n                                                    {/* </div> */}\r\n                                                    {showAddForm && (currColumnId === column.id) ?\r\n                                                        <TaskForm\r\n                                                            user={this.props.user}\r\n                                                            board={this.props.board}\r\n                                                            column={column}\r\n                                                            closeUpdateForm={this.props.closeAddForm}\r\n                                                            updateBoard={this.props.updateBoard}\r\n                                                        />\r\n                                                        : ''\r\n                                                    }\r\n                                                </div>\r\n                                            )}\r\n                                        </NaturalDragAnimation>\r\n                                    )}\r\n                                </Draggable>\r\n                            })}\r\n                            {provided.placeholder}\r\n                        </div >)}\r\n                </Droppable>\r\n            </DragDropContext>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nexport default class BoardHistory extends Component {\r\n    render() {\r\n        return (\r\n            <div className={\"boardhistory-container column\"\r\n                + (this.props.showHistory ? ' translateLeft' : '')}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"uppercase text-center\">\r\n                        <h2>board history :</h2>\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n                <ul className=\"clean-list\">\r\n                    {this.props.history.map(item => (\r\n                        <li key={item.id}><div className=\"msg\">{item.msg}<br />{moment(item.time).calendar()}</div><hr /></li>\r\n\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport utils from '../services/utils'\r\n\r\nexport default class BoardTeamMembers extends Component {\r\n    state = {\r\n        currentBoardMembers: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({ currentBoardMembers: this.props.board.teamMembers });\r\n    }\r\n\r\n    updateTeamMembers = (user) => {\r\n        const board = this.props.board;\r\n        const teamMembers = board.teamMembers;\r\n        let msg = '';\r\n        let notificationType = '';\r\n        if (teamMembers.find(teamMember => teamMember._id === user._id)) {\r\n            const idx = teamMembers.findIndex(teamMember => teamMember._id === user._id);\r\n            teamMembers.splice(idx, 1);\r\n            msg = `${user.username} was removed from this board`;\r\n            notificationType = 'danger';\r\n        } else {\r\n            teamMembers.push(user);\r\n            msg = `${user.username} was added to this board`;\r\n            notificationType = 'success';\r\n        }\r\n        this.setState({ currentBoardMembers: teamMembers });\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n        this.props.updateBoard(board, msg, notificationType);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        const currentBoardMembers = this.state.currentBoardMembers;\r\n        const users = this.props.users.filter(user => !currentBoardMembers.find(boardMember => user._id === boardMember._id));\r\n        return (\r\n            <div className={\"board-team-members-container text-center column\"\r\n                + (this.props.toggleBoardTeamMembers ? ' translateLeft' : '')} onClick={(ev) => this.onStopPropagation(ev)}>\r\n\r\n                <div className=\"members-container-colors-container flex column\">\r\n                    <div className=\"pointer uppercase\"><h2>board members :</h2></div>\r\n                    <hr />\r\n                    {this.state.currentBoardMembers.map(teamMember => {\r\n                        return (\r\n                            <div key={teamMember._id} className=\"team-member flex align-center\"\r\n                                onClick={() => this.updateTeamMembers(teamMember)}>\r\n                                <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"capitalize\" style={{ color: '#172b4d' }}>\r\n                                            {utils.createUserIcon(teamMember.firstName, teamMember.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"capitalize\">{teamMember.firstName} {teamMember.lastName}</span>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n                <div className=\"add-team-members flex column\">\r\n                    <p className=\"pointer uppercase\">add / remove users</p>\r\n                    {users.map(user => {\r\n                        return (\r\n                            <div key={user._id} className=\"team-member flex align-center\"\r\n                                onClick={() => this.updateTeamMembers(user)}>\r\n                                <div className=\"team-member-icon-wrapper flex align-center justify-center\"\r\n                                    style={{ backgroundColor: '#dfe1e6' }}>\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"capitalize\" style={{ color: '#172b4d' }}>\r\n                                            {utils.createUserIcon(user.firstName, user.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"capitalize\">{user.firstName} {user.lastName}</span>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class ColumnAddForm extends Component {\r\n\r\n    state = {\r\n        column: {\r\n            id: utils.getRandomId(),\r\n            title: '',\r\n            taskIds: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nameInput.focus();\r\n        this.setFormDataForEdit();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.column !== this.props.column) {\r\n            this.setFormDataForEdit();\r\n        }\r\n    }\r\n\r\n    setFormDataForEdit() {\r\n        if (this.props.column) {\r\n            const column = this.props.column;\r\n            this.setState({\r\n                column: {\r\n                    id: column.id,\r\n                    title: column.title,\r\n                    taskIds: column.taskIds\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let value = ev.target.value;\r\n        this.setState({ column: { ...this.state.column, [fieldName]: value } })\r\n    }\r\n\r\n    saveColumn = (ev) => {\r\n        ev.preventDefault();\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            columns: {\r\n                ...this.props.board.columns,\r\n                [this.state.column.id]: this.state.column\r\n            }\r\n        };\r\n        const id = this.state.column.id;\r\n        const columnOrder = newBoard.columnOrder;\r\n        if (!columnOrder.includes(id)) columnOrder.push(id);\r\n        const msg = `'${this.state.column.title}' was added by ` + this.props.user;\r\n        const notificationType = 'success';\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.toggleAddForm();\r\n    }\r\n\r\n    render() {\r\n        return <form className=\"add-column-form-container flex column space-between\" onSubmit={this.saveColumn}>\r\n            <input\r\n                ref={(input) => { this.nameInput = input; }}\r\n                type='text'\r\n                placeholder='Enter list title...'\r\n                name='title'\r\n                onChange={this.inputChange}\r\n                value={this.state.column.title} />\r\n            <div className=\"save-btn-container flex\">\r\n                <button className=\"add-column-save-btn capitalize\"\r\n                    variant=\"contained\">add list</button>\r\n\r\n                <CloseIcon className=\"add-column-back-to-board flex align-center\"\r\n                    onClick={this.props.toggleAddForm} />\r\n\r\n            </div>\r\n        </form>\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Filter extends Component {\r\n\r\n    state = {\r\n        filterBy: {\r\n            title: '',\r\n            teamMembers: ''\r\n        }\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n\r\n        let fieldName = ev.target.name;\r\n        let value = ev.target.value;\r\n        this.setState(({ filterBy: { [fieldName]: value } }), () => this.props.onFilter(this.state.filterBy));\r\n    }\r\n\r\n    render() {\r\n\r\n        const teamMembers = this.props.teamMembers;\r\n\r\n        return <div className=\"board-page-nav-bar-filters-item flex\">\r\n            <input type=\"text\" placeholder=\"Search task by name\"\r\n                value={this.state.filterBy.title}\r\n                onChange={this.inputChange} name=\"title\">\r\n            </input>\r\n            <div className=\"board-page-nav-bar-filters-divider\"></div>\r\n            <select name=\"teamMembers\" onChange={this.inputChange}>\r\n                <option value=''>All Team Members</option>\r\n                {teamMembers.map(teamMember => (\r\n                    <option className=\"capitalize\" key={teamMember._id} value={`${teamMember.username}`}>{teamMember.firstName} {teamMember.lastName}</option>\r\n                ))}\r\n            </select>\r\n            {/* <button className=\"board-page-nav-bar-filters nav-btn search-btn\"\r\n                onClick={this.onFilterClick}>\r\n                <SearchIcon className=\"flex\" />\r\n            </button> */}\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Sort extends Component {\r\n\r\n    state = {\r\n        sortBy: '',\r\n        sortOrder: 'asc'\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let value = ev.target.value;\r\n        this.setState(prevState => ({ filterBy: { ...prevState.filterBy, [fieldName]: value } }));\r\n    }\r\n\r\n    onSortBy = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let sortOrder = (this.state.sortOrder === 'asc') ? 'desc' : 'asc';\r\n        this.setState({ sortBy: fieldName, sortOrder: sortOrder }, () => this.props.onSort(this.state.sortBy, this.state.sortOrder));\r\n    }\r\n\r\n    toggleButtonName = () => {\r\n        return (this.state.sortOrder === 'asc') ? 'Newest Tasks' : 'Oldest Tasks';\r\n    }\r\n\r\n    render() {\r\n        return <div  className=\"board-page-nav-bar-filters-item fill-height\">\r\n            <button className=\"nav-btn fill-height\"\r\n                onClick={this.onSortBy}\r\n                name='createdAt'>{this.toggleButtonName()}</button>\r\n\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport utils from '../services/utils';\r\n\r\nimport office from '../unsplashdefaultdata/officequery';\r\n\r\nexport default class SplashMenu extends Component {\r\n\r\n    state = {\r\n        splashImagesUrls: office,\r\n        filterByName: ''\r\n    }\r\n\r\n    inputChange = ev => {\r\n        this.setState({ filterByName: ev.target.value });\r\n    }\r\n\r\n    onSave = async () => {\r\n        try {\r\n            const splashImages = await utils.getImagesFromUnsplash(this.state.filterByName)\r\n            let splashImagesUrls = [];\r\n            splashImages.forEach(image => {\r\n                const UrlIndx = splashImagesUrls.findIndex(currUrl => currUrl === image.urls);\r\n                if (UrlIndx >= 0) {\r\n                    splashImagesUrls.splice(UrlIndx, 1)\r\n                } else {\r\n                    splashImagesUrls.push(image.urls);\r\n                }\r\n            })\r\n            this.setState({ splashImagesUrls });\r\n        } catch (err) {\r\n            // res.status(401).send({ error: err });\r\n        }\r\n    }\r\n\r\n    setBoardBackground = (imageUrl) => {\r\n        const newBoard = { ...this.props.board }\r\n        newBoard.boardBgImage = imageUrl.full;\r\n        newBoard.boardBgThumbnail = imageUrl.small;\r\n        const msg = `${this.props.user} changed background image`;\r\n        const notificationType = 'success';\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    stopPropagation = (ev) => {\r\n        ev.stopPropagation()\r\n    }\r\n\r\n    render() {\r\n        return <div className={\"splash-menu flex column align-center\" + (this.props.toggleSplashMenu ? ' translateLeft' : '')} \r\n        onClick={(ev) => this.stopPropagation(ev)}>\r\n            <div className=\"flex column fill-width filter-container\">\r\n                <div className=\"splash-menu-search-bar fill-width flex justify-center\">\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Search by name...'\r\n                        onChange={this.inputChange}\r\n                    />\r\n                    <button className=\"splash-menu-search-bar-save-btn\" onClick={this.onSave}>\r\n                        <SearchIcon />\r\n                    </button>\r\n                </div>\r\n                <button className=\"splash-menu-search-bar-save-btn upload-btn\">\r\n                    <input style={{ display: \"none\" }} type=\"file\" id=\"upload-img\" onChange={this.props.onAddImg}></input>\r\n                    <label htmlFor=\"upload-img\">upload image</label>\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"splash-images-container-wrapper\">\r\n                <div className=\"splash-images-container flex wrap fill-width\" >\r\n                    {this.state.splashImagesUrls.map(imageUrl => {\r\n                        return <div key={imageUrl.small} className=\"splash-images-container-item flex wrap\">\r\n                            <img src={imageUrl.small} alt=\"oops.. didn't found it\" onClick={() => this.setBoardBackground(imageUrl)}></img>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DatePicker from 'react-datepicker';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class DueDate extends React.Component {\r\n    state = {\r\n        dueDate: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDate();\r\n    }\r\n\r\n    setDate = _ => {\r\n        this.setState({ dueDate: this.props.task.dueDate ? new Date(this.props.task.dueDate) : new Date() })\r\n    }\r\n\r\n    // componentWillUnmount() {\r\n    //     this.saveTask();\r\n    // }\r\n\r\n    handleChange = date => {\r\n        this.setState({ dueDate: date });\r\n        this.saveTask();\r\n    }\r\n\r\n    saveTask = _ => {\r\n        const newTask = { ...this.props.task, dueDate: this.state.dueDate.getTime() };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} changed the due date for task '${this.props.task.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"duedate-edit flex column\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}>\r\n                <div className=\"close-btn-container\">\r\n                    <CloseIcon className=\"duedate-edit-close-btn\" onClick={this.props.onToggle} />\r\n                </div>\r\n\r\n                <div className=\"flex column align-center justify-center datepicker-container\">\r\n                    <DatePicker\r\n                        selected={this.state.dueDate}\r\n                        onChange={this.handleChange}\r\n                        showTimeSelect\r\n                        timeFormat=\"HH:mm\"\r\n                        timeIntervals={15}\r\n                        timeCaption=\"Time\"\r\n                        dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                    />\r\n                    <button className=\"add-duedate-btn capitalize\" onClick={this.saveTask}>add</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default class Labels extends Component {\r\n    state = {\r\n        choosenLabels: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setNewState();\r\n    }\r\n\r\n    setNewState = () => {\r\n        this.setState({ choosenLabels: this.props.task.labels })\r\n    }\r\n\r\n    updateChoosenLabels = (ev) => {\r\n        const label = ev.target.classList[0];\r\n        const choosenLabels = this.state.choosenLabels;\r\n        const labelIdx = choosenLabels.findIndex(currLabel => currLabel === label);\r\n        if (labelIdx >= 0) {\r\n            choosenLabels.splice(labelIdx, 1)\r\n        } else {\r\n            choosenLabels.push(label);\r\n        }\r\n        this.setState({ choosenLabels }, this.onSave);\r\n    }\r\n\r\n    onSave = () => {\r\n        const newTask = { ...this.props.task, labels: this.state.choosenLabels };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        this.props.updateBoard(newBoard);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        let updateStyle = null;\r\n        if (this.props.miniTask) {\r\n            updateStyle = {\r\n                left: 12 + 'px',\r\n                top: 36 + 'px',\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <div className=\"labels-container text-center\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}\r\n                style={{ ...updateStyle }}\r\n            >\r\n                <CloseIcon className=\"labels-container-close-btn\" onClick={this.props.toggleChooseLabels} />\r\n                <p className=\"uppercase\">choose labels</p>\r\n                <hr />\r\n                <div className=\"labels-container-colors-container flex column align-center \">\r\n                    <div className=\"label-color-1 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-2 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-3 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-4 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-5 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-6 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class Members extends Component {\r\n    state = {\r\n        choosenMembers: [],\r\n        availableMembers: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setNewState();\r\n    }\r\n\r\n    setNewState = () => {\r\n        this.setState({ choosenMembers: this.props.task.taskTeamMembers }, this.setAvailableMembers);\r\n    }\r\n\r\n    updateChoosenMembers = (teamMember) => {\r\n        const choosenMembers = this.state.choosenMembers;\r\n        const memberIdx = choosenMembers.findIndex(currMember => currMember._id === teamMember._id);\r\n        let msg = '';\r\n        let notificationType = '';\r\n        if (memberIdx >= 0) {\r\n            choosenMembers.splice(memberIdx, 1);\r\n            msg = `${teamMember.username} was released from the task '${this.props.task.title}'`;\r\n            notificationType = 'danger';\r\n        } else {\r\n            choosenMembers.push(teamMember);\r\n            msg = `${teamMember.username} was asigned to the task '${this.props.task.title}'`;\r\n            notificationType = 'success';\r\n        }\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n        this.setState({ choosenMembers }, this.setAvailableMembers(msg, notificationType));\r\n    }\r\n\r\n    setAvailableMembers = (msg, notificationType) => {\r\n        const availableMembers = this.props.board.teamMembers.filter(currMember => !this.state.choosenMembers.find(taskMember => taskMember._id === currMember._id));\r\n        this.setState({ availableMembers }, this.onSave(msg, notificationType));\r\n    }\r\n\r\n    onSave = (msg, notificationType) => {\r\n        const newTask = { ...this.props.task, taskTeamMembers: this.state.choosenMembers };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        let updateStyle = null;\r\n        if (this.props.pos) {\r\n            updateStyle = {\r\n                left: 10 + 'px',\r\n                top: 72 + 'px',\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"members-container text-center column\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}\r\n                style={{ ...updateStyle }}>\r\n                <CloseIcon className=\"members-container-close-btn\" onClick={this.props.toggleChooseMembers} />\r\n                <p className=\"uppercase\">assigned members</p>\r\n                <hr />\r\n                <div className=\"members-container-colors-container flex column\">\r\n                    {this.props.task.taskTeamMembers.map(member => {\r\n                        return <div key={member._id} className=\"team-member flex\"\r\n                            onClick={() => this.updateChoosenMembers(member)}>\r\n                            <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                                <div className=\"team-member-icon\">\r\n                                    <p>\r\n                                        {utils.createUserIcon(member.firstName,\r\n                                            member.lastName)}\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                            <p>{member.firstName} {member.lastName}</p>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <div className=\"add-team-members flex column\">\r\n                    <p className=\"uppercase\"> add a team member </p>\r\n                    {this.state.availableMembers.map(teamMember => {\r\n                        return (\r\n                            <div key={teamMember._id}\r\n                                className=\"team-member flex align-center\"\r\n                                onClick={() => this.updateChoosenMembers(teamMember)}>\r\n                                <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p>\r\n                                            {utils.createUserIcon(teamMember.firstName,\r\n                                                teamMember.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <p>{teamMember.firstName} {teamMember.lastName}</p>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div >\r\n            </div >\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport utils from '../services/utils'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default class TaskList extends Component {\r\n    state = {\r\n        todos: [],\r\n        text: '',\r\n        // toggleTodo: false\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setNewState();\r\n    }\r\n\r\n    setNewState = () => {\r\n        this.setState({ todos: this.props.task.todos })\r\n    }\r\n\r\n    // toggleTodo = () => {\r\n    //     this.setState(prevState => ({ toggleTodo: !prevState.toggleTodo }))\r\n    // }\r\n\r\n    updateTodo = (ev) => {\r\n        this.setState({ text: ev.target.value })\r\n    }\r\n\r\n\r\n    onSaveTodo = () => {\r\n        const todo = {\r\n            text: this.state.text,\r\n            isDone: false,\r\n            id: utils.getRandomId()\r\n        }\r\n        const todos = this.state.todos\r\n        todos.push(todo)\r\n\r\n        this.setState({\r\n            todos\r\n        })\r\n\r\n        const newTask = { ...this.props.task, todos: this.state.todos };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        this.props.updateBoard(newBoard);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"check-list-item-container text-center\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}\r\n            >\r\n                <div className=\"checklist-closebtn-container\">\r\n                    <CloseIcon className=\"check-list-item-container-close-btn pointer\" onClick={this.props.toggleTodos} />\r\n                </div>\r\n\r\n                <div className=\"input-container flex column justify-center align-center\">\r\n                    <input className=\"text-center\" type=\"text\" placeholder=\"add new todo\"\r\n                        value={this.state.text}\r\n                        onChange={this.updateTodo} name=\"text\">\r\n                    </input>\r\n                    <button className=\"save-todo-btn capitalize\" onClick={this.onSaveTodo}>add</button>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nimport NotesIcon from '@material-ui/icons/Notes';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\r\nimport AssignmentTurnedInOutlinedIcon from '@material-ui/icons/AssignmentTurnedInOutlined';\r\nimport EventOutlinedIcon from '@material-ui/icons/EventOutlined';\r\n\r\nimport DueDate from './DueDate';\r\nimport Labels from './Labels';\r\nimport Members from './Members';\r\nimport Todos from './Todos';\r\n\r\n\r\nimport utils from '../services/utils'\r\n\r\nexport default class TaskDetails extends Component {\r\n    state = {\r\n        deuDate: null,\r\n        description: '',\r\n        teamMembers: [],\r\n        choosenMembers: [],\r\n        choosenlabels: [],\r\n        showActivity: false,\r\n        showEditDescriptionForm: false,\r\n        toggleChooseLabels: false,\r\n        toggleChooseMembers: false,\r\n        toggleTodos: false,\r\n        onToggleDueDate: false,\r\n        toggleDeleteTodo: false,\r\n        progressWidth: 0,\r\n        currTodoId: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        let currTask = this.props.board.tasks[this.props.taskId]\r\n        this.setState({ description: currTask.description }, this.updateProgressBar);\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ description: targetValue });\r\n    }\r\n\r\n    toggleUpdateDescriptionForm = () => {\r\n        this.setState(prevState => ({ showEditDescriptionForm: !prevState.showEditDescriptionForm }))\r\n    }\r\n\r\n    onToggleDueDate = ev => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ onToggleDueDate: !prevState.onToggleDueDate }));\r\n    }\r\n\r\n\r\n    closeUpdateDescriptionForm = () => {\r\n        this.setState({ toggleUpdateDescriptionForm: false })\r\n    }\r\n\r\n    onStopPropagationAndCloseOptions = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState({\r\n            toggleChooseLabels: false,\r\n            toggleChooseMembers: false\r\n        })\r\n    }\r\n\r\n    toggleChooseLabels = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ toggleChooseLabels: !prevState.toggleChooseLabels }))\r\n    }\r\n\r\n    onSaveDescription = (task) => {\r\n        const newTask = { ...task, description: this.state.description };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `The description of '${task.title}' was changed by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    toggleChooseMembers = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ toggleChooseMembers: !prevState.toggleChooseMembers }))\r\n    }\r\n\r\n    toggleTodos = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ toggleTodos: !prevState.toggleTodos }))\r\n    }\r\n\r\n    onDuplicateTask = (column, task) => {\r\n        const newTask = { ...task, id: utils.getRandomId() };\r\n        column.taskIds.push(newTask.id);\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `The task '${task.title}' was duplicated by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.toggleTaskDetails();\r\n    }\r\n\r\n    onDeleteTask = (column, task) => {\r\n        const board = { ...this.props.board };\r\n        const taskIds = column.taskIds;\r\n        const idx = taskIds.findIndex(taskId => taskId === task.id);\r\n        taskIds.splice(idx, 1);\r\n        delete board.tasks[task.id];\r\n        const msg = `'${task.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger'; \r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n        this.props.updateBoard(board, msg, notificationType);\r\n        this.props.toggleTaskDetails();\r\n    }\r\n\r\n    toggleTodoDone = (todo) => {\r\n        todo.isDone = !todo.isDone;\r\n        let newTask = { ...this.props.board.tasks[this.props.taskId] };\r\n        const todos = newTask.todos;\r\n        const idx = todos.findIndex(currTodo => (currTodo.id === todo.id))\r\n        todos[idx].isDone = todo.isDone;\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        this.props.updateBoard(newBoard);\r\n        this.updateProgressBar()\r\n    }\r\n\r\n    updateProgressBar = () => {\r\n        let start = this.state.progressWidth;\r\n        let task = this.props.board.tasks[this.props.taskId];\r\n        let doneTodosCounter = task.todos.filter(todo => (todo.isDone)).length;\r\n        \r\n        //plaster brodthers---------------------\r\n        task.todosDone = doneTodosCounter;\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [task.id]: task\r\n            }\r\n        }\r\n        this.props.updateBoard(newBoard);\r\n        //----------------------------------\r\n\r\n        let interval;\r\n        let progressWidth = Math.round((doneTodosCounter / task.todos.length) * 100);\r\n        if (start < progressWidth) {\r\n            interval = setInterval(() => {\r\n                if (start >= progressWidth) {\r\n                    clearInterval(interval);\r\n                } else {\r\n                    start++;\r\n                    this.setState({ progressWidth: start })\r\n                }\r\n            }, 10);\r\n        } else {\r\n            interval = setInterval(() => {\r\n                if (start <= progressWidth) {\r\n                    clearInterval(interval);\r\n                } else {\r\n                    start--;\r\n                    this.setState({ progressWidth: start })\r\n                }\r\n            }, 10);\r\n        }\r\n    }\r\n\r\n    deleteTodo = (todoId) => {\r\n        let task = this.props.board.tasks[this.props.taskId];\r\n        let todos = task.todos;\r\n        const idx = todos.findIndex(currTodo => (currTodo.id === todoId))\r\n        todos.splice(idx, 1);\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [task.id]: task\r\n            }\r\n        }\r\n        this.props.updateBoard(newBoard);\r\n        this.updateProgressBar()\r\n        this.toggleDeleteTodo(todos.id);\r\n    }\r\n\r\n    toggleDeleteTodo = (todoId) => {\r\n        this.setState(prevState => ({ toggleDeleteTodo: !prevState.toggleDeleteTodo, currTodoId: todoId }))\r\n    }\r\n\r\n\r\n    render() {\r\n        const task = this.props.board.tasks[this.props.taskId];\r\n        const { column } = this.props;\r\n        return (\r\n            <div className=\"screen flex align-center justify-center\" onClick={() => this.props.toggleTaskDetails()}>\r\n\r\n                <div className=\"task-details-container flex\" onClick={(ev) => this.onStopPropagationAndCloseOptions(ev)}>\r\n                    <CloseIcon className=\"add-column-back-to-board   flex align-center\"\r\n                        onClick={() => this.props.toggleTaskDetails()} />\r\n                    <div className=\"task-details-container-main full\">\r\n                        <header className=\"task-details-container-header\">\r\n                            <DescriptionOutlinedIcon style={{\r\n                                color: '#42526e', position: 'absolute',\r\n                                top: '10px',\r\n                                left: '12px'\r\n                            }} />\r\n                            <h2>{task.title}</h2>\r\n                            <div className=\"task-details-container-in-list flex\">\r\n                                <p>in list <span style={{ textDecoration: \"underline\" }}>{column.title}</span></p>\r\n                            </div>\r\n                        </header>\r\n\r\n                        <div className=\"chosen-labels-container\">\r\n                            {this.state.toggleChooseLabels ?\r\n                                <Labels\r\n                                    toggleChooseLabels={this.toggleChooseLabels}\r\n                                    board={this.props.board}\r\n                                    task={task}\r\n                                    updateBoard={this.props.updateBoard}\r\n                                /> : ''\r\n                            }\r\n                            {task.labels.length !== 0 && <h3 className=\"uppercase\" style={{\r\n                                fontSize: '.75rem',\r\n                                fontWeight: 500,\r\n                                letterSpacing: '.04em',\r\n                            }}>Labels</h3>}\r\n                            <div className=\"labels-choosen-container flex\">\r\n                                {\r\n                                    task.labels.map(label => {\r\n                                        return <div key={label} className={label + ' medium-label'}>\r\n                                        </div>\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"task-details-container-members-container\">\r\n                            {this.state.toggleChooseMembers ?\r\n                                <Members\r\n                                    toggleChooseMembers={this.toggleChooseMembers}\r\n                                    board={this.props.board}\r\n                                    task={task}\r\n                                    updateBoard={this.props.updateBoard}\r\n                                    users={this.props.users}\r\n                                /> : ''\r\n                            }\r\n                            {task.taskTeamMembers.length !== 0 && <h3 className=\"uppercase\" style={{\r\n                                fontSize: '.75rem',\r\n                                fontWeight: 500,\r\n                                letterSpacing: '.04em'\r\n                            }}>members</h3>}\r\n                            <div className=\"flex\">\r\n                                {\r\n                                    task.taskTeamMembers.map(member => {\r\n                                        return <Avatar key={member._id} style={{\r\n                                            backgroundColor: '#dfe1e6',\r\n                                            height: 28,\r\n                                            width: 28,\r\n                                            fontSize: '0.85rem',\r\n                                            margin: '4px 4px 4px 0',\r\n                                            color: '#172b4d',\r\n                                            fontWeight: 600,\r\n                                            textAlign: 'center'\r\n                                        }}>\r\n                                            {utils.createUserIcon(member.firstName,\r\n                                                member.lastName)}\r\n                                        </Avatar>\r\n\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"task-details-container-check-list-container\">\r\n                            {this.state.toggleTodos ?\r\n                                <Todos\r\n                                    toggleTodos={this.toggleTodos}\r\n                                    board={this.props.board}\r\n                                    task={task}\r\n                                    updateBoard={this.props.updateBoard}\r\n                                /> : ''\r\n                            }\r\n                            <AssignmentTurnedInOutlinedIcon\r\n                                style={{\r\n                                    color: '#42526e',\r\n                                    position: 'relative',\r\n                                    top: '35px',\r\n                                    right: '44px',\r\n                                }}\r\n                            />\r\n                            <h2>Checklist</h2>\r\n\r\n                            {task.todos ?\r\n                                <div className=\"check-list-container flex column\">\r\n                                    {task.todos.map(todo => {\r\n                                        return <div key={todo.id} className=\"todo-item flex align-center space-between\" onMouseEnter={() => this.toggleDeleteTodo(todo.id)}\r\n                                            onMouseLeave={() => this.toggleDeleteTodo(todo.id)}>\r\n                                            <div className=\"flex align-center\">\r\n                                                <input type=\"checkbox\" onChange={() => this.toggleTodoDone(todo)} checked={todo.isDone ? 'checked' : ''}>\r\n                                                </input>\r\n                                                <p className={todo.isDone ? \"text-decoration\" : \"\"}>\r\n                                                    {todo.text}\r\n                                                </p>\r\n                                            </div>\r\n                                            <DeleteOutlineIcon\r\n                                                onClick={() => this.deleteTodo(todo.id)}\r\n                                                className=\"pointer delete-btn\"\r\n                                                style={{ display: this.state.toggleDeleteTodo && this.state.currTodoId === todo.id ? 'block' : 'none' }}\r\n                                            />\r\n                                        </div>\r\n                                    })\r\n                                    }\r\n                                    <div className=\"check-list-progress\">\r\n                                        <div className=\"progress fill-height flex align-center\" style={{ width: this.state.progressWidth + \"%\" }} >\r\n                                            <small className=\"fill-width text-center\">{this.state.progressWidth + \"%\"}</small>\r\n                                        </div>\r\n                                    </div>\r\n                                </div> : ''\r\n                            }\r\n                        </div>\r\n                        <div className=\"task-details-container-duedate-container\">\r\n                            <EventOutlinedIcon style={{\r\n                                color: '#42526e', position: 'relative',\r\n                                top: '35px',\r\n                                right: '44px'\r\n                            }} />\r\n                            <h2>Due Date</h2>\r\n                            {(task.dueDate) ?\r\n                                <p>{moment(task.dueDate).format(\"MMMM Do YYYY, hh:mm a\")}</p> :\r\n                                <p>This task doesn't have a due date yet</p>\r\n                            }\r\n                            {this.state.onToggleDueDate ? <DueDate\r\n                                task={task}\r\n                                onToggle={this.onToggleDueDate}\r\n                                board={this.props.board}\r\n                                updateBoard={this.props.updateBoard}\r\n                                user={this.props.user}\r\n                            /> : ''}\r\n                        </div>\r\n\r\n                        <div className=\"task-details-container-description\">\r\n                            <NotesIcon style={{\r\n                                color: '#42526e', position: 'relative',\r\n                                top: '35px',\r\n                                right: '44px'\r\n                            }} />\r\n                            <h2>Description</h2>\r\n                            <form onSubmit={this.save} onClick={this.toggleUpdateDescriptionForm}>\r\n                                <textarea className=\"fill-width\"\r\n                                    name=\"description\"\r\n                                    rows=\"3\"\r\n                                    cols=\"40\"\r\n                                    onInput={this.emitChange}\r\n                                    defaultValue={task.description}\r\n                                    spellCheck=\"false\"\r\n                                    placeholder=\"Add a more detailed description...\">\r\n                                </textarea>\r\n                            </form>\r\n                            {this.state.showEditDescriptionForm ?\r\n                                <div className=\"flex align-center\">\r\n                                    <button className=\"task-form-save-btn uppercase\" onClick={() => this.onSaveDescription(task)}>save</button>\r\n                                    <CloseIcon className=\"task-form-back-btn\" onClick={this.closeUpdateDescriptionForm} />\r\n                                </div> : ''\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"task-details-container-overall-options\">\r\n                        <div className=\"task-details-container-add-to-card-options-container\">\r\n                            <h3 className=\"uppercase\" style={{\r\n                                fontSize: '0.75rem',\r\n                                fontWeight: 500,\r\n                                letterSpacing: '0.04em'\r\n                            }}>add to card</h3>\r\n                            <div className=\"task-details-container-add-to-card-options flex column\">\r\n                                <div className=\"task-details-container-add-to-card-options-btn btn capitalize\" onClick={ev => this.toggleChooseLabels(ev)} >labels</div>\r\n                                <div className=\"task-details-container-add-to-card-options-btn btn capitalize\" onClick={ev => this.toggleChooseMembers(ev)} >members</div>\r\n                                <div className=\"task-details-container-add-to-card-options-btn btn capitalize\" onClick={ev => this.toggleTodos(ev)} >check list</div>\r\n                                <div className=\"task-details-container-add-to-card-options-btn btn capitalize\" onClick={ev => this.onToggleDueDate(ev)}>due date</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"task-details-container-actions-options-container\">\r\n                            <h3 className=\"uppercase\" style={{\r\n                                fontSize: '0.75rem',\r\n                                fontWeight: 500,\r\n                                letterSpacing: '0.04em'\r\n                            }}>actions</h3>\r\n                            <div className=\"task-details-container-actions-options-btn btn\" onClick={() => this.onDuplicateTask(column, task)}>Duplicate</div>\r\n                            <div className=\"task-details-container-actions-options-btn btn\" onClick={() => this.onDeleteTask(column, task)}>Delete</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nexport default class MiniDetailsButton extends Component {\r\n\r\n    render() {\r\n        const { text, onClick } = this.props;\r\n        return <div className=\"mini-details-editor-button\"\r\n            onClick={onClick}>\r\n            <p>{text}</p>\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsButton from './MiniDetailsButton';\r\nimport Labels from './Labels';\r\nimport DueDate from './DueDate';\r\nimport Members from './Members';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class MiniDetailsEditor extends Component {\r\n    state = {\r\n        onToggleLabels: false,\r\n        onToggleDueDate: false,\r\n        onToggleMembers: false\r\n    }\r\n\r\n    onToggleLabels = _ => {\r\n        this.setState(prevState => ({ onToggleLabels: !prevState.onToggleLabels }));\r\n    }\r\n\r\n    onToggleDueDate = _ => {\r\n        this.setState(prevState => ({ onToggleDueDate: !prevState.onToggleDueDate }));\r\n    }\r\n\r\n    onToggleMembers = _ => {\r\n        this.setState(prevState => ({ onToggleMembers: !prevState.onToggleMembers }));\r\n    }\r\n\r\n    onDuplicateTask = _ => {\r\n        const { task } = this.props.miniTask\r\n        const newTask = { ...task, id: utils.getRandomId() };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        newBoard.columns[this.props.miniTask.column.id].taskIds.push(newTask.id);\r\n        const msg = `The task '${task.title}' was duplicated by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    onDelete = _ => {\r\n        const { miniTask } = this.props;\r\n        const board = { ...this.props.board };\r\n        const column = this.props.miniTask.column;\r\n        const taskIds = column.taskIds;\r\n        const task = board.tasks[miniTask.task.id];\r\n        const idx = taskIds.findIndex(taskId => taskId === miniTask.task.id);\r\n        taskIds.splice(idx, 1);\r\n        delete board.tasks[miniTask.task.id];\r\n        const msg = `'${task.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger'; \r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n        this.props.updateBoard(board, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { miniTask } = this.props;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        let top = boundingClientRect.top;\r\n\r\n        if(top + 180 > window.innerHeight){\r\n            top = window.innerHeight - 180;\r\n        }\r\n\r\n        return <div\r\n            className=\"mini-details-editor\"\r\n            style={{\r\n                left: (boundingClientRect.left + 265) + 'px',\r\n                top: (top + 1) + 'px'\r\n            }}\r\n        >\r\n            <MiniDetailsButton text=\"🖊️ Edit Labels\" onClick={this.onToggleLabels} />\r\n            {this.state.onToggleLabels ? <Labels\r\n                miniTask={miniTask}\r\n                task={miniTask.task}\r\n                toggleChooseLabels={this.onToggleLabels}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard} /> : ''}\r\n            <MiniDetailsButton text=\"🎭 Change Members\" onClick={this.onToggleMembers} />\r\n            {this.state.onToggleMembers ? <Members\r\n                pos={true}\r\n                task={miniTask.task}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                toggleChooseMembers={this.onToggleMembers}\r\n            /> : ''}\r\n            <MiniDetailsButton text=\"📅 Change Due Date\" onClick={this.onToggleDueDate} />\r\n            {this.state.onToggleDueDate ? <DueDate\r\n                task={miniTask.task}\r\n                onToggle={this.onToggleDueDate}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n            /> : ''}\r\n            <MiniDetailsButton text=\"⎘ Duplicate Task\" onClick={this.onDuplicateTask} />\r\n            <MiniDetailsButton text=\"🗑️ Delete Task\" onClick={this.onDelete} />\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport default function ScreenFilter(props) {\r\n    return (\r\n        <div className=\"screen-filter\" onClick={_ => props.onToggle()}></div>\r\n    )\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsEditor from '../MiniDetailsEditor';\r\nimport ScreenFilter from '../ScreenFilter';\r\n\r\nimport utils from '../../services/utils';\r\n\r\nexport default class MiniTextDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textArea = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        title: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textArea.current.focus();\r\n    }\r\n\r\n    handleFocus = ev => {\r\n        ev.target.select();\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ title: targetValue });\r\n    }\r\n\r\n    onSave = _ => {\r\n        const newTask = { ...this.props.miniTask.task, title: this.state.title ? this.state.title : this.props.miniTask.task.title };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} changed the title of the task '${this.props.miniTask.task.title}' to '${this.state.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.miniTask;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        const labelLen = task.labels.length;\r\n        let height = boundingClientRect.height;\r\n        let top = boundingClientRect.top;\r\n\r\n        if (height + top > window.innerHeight) {\r\n            height = (window.innerHeight - top - 50) > 248 ? window.innerHeight - top - 50 : 248;\r\n        }\r\n        if (boundingClientRect.top > (window.innerHeight - (window.innerHeight / 4))) {\r\n            top = window.innerHeight - height - 50;\r\n        }\r\n        \r\n        return <div className=\"mini-details-container\">\r\n            <div\r\n                className=\"mini-details\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: top + 'px',\r\n                    height: height + 'px'\r\n                }}\r\n            >\r\n                <div className=\"task-container-labels flex\">\r\n                    {task.labels.map(label => {\r\n                        return <div key={label} className={label + ' small-label'}>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <textarea\r\n                    name=\"title\"\r\n                    className={\"text-area\" + (labelLen > 0 ? ' preview-label' : '')}\r\n                    defaultValue={task.title}\r\n                    ref={this.textArea}\r\n                    onFocus={this.handleFocus}\r\n                    onInput={this.emitChange}\r\n                    placeholder=\"Add a task title...\"\r\n                >\r\n                </textarea>\r\n            </div>\r\n            <button\r\n                className=\"mini-details-save-btn\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: (top + height + 10) + 'px'\r\n                }}\r\n                onClick={this.onSave}\r\n            >SAVE</button>\r\n            <MiniDetailsEditor\r\n                user={this.props.user}\r\n                miniTask={this.props.miniTask}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle}\r\n            />\r\n            <ScreenFilter onToggle={this.props.onToggle} />\r\n        </div >\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsEditor from '../MiniDetailsEditor';\r\nimport ScreenFilter from '../ScreenFilter';\r\n\r\nimport utils from '../../services/utils';\r\n\r\nexport default class MiniImageDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textArea = React.createRef();\r\n        this.imgContainer = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        title: '',\r\n        imgHeight: 220\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textArea.current.focus();\r\n        this.setState({ imgHeight: this.imgContainer.current.getBoundingClientRect().height });\r\n    }\r\n\r\n    handleFocus = ev => {\r\n        ev.target.select();\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ title: targetValue });\r\n    }\r\n\r\n    onSave = _ => {\r\n        const newTask = { ...this.props.miniTask.task, title: this.state.title ? this.state.title : this.props.miniTask.task.title };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} updated the task '${this.props.miniTask.task.title}' to '${this.state.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.miniTask;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        const labelLen = task.labels.length;\r\n        let height = boundingClientRect.height;\r\n        let top = boundingClientRect.top;\r\n        if (height + top > window.innerHeight) {\r\n            height = (window.innerHeight - top - 50) > 252 ? window.innerHeight - top - 50 : 252;\r\n        }\r\n        if (boundingClientRect.top > (window.innerHeight - (window.innerHeight / 4))) {\r\n            top = window.innerHeight - height - 50;\r\n        }\r\n\r\n        return <div className=\"mini-details-container\">\r\n            <div\r\n                className=\"mini-details\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: top + 'px',\r\n                    height: height + 'px'\r\n                }}\r\n            >\r\n                <img ref={this.imgContainer} title={task.id} alt=\"task\" src={task.url} />\r\n                <div className=\"task-container-labels flex\">\r\n                    {task.labels.map(label => {\r\n                        return <div key={label} className={label + ' small-label'}>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <textarea\r\n                    name=\"title\"\r\n                    className={\"text-area\" + (labelLen > 0 ? ' preview-label' : '')}\r\n                    style={{\r\n                        height: height - this.state.imgHeight + 'px',\r\n                        position: 'relative',\r\n                    }}\r\n                    defaultValue={task.title}\r\n                    ref={this.textArea}\r\n                    onFocus={this.handleFocus}\r\n                    onInput={this.emitChange}\r\n                    placeholder=\"Add a task title...\"\r\n                >\r\n                </textarea>\r\n            </div>\r\n            <button\r\n                className=\"mini-details-save-btn\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: (top + height + (task.title ? 10 : 32)) + 'px'\r\n                }}\r\n                onClick={this.onSave}\r\n            >SAVE</button>\r\n            <MiniDetailsEditor\r\n                user={this.props.user}\r\n                miniTask={this.props.miniTask}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle} />\r\n            <ScreenFilter onToggle={this.props.onToggle} />\r\n        </div >\r\n    }\r\n}","import MiniTextDetails from './MiniTextDetails';\r\nimport MiniImageDetails from './MiniImageDetails';\r\nimport MiniVideoDetails from './MiniVideoDetails';\r\n\r\nexport default {\r\n    text: MiniTextDetails,\r\n    video: MiniVideoDetails,\r\n    image: MiniImageDetails\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsEditor from '../MiniDetailsEditor';\r\nimport ScreenFilter from '../ScreenFilter';\r\n\r\nimport utils from '../../services/utils'\r\n\r\nexport default class MiniVideoDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textArea = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        title: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textArea.current.focus();\r\n    }\r\n\r\n    handleFocus = ev => {\r\n        ev.target.select();\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ title: targetValue });\r\n    }\r\n\r\n    onSave = _ => {\r\n        const newTask = { ...this.props.miniTask.task, title: this.state.title ? this.state.title : this.props.miniTask.task.title };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} updated the task '${this.props.miniTask.task.title}' to '${this.state.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.miniTask;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        const videoDimensions = { height: 140, width: 246 };\r\n        const labelLen = task.labels.length;\r\n        let height = boundingClientRect.height;\r\n        let top = boundingClientRect.top;\r\n\r\n        if (height + top > window.innerHeight) {\r\n            height = (window.innerHeight - top - 50) > 248 ? window.innerHeight - top - 50 : 248;\r\n        }\r\n        if (boundingClientRect.top > (window.innerHeight - (window.innerHeight / 4))) {\r\n            top = window.innerHeight - height - 50;\r\n        }\r\n        return <div className=\"mini-details-container\">\r\n            <div\r\n                className=\"mini-details\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: top + 'px',\r\n                    height: height + 'px'\r\n                }}\r\n            >\r\n                <iframe title={task.id}\r\n                    type='text/html' width={videoDimensions.width}\r\n                    height={videoDimensions.height}\r\n                    src={task.url}\r\n                    allowFullScreen=\"allowfullscreen\"></iframe>\r\n                <div className=\"task-container-labels flex\">\r\n                    {task.labels.map(label => {\r\n                        return <div key={label} className={label + ' small-label'}>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <textarea\r\n                    name=\"title\"\r\n                    className={\"text-area\" + (labelLen > 0 ? ' preview-label' : '')}\r\n                    style={{\r\n                        height: height - videoDimensions.height,\r\n                        position: 'relative',\r\n                        bottom: 14 + 'px'\r\n                    }}\r\n                    defaultValue={task.title}\r\n                    ref={this.textArea}\r\n                    onFocus={this.handleFocus}\r\n                    onInput={this.emitChange}\r\n                    placeholder=\"Add a task title...\"\r\n                >\r\n                </textarea>\r\n            </div>\r\n            <button\r\n                className=\"mini-details-save-btn\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: (top + height + (task.title ? 10 : 32)) + 'px'\r\n                }}\r\n                onClick={this.onSave}\r\n            >SAVE</button>\r\n            <MiniDetailsEditor\r\n                user={this.props.user}\r\n                miniTask={this.props.miniTask}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle} />\r\n            <ScreenFilter onToggle={this.props.onToggle} />\r\n        </div >\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport mapDynamicMiniComponents from \"./mapDynamicMiniComponents\"\r\n\r\nexport default class DynamicMiniComponent extends Component {\r\n    state = {\r\n        previewType: 'text'\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ previewType: this.props.miniTask.previewType });\r\n    }\r\n\r\n    getComponent() {\r\n        return mapDynamicMiniComponents[this.state.previewType];\r\n    }\r\n\r\n    render() {\r\n        const Cmp = this.getComponent();\r\n        return <React.Fragment>\r\n            <Cmp\r\n                miniTask={this.props.miniTask}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle}\r\n                board={this.props.board}\r\n                user={this.props.user}\r\n            >\r\n            </Cmp>\r\n        </React.Fragment>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { store } from 'react-notifications-component';\r\n\r\nimport LoadPage from '../cmps/LoadPage';\r\nimport BoardColumns from '../cmps/BoardColumns';\r\nimport BoardHistory from '../cmps/BoardHistory';\r\nimport BoardTeamMembers from '../cmps/BoardTeamMembers';\r\nimport ColumnAddForm from '../cmps/ColumnAddForm';\r\nimport Login from '../cmps/Login';\r\nimport Filter from '../cmps/Filter';\r\nimport Sort from '../cmps/Sort';\r\nimport SplashMenu from '../cmps/SplashMenu';\r\nimport TaskDetails from '../cmps/TaskDetails';\r\nimport DynamicMiniComponent from '../cmps/dynamics/DynamicMiniComponent';\r\n\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n// import AddIcon from '@material-ui/icons/Add';\r\n\r\nimport utils from '../services/utils';\r\nimport SocketService from '../services/SocketService';\r\n\r\nimport { loadBoard, updateBoard, setBoard } from '../actions/BoardActions';\r\nimport { logout, getLoggedInUser, getUsers } from '../actions/UserActions';\r\n\r\nclass Board extends Component {\r\n\r\n  state = {\r\n    showColAddForm: true,\r\n    showTaskDetails: false,\r\n    showMiniTaskDetails: false,\r\n    toggleLogin: false,\r\n    toggleSplashMenu: false,\r\n    showHistory: false,\r\n    toggleBoardTeamMembers: false,\r\n    miniTaskDetails: {},\r\n    filterBy: {\r\n      title: '',\r\n      teamMembers: ''\r\n    },\r\n    sortBy: '',\r\n    sortOrder: '',\r\n    showTopMenuOptions: true,\r\n    showAddForm: false,\r\n    currColumnId: '',\r\n    isBoardLoaded: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    const boardId = this.props.match.params.id;\r\n\r\n    this.props.getUsers();\r\n    this.props.getLoggedInUser();\r\n    this.loadBoard();\r\n\r\n    SocketService.setup();\r\n    SocketService.emit('boardId', boardId);\r\n    SocketService.on('updateBoard', (board) => this.props.setBoard(board));\r\n    SocketService.on('getNotification', (notification) => store.addNotification(notification));\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const boardId = this.props.match.params.id;\r\n    if (this.state.isBoardLoaded) {\r\n      return\r\n    } else if (boardId === this.props.board._id) this.setState({ isBoardLoaded: true });\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    SocketService.off('updateBoard');\r\n    SocketService.off('getNotification');\r\n    SocketService.terminate();\r\n  }\r\n\r\n  loadBoard = () => {\r\n    const boardId = this.props.match.params.id;\r\n    const filterBy = this.state.filterBy;\r\n    const sortBy = this.state.sortBy;\r\n    const sortOrder = this.state.sortOrder;\r\n    this.props.loadBoard(boardId, filterBy, sortBy, sortOrder);\r\n  }\r\n\r\n  toggleAddColumn = () => {\r\n    this.setState((prevState) => ({\r\n      showColAddForm: !prevState.showColAddForm,\r\n    }))\r\n  }\r\n\r\n  goBack = () => {\r\n    this.props.history.push('/');\r\n  }\r\n\r\n  toggleLogin = (ev) => {\r\n    ev.stopPropagation()\r\n    this.setState((prevState) => ({\r\n      toggleLogin: !prevState.toggleLogin,\r\n      showHistory: false,\r\n      toggleBoardTeamMembers: false,\r\n      toggleSplashMenu: false\r\n    }))\r\n  }\r\n\r\n  closeAllTabs = (ev) => {\r\n    ev.stopPropagation()\r\n    this.setState({\r\n      toggleLogin: false,\r\n      toggleSplashMenu: false,\r\n      showHistory: false,\r\n      toggleBoardTeamMembers: false,\r\n      showTopMenuOptions: false,\r\n      showAddForm: false,\r\n    });\r\n  }\r\n\r\n  toggleTaskDetails = (currTask) => {\r\n    if (currTask === undefined) {\r\n      this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails }));\r\n    } else if (this.state.showTaskDetails && currTask.id !== this.state.currTask.id) {\r\n      this.setState({ currTask });\r\n    } else {\r\n      this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails, currTask }));\r\n    }\r\n  }\r\n\r\n  onAddImg = (ev) => {\r\n    const file = ev.target.files[0];\r\n    utils.uploadImg(file).then(res => {\r\n      const newBoard = { ...this.props.board }\r\n      newBoard.boardBgImage = res\r\n      const msg = `${this.props.user} changed background image`;\r\n      const notificationType = 'success';\r\n      this.props.board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n      this.props.updateBoard(newBoard, msg, notificationType);\r\n    })\r\n  }\r\n\r\n  onFilter = (filterBy) => {\r\n    console.log('board filter', filterBy);\r\n    this.setState(prevState => ({ filterBy: { ...prevState.filterBy, ...filterBy } }), this.loadBoard);\r\n  }\r\n\r\n  onSort = (sortBy, sortOrder) => {\r\n    this.setState({ sortBy, sortOrder }, this.loadBoard);\r\n  }\r\n\r\n  toggleMiniDetails = miniTask => {\r\n    if (miniTask) {\r\n      return this.setState(prevState => ({ showMiniTaskDetails: !prevState.showMiniTaskDetails, miniTaskDetails: miniTask }));\r\n    }\r\n    this.setState(prevState => ({ showMiniTaskDetails: !prevState.showMiniTaskDetails }));\r\n  }\r\n\r\n  toggleSplashMenu = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState(prevState => ({\r\n      toggleSplashMenu: !prevState.toggleSplashMenu,\r\n      showHistory: false,\r\n      toggleBoardTeamMembers: false,\r\n      toggleLogin: false\r\n    }));\r\n  }\r\n\r\n  toggleBoardHistory = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState(prevState => ({\r\n      showHistory: !prevState.showHistory,\r\n      toggleSplashMenu: false,\r\n      toggleBoardTeamMembers: false,\r\n      toggleLogin: false\r\n    }));\r\n  }\r\n\r\n  toggleBoardTeamMembers = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState(prevState => ({\r\n      toggleBoardTeamMembers: !prevState.toggleBoardTeamMembers,\r\n      showHistory: false,\r\n      toggleSplashMenu: false,\r\n      toggleLogin: false\r\n    }))\r\n  }\r\n\r\n  openAddForm = colId => {\r\n    this.setState({ showAddForm: true, currColumnId: colId }, this.closeEditColumn);\r\n  }\r\n\r\n  closeAddForm = _ => {\r\n    this.setState({ showAddForm: false });\r\n  }\r\n\r\n  openEditColumn = (colId) => {\r\n    this.setState({ showTopMenuOptions: true, currColumnId: colId }, this.closeAddForm());\r\n  }\r\n\r\n  closeEditColumn = _ => {\r\n    this.setState({ showTopMenuOptions: false });\r\n  }\r\n\r\n\r\n  render() {\r\n    // if (!this.props.board.columns || this.props.match.params.id !== this.props.board._id) return <LoadPage />\r\n    if (!this.state.isBoardLoaded) return <LoadPage />\r\n    let button;\r\n    if (this.props.loggedInUser) {\r\n      button = <button className=\"board-page-nav-bar nav-btn\"\r\n        onClick={this.props.logout}>\r\n        logout\r\n      </button>\r\n    } else {\r\n      button = <button className=\"board-page-nav-bar nav-btn\"\r\n        onClick={ev => this.toggleLogin(ev)}>\r\n        login\r\n      </button>\r\n    }\r\n    return (\r\n      <div className=\"screen\" onClick={this.closeAllTabs}>\r\n        <div className=\"board-page fill-height flex column\" style={{ backgroundImage: 'url(' + this.props.board.boardBgImage + ')', backgroundAttachment: 'fixed' }}>\r\n\r\n          <div className=\"board-page-nav-bar flex space-between\">\r\n            <div className=\"board-page-nav-bar-logo\" onClick={this.goBack}> </div>\r\n            <div className=\"flex align-center\">\r\n              {this.props.loggedInUser && <p className=\"logged-in-user\">Logged in as: {this.props.loggedInUser.username}</p>}\r\n              {button}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"board-page-nav-bar-filters flex align-center space-between\">\r\n            <div className=\"board-page-nav-bar-filters-item flex align-center\">\r\n              <button className=\"board-page-nav-bar-filters nav-btn flex\">\r\n                <HomeIcon onClick={this.goBack} />\r\n              </button>\r\n\r\n              <div className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <Filter onFilter={this.onFilter} teamMembers={this.props.board.teamMembers} />\r\n\r\n              <div className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <Sort onSort={this.onSort} />\r\n            </div>\r\n\r\n            <div className=\"flex\">\r\n              <div className=\"board-page-nav-bar-filters-item fill-height\">\r\n                <button className=\"nav-btn fill-height\"\r\n                  onClick={this.toggleBoardTeamMembers}>Add Members</button>\r\n              </div>\r\n\r\n              <div className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <div className=\"board-page-nav-bar-filters-item fill-height\">\r\n                <button className=\"nav-btn fill-height\"\r\n                  onClick={(ev) => this.toggleSplashMenu(ev)}>Change Background</button>\r\n              </div>\r\n\r\n              <div className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <div className=\"board-page-nav-bar-filters-item flex fill-height\">\r\n                <button className=\"board-page-nav-bar-filters nav-btn\"\r\n                  onClick={this.toggleBoardHistory}>Show History</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <SplashMenu\r\n            toggleSplashMenu={this.state.toggleSplashMenu}\r\n            board={this.props.board}\r\n            updateBoard={this.props.updateBoard}\r\n            closeAllTabs={this.closeAllTabs}\r\n            onAddImg={this.onAddImg}\r\n            showUploadBgImg={this.state.closeAllTabs}\r\n            user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'}\r\n          />\r\n\r\n          {(this.state.toggleLogin) && <Login variant=\"outlined\" className=\"home-page-login\" toggleLogin={this.toggleLogin} />}\r\n          <div className=\"board-page-columns-container\">\r\n            <div className=\"flex align-start fill-height\">\r\n              <Login\r\n                variant=\"outlined\"\r\n                className=\"home-page-login\"\r\n                toggleLogin={this.toggleLogin}\r\n                toggleState={this.state.toggleLogin} />\r\n              <BoardColumns\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                toggleTaskDetails={this.toggleTaskDetails}\r\n                toggleMiniDetails={this.toggleMiniDetails}\r\n                user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'}\r\n                currColumnId={this.state.currColumnId}\r\n                openAddForm={this.openAddForm}\r\n                closeAddForm={this.closeAddForm}\r\n                openEditColumn={this.openEditColumn}\r\n                closeEditColumn={this.closeEditColumn}\r\n                showTopMenuOptions={this.state.showTopMenuOptions}\r\n                showAddForm={this.state.showAddForm}\r\n              />\r\n              <div className=\"flex column align-center\">\r\n                {this.state.showColAddForm ?\r\n                  <button className=\"board-page-add-another-column-btn\" onClick={this.toggleAddColumn}>\r\n                  <span className=\"add-icon\">+</span>Add another list  </button> : ''}\r\n                {!this.state.showColAddForm && <ColumnAddForm board={this.props.board} updateBoard={this.props.updateBoard}\r\n                  toggleAddForm={this.toggleAddColumn} user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'} />}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {this.state.showTaskDetails && <TaskDetails\r\n            taskId={this.state.currTask.id}\r\n            board={this.props.board}\r\n            column={this.state.currTask.column}\r\n            updateBoard={this.props.updateBoard}\r\n            toggleTaskDetails={this.toggleTaskDetails}\r\n            user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'} />}\r\n          {this.state.showMiniTaskDetails && <DynamicMiniComponent\r\n            miniTask={this.state.miniTaskDetails}\r\n            updateBoard={this.props.updateBoard}\r\n            onToggle={this.toggleMiniDetails}\r\n            board={this.props.board}\r\n            user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'}\r\n          />}\r\n\r\n          <BoardHistory variant=\"outlined\"\r\n            className=\"home-page-login\" history={this.props.board.history} showHistory={this.state.showHistory}\r\n            toggleBoardHistory={this.toggleBoardHistory} />\r\n\r\n          <BoardTeamMembers board={this.props.board}\r\n            users={this.props.users} toggleBoardTeamMembers={this.state.toggleBoardTeamMembers}\r\n            updateBoard={this.props.updateBoard} />\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    board: state.boards.board,\r\n    loggedInUser: state.user.loggedInUser,\r\n    users: state.user.users\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  loadBoard,\r\n  updateBoard,\r\n  logout,\r\n  getLoggedInUser,\r\n  setBoard,\r\n  getUsers\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport history from './history';\r\nimport '../src/styles/global.scss'\r\n\r\nimport Home from './pages/Home.js';\r\nimport Board from './pages/Board.js';\r\n\r\nfunction App() {\r\n  return (\r\n      <Router history={history}>\r\n        <Switch>\r\n          <Route path=\"/\" component={Home} exact />\r\n          <Route path=\"/board/:id\" component={Board} exact />\r\n        </Switch>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  boards: [],\r\n  board: {}\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_BOARDS':\r\n      return { ...state, boards: action.boards };\r\n    case 'SET_BOARD':\r\n      return { ...state, board: action.board };\r\n    case 'UPDATE_BOARD':\r\n      return { ...state, board: action.board };\r\n    case 'ADD_BOARD':\r\n      return { ...state, boards: [...state.boards, action.addedBoard] };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","let localLoggedinUser = null;\r\n// if (localStorage.user) localLoggedinUser = JSON.parse(localStorage.user);\r\n\r\nconst initialState = {\r\n  loggedInUser: localLoggedinUser,\r\n  users: []\r\n};\r\n\r\nexport default function(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_USER':\r\n      return { ...state, loggedInUser: action.user };\r\n    case 'SET_USERS':\r\n      return {...state, users: action.users};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const initialState = {\r\n  isLoading: false\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'LOADING_START':\r\n      return { ...state, isLoading: true };\r\n    case 'LOADING_DONE':\r\n      return { ...state, isLoading: false };\r\n    default: return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport BoardReducer from './BoardReducer'\r\nimport UserReducer from './UserReducer';\r\nimport SystemReducer from './SystemReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  boards: BoardReducer,\r\n  system: SystemReducer,\r\n  user: UserReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst Store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default Store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport ReactNotification from 'react-notifications-component';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'react-notifications-component/dist/theme.css';\n\nimport Store from './store';\n\nReactDOM.render(\n  <Provider store={Store}>\n    <ReactNotification />\n      <App />\n  </Provider>,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}