{"version":3,"sources":["history.js","cmps/BoardPreview.js","cmps/BoardsList.js","services/SocketService.js","services/utils.js","services/HttpService.js","services/UserService.js","actions/UserActions.js","cmps/Login.js","services/BoardService.js","actions/BoardActions.js","pages/Home.js","cmps/LoadPage.js","cmps/TopMenuOptions.js","cmps/dynamics/TaskPreview.js","cmps/dynamics/mapDynamicComponents.js","cmps/dynamics/VideoPreview.js","cmps/dynamics/ImagePreview.js","cmps/dynamics/DynamicComponent.js","cmps/TasksList.js","cmps/TaskForm.js","cmps/BoardColumns.js","cmps/BoardHistory.js","cmps/BoardTeamMembers.js","cmps/ColumnAddForm.js","cmps/Filter.js","cmps/Sort.js","cmps/SplashMenu.js","cmps/DueDate.js","cmps/Labels.js","cmps/Members.js","cmps/Todos.js","cmps/TaskDetails.js","cmps/MiniDetailsButton.js","cmps/MiniDetailsEditor.js","cmps/ScreenFilter.js","cmps/dynamics/MiniTextDetails.js","cmps/dynamics/MiniImageDetails.js","cmps/dynamics/mapDynamicMiniComponents.js","cmps/dynamics/MiniVideoDetails.js","cmps/dynamics/DynamicMiniComponent.js","pages/Board.js","App.js","serviceWorker.js","reducers/BoardReducer.js","reducers/UserReducer.js","reducers/SystemReducer.js","reducers/index.js","store.js","index.js"],"names":["history","createBrowserHistory","BoardPreview","board","className","style","height","width","position","src","boardBgThumbnail","alt","title","withRouter","socket","newBoards","boards","filter","_id","map","key","to","setup","io","terminate","on","eventName","cb","off","emit","data","getRandomId","letters","id","i","ind","Math","floor","random","length","createUserIcon","firstName","lastName","charAt","getRandomColor","color","uploadImg","file","UPLOAD_URL","formData","FormData","append","axios","post","then","res","url","catch","err","console","error","getImagesFromUnsplash","filterName","URL","get","results","emitNotification","msg","type","notification","message","insert","container","animationIn","animationOut","dismiss","duration","SocketService","Axios","create","withCredentials","endpoint","ajax","a","async","method","log","dir","response","status","push","login","userCred","HttpService","user","logout","signup","getLoggedInUser","getUsers","users","dispatch","UserService","_setUser","_setUsers","Login","state","loginCred","email","password","signupCred","username","utils","loginHandleChange","ev","target","name","value","setState","prevState","signupHandleChange","doLogin","preventDefault","userCreds","props","doSignup","signupCreds","toggleLogin","doLogout","doStopPropagation","stopPropagation","this","signupSection","onSubmit","onChange","placeholder","loginSection","loggedInUser","toggleState","onClick","Component","mapDispatchToProps","connect","isLoading","system","add","query","boardId","filterBy","sortBy","sortOrder","Object","keys","join","_createQueryString","put","remove","_setBoards","loadBoard","BoardService","_setBoard","_boardUpdate","Home","closeLogin","createBoard","createdBy","time","Date","now","newBoard","loadBoards","button","Button","Fab","variant","href","addedBoard","_addBoard","LoadPage","CircularProgress","TopMenuOptions","onDuplicateColumn","column","newColumn","newId","idx","columnOrder","findIndex","columnId","splice","taskIds","forEach","taskId","clonedTaskId","taskIdIdx","taskIdx","tasks","columns","toggleTopMenuOptions","updateBoard","onDelete","TaskPreview","toggleMiniDetails","miniTask","task","boundingClientRect","taskContainer","current","getBoundingClientRect","previewType","React","createRef","provided","innerRef","isDragging","showEditBtn","onTaskId","ref","draggableProps","dragHandleProps","labels","label","e","description","todos","todosDone","taskTeamMembers","member","backgroundColor","text","video","videoContainer","allowFullScreen","security","image","imgContainer","DynamicComponent","componentType","mapDynamicComponents","Cmp","getComponent","Fragment","TasksList","showAddForm","currTaskId","showTaskDetails","toggleTaskDetails","canOpenTaskDetails","hideEditBtn","isDraggingOver","droppableProps","draggableId","index","snapshot","rotationMultiplier","_","onMouseEnter","onMouseLeave","TaskForm","createdAt","dueDate","importance","creator","edit","inputChange","fieldName","save","checkIfUrlAndSave","match","newUrl","replace","saveTask","includes","closeUpdateForm","toggleUpdateForm","textAreaAdjust","scrollHeight","nameInput","focus","setFormDataForEdit","prevProps","onKeyUp","input","BoardColumns","timer","taskKey","onDragEnd","result","destination","source","droppableId","newColumnOrder","slice","columnTitle","start","finish","newTaskIds","taskTitle","startTaskIds","newStart","finishTaskIds","newFinish","setColumnName","emitChange","innerText","saveColumnName","updatedBoard","currColumnId","showTopMenuOptions","direction","columnKey","currId","contentEditable","spellCheck","onFocus","onInput","onBlur","suppressContentEditableWarning","openEditColumn","closeEditColumn","openAddForm","addCardText","closeAddForm","BoardHistory","showHistory","item","moment","calendar","BoardTeamMembers","currentBoardMembers","componentDidMount","teamMembers","updateTeamMembers","notificationType","find","teamMember","onStopPropagation","boardMember","toggleBoardTeamMembers","ColumnAddForm","saveColumn","toggleAddForm","Filter","onFilter","background","isDarkBackground","Sort","onSortBy","onSort","toggleButtonName","SplashMenu","splashImagesUrls","office","filterByName","onSave","splashImages","UrlIndx","currUrl","urls","setBoardBackground","imageUrl","boardBgImage","full","small","toggleSplashMenu","display","onAddImg","htmlFor","DueDate","setDate","handleChange","date","newTask","getTime","onToggle","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","Labels","choosenLabels","setNewState","updateChoosenLabels","classList","labelIdx","currLabel","updateStyle","left","top","toggleChooseLabels","Members","choosenMembers","availableMembers","setAvailableMembers","updateChoosenMembers","memberIdx","currMember","taskMember","pos","toggleChooseMembers","Todo","updateTodo","onSaveTodo","todo","isDone","toggleTodos","TaskDetails","deuDate","choosenlabels","showActivity","showEditDescriptionForm","onToggleDueDate","toggleDeleteTodo","progressWidth","currTodoId","targetValue","toggleUpdateDescriptionForm","closeUpdateDescriptionForm","onStopPropagationAndCloseOptions","onSaveDescription","onDuplicateTask","onDeleteTask","toggleTodoDone","currTodo","updateProgressBar","interval","doneTodosCounter","round","setInterval","clearInterval","deleteTodo","todoId","deletedTodo","hideDeleteTodoButton","showDeleteTodoButton","setTaskName","saveTaskName","currTask","fontSize","fontWeight","letterSpacing","Avatar","margin","textAlign","right","checked","format","rows","cols","defaultValue","MiniDetailsButton","MiniDetailsEditor","onToggleLabels","onToggleMembers","window","innerHeight","ScreenFilter","MiniTextDetails","handleFocus","select","textArea","labelLen","MiniImageDetails","imgHeight","videoDimensions","bottom","DynamicMiniComponent","mapDynamicMiniComponents","Board","showColAddForm","showMiniTaskDetails","miniTaskDetails","isBoardLoaded","filterIconMod","params","toggleAddColumn","goBack","closeAllTabs","undefined","files","toggleBoardHistory","colId","img","fac","FastAverageColor","backgroundImage","Image","crossOrigin","getColorAsync","algorithm","isDark","resize","innerWidth","imgRef","addEventListener","setBoard","store","addNotification","removeEventListener","backgroundAttachment","Typography","component","marginRight","showUploadBgImg","unshift","App","path","exact","Boolean","location","hostname","initialState","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6d8e4139.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React from \"react\";\r\n\r\nexport default function BoardPreview({ board }) {\r\n  return (\r\n    <div className=\"board-preview card\">\r\n      <img style={{ height: \"100%\", width: \"100%\", position: \"absolute\" }} src={board.boardBgThumbnail} alt=\"none\">\r\n      </img>\r\n      <div>\r\n        <h2 className=\"capitalize\">{board.title}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport BoardPreview from \"./BoardPreview\";\r\n\r\nfunction BoardsList({ boards }) {\r\n\r\n    const newBoards = boards.filter(board => board._id !== '5e2581b51c9d44000081af2a');\r\n\r\n    return (\r\n        <section className=\"boards-list flex column\">\r\n            <h2 className=\"text-center uppercase\"> check our beautiful boards</h2>\r\n            <div className=\"boards-list-main-container fill-width\">\r\n                <div className=\"boards-list-main-inner-container\">\r\n                    {newBoards.map(board => (\r\n                        <NavLink className=\"boards-list-main-inner-container-item\" key={board._id} to={`/board/${board._id}`}>\r\n                            <BoardPreview board={board} />\r\n                        </NavLink>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default withRouter(BoardsList)","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n  process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport default {\r\n  setup,\r\n  terminate,\r\n  on,\r\n  off,\r\n  emit\r\n};\r\n\r\nfunction setup() {\r\n  socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n  socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n  socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n  socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n  socket.emit(eventName, data);\r\n}\r\n","import axios from 'axios'\r\n\r\nimport SocketService from './SocketService';\r\n\r\nexport default {\r\n  getRandomId,\r\n  createUserIcon,\r\n  getRandomColor,\r\n  uploadImg,\r\n  getImagesFromUnsplash,\r\n  emitNotification\r\n}\r\n\r\nfunction getRandomId() {\r\n  let letters = '1234567890poiiytreqwasdfghjklmnbvcxxssersgyushquiz';\r\n  let id = '';\r\n  for (let i = 0; i < 10; i++) {\r\n    let ind = Math.floor(Math.random() * letters.length)\r\n    id += letters[ind];\r\n  }\r\n  return id;\r\n}\r\n\r\nfunction createUserIcon(firstName, lastName) {\r\n  let newIcon = firstName.charAt(0) + lastName.charAt(0)\r\n  return (newIcon)\r\n}\r\n\r\nfunction getRandomColor() {\r\n  var letters = '0123456789ABCDEF';\r\n  var color = '#';\r\n  for (var i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n\r\nfunction uploadImg(file) {\r\n  const CLOUD_NAME = 'dujlxvxxv'\r\n  const PRESET_NAME = 'xi62wuas'\r\n  const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\r\n\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  formData.append('upload_preset', PRESET_NAME);\r\n\r\n  return axios.post(UPLOAD_URL, formData)\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      return res.url\r\n    })\r\n    .catch(err => console.error(err))\r\n}\r\n\r\nfunction getImagesFromUnsplash(filterName) {\r\n  const client_id = '9a992bf0a58ef7c4735758c98ec044dcdb524c2178db25d55cd773d7436f15d1'\r\n  const URL = `https://api.unsplash.com/search/photos?per_page=20&query=${filterName}&client_id=${client_id}`\r\n  return axios.get(URL)\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      return res.results\r\n    })\r\n    .catch(err => console.error(err))\r\n}\r\n\r\nfunction emitNotification(msg, type) {\r\n  const notification = {\r\n    message: msg,\r\n    type: type,\r\n    insert: \"top\",\r\n    container: \"bottom-right\",\r\n    animationIn: [\"animated\", \"zoomIn\"],\r\n    animationOut: [\"animated\", \"fadeOut\"],\r\n    dismiss: {\r\n      duration: 5000,\r\n    }\r\n  };\r\n  SocketService.emit('sendNotification', notification);\r\n}","import history from '../history';\r\nimport Axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data){\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data){\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data){\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data){\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method='get', data=null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        if (err.response && err.response.status === 401) {\r\n          history.push('/');\r\n        }\r\n        throw err;\r\n    }\r\n}","import HttpService from './HttpService'\r\n\r\nexport default {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getLoggedInUser,\r\n    getUsers\r\n}\r\n\r\nasync function login(userCred) {\r\n    try {\r\n        const user = await HttpService.post('auth/login', userCred);\r\n        return user;\r\n    } catch (err) {\r\n        console.log('UserService: err in login', err);\r\n    }\r\n}\r\n\r\nasync function signup(userCred) {\r\n    try {\r\n        const user = await HttpService.post('auth/signup', userCred);\r\n        return user;\r\n    } catch (err) {\r\n        console.log('UserService: err in signup', err);\r\n    }\r\n}\r\n\r\nasync function logout() {\r\n    try {\r\n        await HttpService.post('auth/logout');\r\n    } catch (err) {\r\n        console.log('UserService: err in logout', err);\r\n    }\r\n}\r\n\r\nasync function getLoggedInUser() {\r\n    try {\r\n        const user = await HttpService.get('auth/user');\r\n        return user;\r\n    } catch (err) {\r\n        console.log('UserService: err in getting loggedInUser', err);\r\n    }\r\n}\r\n\r\nasync function getUsers() {\r\n    try {\r\n        const users = await HttpService.get('user');\r\n        return users;\r\n    } catch (err) {\r\n        console.log('UserService: err in getting users', err);\r\n    }\r\n}\r\n","import UserService from '../services/UserService';\r\n// import { loading, doneLoading } from './SystemActions';\r\n// import history from './../history';\r\n\r\nexport function login(userCreds) {\r\n  return async dispatch => {\r\n    try {\r\n      const user = await UserService.login(userCreds);\r\n      dispatch(_setUser(user));\r\n    } catch (err) {\r\n      console.log('UserActions: err in login', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function signup(userCreds) {\r\n  return async dispatch => {\r\n    try {\r\n      const user = await UserService.signup(userCreds);\r\n      dispatch(_setUser(user));\r\n    } catch (err) {\r\n      console.log('UserActions: err in signup', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function logout() {\r\n  return async dispatch => {\r\n    try {\r\n      await UserService.logout();\r\n      dispatch(_setUser(null));\r\n    } catch (err) {\r\n      console.log('UserActions: err in logout', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function getLoggedInUser() {\r\n  return async dispatch => {\r\n    try {\r\n      const user = await UserService.getLoggedInUser();\r\n      // localStorage.setItem('user', JSON.stringify(user));\r\n      dispatch(_setUser(user));\r\n    }  catch (err) {\r\n      console.log('UserActions: err in logout', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _setUser(user) {\r\n  return {\r\n    type: 'SET_USER',\r\n    user\r\n  };\r\n}\r\n\r\nexport function getUsers() {\r\n  return async dispatch => {\r\n    try {\r\n      const users = await UserService.getUsers();\r\n      dispatch(_setUsers(users));\r\n    } catch (err) {\r\n      console.log('UserActions: err in getUsers', err);\r\n    }\r\n  }\r\n}\r\n\r\nfunction _setUsers(users) {\r\n  return {\r\n    type: 'SET_USERS',\r\n    users\r\n  };\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport utils from '../services/utils'\r\n\r\nimport {\r\n  // loadUsers,\r\n  getLoggedInUser,\r\n  login,\r\n  logout,\r\n  signup\r\n} from '../actions/UserActions';\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    msg: '',\r\n    loginCred: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n    signupCred: {\r\n      firstName: '',\r\n      lastName: '',\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n      color: utils.getRandomColor()\r\n    },\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.getLoggedInUser();\r\n  }\r\n\r\n  loginHandleChange = ev => {\r\n    const { name, value } = ev.target;\r\n    this.setState(prevState => ({\r\n      loginCred: {\r\n        ...prevState.loginCred,\r\n        [name]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  signupHandleChange = ev => {\r\n    const { name, value } = ev.target;\r\n    this.setState(prevState => ({\r\n      signupCred: {\r\n        ...prevState.signupCred,\r\n        [name]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  doLogin = async ev => {\r\n    ev.preventDefault();\r\n    const { email, password } = this.state.loginCred;\r\n    if (!email || !password) {\r\n      return this.setState({ msg: 'Please enter user/password' });\r\n    }\r\n    const userCreds = { email, password };\r\n    this.props.login(userCreds);\r\n    this.setState({ loginCred: { email: '', password: '' } });\r\n    // this.props.toggleLogin();\r\n  };\r\n\r\n  doSignup = async ev => {\r\n    ev.preventDefault();\r\n    const { firstName, lastName, username, email, password, color } = this.state.signupCred;\r\n    if (!firstName || !lastName || !email || !password || !username) {\r\n      return this.setState({ msg: 'All inputs are required!' });\r\n    }\r\n    const signupCreds = { firstName, lastName, username, email, password, color };\r\n    this.props.signup(signupCreds);\r\n    this.setState({ signupCred: { firstName: '', lastName: '', username: '', email: '', password: '' } });\r\n    this.props.toggleLogin();\r\n  };\r\n\r\n  doLogout = () => {\r\n    this.props.logout();\r\n  }\r\n\r\n  doStopPropagation = (ev) => {\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    let signupSection = (\r\n      <form className=\"login-container-signup text-center\" onSubmit={this.doSignup}>\r\n        <p>Not a member yet? Sign up!</p>\r\n        <input\r\n          type=\"text\"\r\n          name=\"firstName\"\r\n          value={this.state.signupCred.firstName}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"First Name\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"lastName\"\r\n          value={this.state.signupCred.lastName}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Last Name\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          value={this.state.signupCred.email}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Email\"\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={this.state.signupCred.username}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Username\"\r\n        />\r\n        <br />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={this.state.signupCred.password}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Password\"\r\n        />\r\n        <br />\r\n        <button className=\"login-container-signup-btn\">Signup</button>\r\n      </form>\r\n    );\r\n    let loginSection = (\r\n      <form className=\"login-container-login text-center\" onSubmit={this.doLogin}>\r\n        <p> Login: </p>\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          value={this.state.loginCred.email}\r\n          onChange={this.loginHandleChange}\r\n          placeholder=\"Email\"\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={this.state.loginCred.password}\r\n          onChange={this.loginHandleChange}\r\n          placeholder=\"Password\"\r\n        />\r\n        <br />\r\n        <button className=\"login-container-login-btn\">Login</button>\r\n      </form>\r\n    );\r\n\r\n    const { loggedInUser } = this.props;\r\n\r\n    return (\r\n\r\n      // <div className=\"screen\" onClick={() => this.props.toggleLogin()} >\r\n\r\n      <div className={\"login-container flex column align-center\"\r\n        + (this.props.toggleState ? ' translateLeft' : '')}\r\n        style={this.props.style}\r\n        onClick={this.doStopPropagation}>\r\n\r\n\r\n        <div className=\"login-container-logo\">\r\n        </div>\r\n        <h2>{this.state.msg}</h2>\r\n        <div className={\"login-container-form-container\"}>\r\n          {loggedInUser && (\r\n            <div>\r\n              <h2 className=\"login-container-loggedin-username\"> <p>Welcome!</p> {loggedInUser.username} </h2>\r\n              <div className=\"fill-width flex\">\r\n                <button className=\"login-container-form-container-logout\" onClick={this.doLogout}>Logout</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {!this.props.loggedInUser && loginSection}\r\n          <hr />\r\n          {!this.props.loggedInUser && signupSection}\r\n        </div>\r\n      </div>\r\n\r\n      // </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    users: state.user.users,\r\n    loggedInUser: state.user.loggedInUser,\r\n    isLoading: state.system.isLoading\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  login,\r\n  logout,\r\n  signup,\r\n  getLoggedInUser\r\n  // loadUsers\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import HttpService from './HttpService';\r\n\r\nexport default {\r\n  add,\r\n  query,\r\n  get,\r\n  put,\r\n  remove\r\n};\r\n\r\nfunction query() {\r\n  return HttpService.get('board');\r\n}\r\n\r\nfunction get(boardId, filterBy, sortBy, sortOrder) {\r\n  return HttpService.get(`board/${boardId}?${_createQueryString(filterBy)}&sortby=${sortBy}&sortorder=${sortOrder}`);\r\n}\r\n\r\nfunction _createQueryString(filterBy) {\r\n  return Object.keys(filterBy).map(filter => filter + '=' + filterBy[filter]).join('&');\r\n}\r\n\r\nfunction put(board) {\r\n  return HttpService.put(`board/${board._id}`, board);\r\n}\r\n\r\nfunction remove(boardId) {\r\n  return HttpService.delete(`board/${boardId}`);\r\n}\r\n\r\nfunction add(board) {\r\n  return HttpService.post('board', board);\r\n}","import BoardService from '../services/BoardService';\r\nimport SocketService from '../services/SocketService';\r\nimport utils from '../services/utils';\r\n\r\nexport function loadBoards() {\r\n  return async dispatch => {\r\n    try {\r\n      const boards = await BoardService.query();\r\n      dispatch(_setBoards(boards));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoards', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _setBoards(boards) {\r\n  return {\r\n    type: 'SET_BOARDS',\r\n    boards\r\n  };\r\n}\r\n\r\nexport function loadBoard(boardId, filterBy, sortBy, sortOrder) {\r\n  return async dispatch => {\r\n    try {\r\n      const board = await BoardService.get(boardId, filterBy, sortBy, sortOrder);\r\n      dispatch(_setBoard(board));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoard', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _setBoard(board) {\r\n  return {\r\n    type: 'SET_BOARD',\r\n    board\r\n  }\r\n}\r\n\r\nexport function updateBoard(board, msg, notificationType) {\r\n  return async dispatch => {\r\n    try {\r\n      board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n      dispatch(_boardUpdate(board));\r\n      await BoardService.put(board);\r\n      SocketService.emit('boardUpdate', board);\r\n      utils.emitNotification(msg, notificationType);\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoard', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _boardUpdate(board) {\r\n  return {\r\n    type: 'UPDATE_BOARD',\r\n    board\r\n  }\r\n}\r\n\r\nexport function updateBoardOffline(board) {\r\n  return async dispatch => {\r\n    try {\r\n      dispatch(_boardUpdate(board));\r\n      sessionStorage.setItem('board', JSON.stringify(board));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoard', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function createBoard(board) {\r\n  return async dispatch => {\r\n    try {\r\n      const addedBoard = await BoardService.add(board);\r\n      dispatch(_addBoard(addedBoard));\r\n      return addedBoard;\r\n    } catch (err) {\r\n      console.log('BoardActions: err in createBoard', err);\r\n    }\r\n  }\r\n\r\n  function _addBoard(addedBoard) {\r\n    return {\r\n      type: 'ADD_BOARD',\r\n      addedBoard\r\n    };\r\n  }\r\n}\r\n\r\nexport function setBoard(board) {\r\n  return async dispatch => {\r\n    try {\r\n      dispatch(_setBoard(board));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in setBoard', err);\r\n    }\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Fab from '@material-ui/core/Fab';\r\n\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\n\r\nimport BoardsList from '../cmps/BoardsList';\r\nimport Login from '../cmps/Login';\r\n\r\nimport utils from '../services/utils';\r\n\r\nimport { loadBoards, loadBoard, createBoard } from '../actions/BoardActions'\r\nimport { logout } from '../actions/UserActions'\r\n\r\nclass Home extends Component {\r\n\r\n  state = {\r\n    toggleLogin: false,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.loadBoards();\r\n  }\r\n\r\n  toggleLogin = (ev) => {\r\n    if (ev) ev.stopPropagation();\r\n    this.setState((prevState) => ({ toggleLogin: !prevState.toggleLogin }))\r\n  }\r\n\r\n  closeLogin = (ev) => {\r\n    ev.stopPropagation()\r\n    this.setState({ toggleLogin: false })\r\n  }\r\n\r\n  createBoard = async () => {\r\n    let board = this.props.board;\r\n    const username = (this.props.loggedInUser) ? this.props.loggedInUser.username : 'Guest';\r\n    let msg = `The Board was created by ${username}`;\r\n    delete board._id;\r\n    board.createdBy = this.props.loggedInUser;\r\n    board.history = [{ id: utils.getRandomId(), msg: msg, time: Date.now() }];\r\n    const newBoard = await this.props.createBoard(board);\r\n    this.props.history.push(`/board/${newBoard._id}`);\r\n  }\r\n\r\n  render() {\r\n    let button;\r\n    if (this.props.loggedInUser) {\r\n      button = <Button className=\"home-page-login-btn\">\r\n        <div onClick={this.props.logout}>logout</div>\r\n      </Button>\r\n    } else {\r\n      button = <Button className=\"home-page-login-btn\">\r\n        <div onClick={this.toggleLogin}>login</div>\r\n      </Button>\r\n    }\r\n\r\n    return (\r\n      <div className=\"home-page\" onClick={this.closeLogin}>\r\n        <section className=\"home-page-header\">\r\n          <div className=\"home-page-login flex justify-end align-center\">\r\n            {(this.props.loggedInUser) &&\r\n              <p className=\"flex column\">\r\n                <small>welcome!</small>\r\n                {this.props.loggedInUser.username}\r\n              </p>\r\n            }\r\n            {button}\r\n          </div>\r\n\r\n          <Login\r\n            className=\"home-page-login\"\r\n            toggleLogin={this.toggleLogin}\r\n            toggleState={this.state.toggleLogin} />\r\n\r\n          <div className=\"home-page-header-container flex\">\r\n            <div className=\"header-image flex align-center justify-center fill-width fill-height\">\r\n              <div className=\"login-get-started-container flex align-center justify-center align-center\">\r\n                <div className=\"home-page-logo-get-started flex column align-center\">\r\n                  <div className=\"home-page-header-container-logo-img fill-width fill-height\"></div>\r\n                  <div className=\"text-center\">\r\n                    <h2>Manage your tasks in a fun and easy way</h2>\r\n                  </div>\r\n                  <div className=\"get-started-btn\">\r\n                    <Fab variant=\"extended\">\r\n                      <p className=\"uppercase\" onClick={this.createBoard}>\r\n                        get started\r\n                    </p>\r\n                    </Fab>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        <section className=\"home-page-boards-list flex wrap colum justify-center\">\r\n          <div className=\"home-page-boards-list-img\"></div>\r\n          <p className=\"home-page-boards-list-start-new-board-right-text flex justify-center align-center\">\r\n            We, in Trebello, believe that simplicity and style must go together,\r\n            that's why we made our brand simple and easy to use for everyone.<br /> <br />\r\n            Organize your team and take them one step ahead.</p>\r\n        </section>\r\n\r\n\r\n\r\n        <BoardsList boards={this.props.boards} />\r\n\r\n        <section className=\"home-page-footer flex column align-center justify-center\">\r\n          <h2> OUR TEAM </h2>\r\n          <div className=\"home-pagge-footer-team-members-cards-container flex wrap justify-center\">\r\n\r\n            <div className=\"home-page-footer-team-member-card flex column align-center justify-center\">\r\n              <div className=\"home-page-footer-team-member-card-member-img vlad\"></div>\r\n              <p>Vlad Batalin</p>\r\n              <small>Design and overall technical support</small>\r\n              <div className=\"flex\">\r\n                <LinkedInIcon className=\"linkedInIcon\"></LinkedInIcon>\r\n                <FacebookIcon className=\"faceBookIcon\"></FacebookIcon>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"home-page-footer-team-member-card flex column align-center justify-center\">\r\n              <div className=\"home-page-footer-team-member-card-member-img margad\"></div>\r\n              <p>Margad Taikhir</p>\r\n              <small>High functionality backend support</small>\r\n              <div className=\"flex\">\r\n                <LinkedInIcon className=\"linkedInIcon\"></LinkedInIcon>\r\n                <FacebookIcon className=\"faceBookIcon\"></FacebookIcon>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"home-page-footer-team-member-card flex column align-center justify-center\">\r\n              <div className=\"home-page-footer-team-member-card-member-img paolo\"></div>\r\n              <p>Paolo Groppi</p>\r\n              <small>High functionality and backend</small>\r\n              <div className=\"flex\">\r\n                <a href=\"https://www.linkedin.com/in/paolo-groppi-6ba84117b\" target=\"blank\"><LinkedInIcon className=\"linkedInIcon\"></LinkedInIcon></a>\r\n                <a href=\"https://www.facebook.com/karma.tova\" target=\"blank\"><FacebookIcon className=\"faceBookIcon\"></FacebookIcon></a>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </section>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    boards: state.boards.boards,\r\n    board: state.boards.board,\r\n    loggedInUser: state.user.loggedInUser\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  loadBoards,\r\n  loadBoard,\r\n  createBoard,\r\n  logout\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nexport default function LoadPage() {\r\n  return (\r\n    <div className=\"loading-page flex column align-center justify-center\">\r\n      <h2 className=\"uppercase\"> just a moment :)</h2>\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class TopMenuOptions extends Component {\r\n\r\n    onDuplicateColumn = () => {\r\n\r\n        let column = this.props.column;\r\n        let board = this.props.board;\r\n        let newColumn = { ...this.props.column }\r\n        const newId = utils.getRandomId();\r\n        const idx = board.columnOrder.findIndex(columnId => columnId === column.id);\r\n\r\n        newColumn.id = newId;\r\n        board.columnOrder.splice(idx + 1, 0, newColumn.id);\r\n\r\n        newColumn.taskIds.forEach(taskId => {\r\n\r\n            const clonedTaskId = utils.getRandomId();\r\n            const taskIdIdx = column.taskIds.findIndex(taskIdx => taskIdx === taskId);\r\n\r\n            board.tasks[clonedTaskId] = { ...board.tasks[taskId], id: clonedTaskId }\r\n            newColumn.taskIds = [...newColumn.taskIds];\r\n            newColumn.taskIds.splice(taskIdIdx, 1, clonedTaskId);\r\n        });\r\n\r\n        board.columns[newId] = newColumn;\r\n        this.props.toggleTopMenuOptions(column.id);\r\n        const msg = `'${column.title}' was duplicated by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(board, msg, notificationType);\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"top-menu-options\">\r\n            <h2 className=\"text-center capitalize\">options menu</h2>\r\n            <div className=\"options-container flex column\">\r\n                <p className=\"capitalize\" onClick={this.onDuplicateColumn}>duplicate list</p>\r\n                <p className=\"capitalize\" onClick={() => this.props.onDelete(this.props.column.id)}>delete list</p>\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport utils from '../../services/utils'\r\n\r\nexport default class TaskPreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.taskContainer = React.createRef();\r\n    }\r\n\r\n\r\n    toggleMiniDetails = ev => {\r\n        ev.stopPropagation();\r\n        const miniTask = {\r\n            task: this.props.task,\r\n            boundingClientRect: this.taskContainer.current.getBoundingClientRect(),\r\n            previewType: 'text',\r\n            column: this.props.column\r\n        };\r\n        this.props.toggleMiniDetails(miniTask);\r\n    }\r\n\r\n    render() {\r\n        const { task, provided, innerRef, isDragging, style, showEditBtn, onTaskId } = this.props;\r\n        return (\r\n            <section ref={this.taskContainer}>\r\n                <div\r\n                    className={\"task-container\" + (isDragging ? \" isDragging\" : \"\")}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={innerRef}\r\n                    style={style}\r\n                >\r\n                    <div className=\"task-container-labels flex wrap\">\r\n                        {task.labels.map(label => {\r\n                            return <div key={label} className={label + ' small-label'}>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n\r\n                    <p className=\"task-container-title\">{task.title}</p>\r\n\r\n\r\n                    {(showEditBtn && (onTaskId === task.id)) ?\r\n                        <CreateIcon className=\"task-container-open-menu\"\r\n                            onClick={e => this.toggleMiniDetails(e)} />\r\n                        : ''}\r\n\r\n                    <div className={\"bottom-container grid-container flex\" + (task.description === '' ? ' row-reverse' : '')}>\r\n\r\n\r\n                        {(task.description !== '') ?\r\n                            <div className=\"grid-item justify-self-center align-self-center\">\r\n                                <SubjectIcon />\r\n                            </div>\r\n                            : <div className=\"grid-item\"></div>\r\n                        }\r\n\r\n                        {(task.todos.length > 0) ?\r\n                            <div className=\"grid-item align-center flex\">\r\n                                <div className=\"flex\">\r\n                                    <CheckBoxIcon />\r\n                                    <p>{task.todosDone + '/' + task.todos.length}</p>\r\n                                </div>\r\n                            </div>\r\n                            : <div className=\"grid-item\"></div>\r\n                        }\r\n\r\n\r\n\r\n                        <div className=\"team-members-container grid-item\">\r\n                            <div className=\"flex justify-end\">\r\n                                {(task.taskTeamMembers.map(member => {\r\n                                    return <div key={member._id} className=\"team-member-icon-wrapper flex align-center\" style={{ backgroundColor: '#dfe1e6' }} >\r\n                                        <div className=\"team-member-icon\">\r\n                                            <p className=\"flex align-center\" style={{ color: '#172b4d' }}>\r\n                                                {utils.createUserIcon(member.firstName,\r\n                                                    member.lastName)}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n                                }))\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import TaskPreview from './TaskPreview';\r\nimport VideoPreview from './VideoPreview';\r\nimport ImagePreview from './ImagePreview';\r\n\r\nexport default {\r\n    text: TaskPreview,\r\n    video: VideoPreview,\r\n    image: ImagePreview\r\n}","import React, { Component } from \"react\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport utils from '../../services/utils'\r\n\r\n\r\nexport default class VideoPreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.videoContainer = React.createRef();\r\n    }\r\n\r\n    toggleMiniDetails = ev => {\r\n        ev.stopPropagation();\r\n        const miniTask = {\r\n            task: this.props.task,\r\n            boundingClientRect: this.videoContainer.current.getBoundingClientRect(),\r\n            previewType: 'video',\r\n            column: this.props.column\r\n        };\r\n        this.props.toggleMiniDetails(miniTask);\r\n    }\r\n\r\n\r\n    render() {\r\n        const { task, provided, innerRef, isDragging, style, showEditBtn, onTaskId } = this.props;\r\n        return (\r\n            <section ref={this.videoContainer}>\r\n                <div\r\n                    className={\"task-container without-padding flex column\" + (isDragging ? \" isDragging\" : \"\")}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={innerRef}\r\n                    style={style}\r\n                >\r\n                    <iframe title={task.id} type='text/html' width=\"252\" height=\"142\" allowFullScreen=\"allowfullscreen\" src={task.url} security=\"restricted\"></iframe>\r\n                    <div className=\"task-container-labels flex\">\r\n                        {task.labels.map(label => {\r\n                            return <div key={label} className={label + ' small-label'}>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                    <p className=\"task-container-title\">{task.title}</p>\r\n                    <div className={\"flex align-center space-between\" + (task.description === '' ? ' row-reverse' : '')}>\r\n                        {(showEditBtn && (onTaskId === task.id)) ?\r\n                            <CreateIcon className=\"task-container-open-menu\"\r\n                                onClick={e => this.toggleMiniDetails(e)} />\r\n                            : ''}\r\n                        {(task.description !== '') ?\r\n                            <ListAltIcon /> : ''\r\n                        }\r\n\r\n                        <div className=\"flex\">\r\n                            {(task.taskTeamMembers.map(member => {\r\n                                return <div key={member._id} className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: `${member.color}` }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"flex align-center\">\r\n                                            {utils.createUserIcon(member.firstName,\r\n                                                member.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            }))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport utils from '../../services/utils'\r\n\r\n\r\nexport default class ImagePreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.imgContainer = React.createRef();\r\n    }\r\n    \r\n    toggleMiniDetails = ev => {\r\n        ev.stopPropagation();\r\n        const miniTask = {\r\n            task: this.props.task,\r\n            boundingClientRect: this.imgContainer.current.getBoundingClientRect(),\r\n            previewType: 'image',\r\n            column: this.props.column,\r\n        };\r\n        this.props.toggleMiniDetails(miniTask);\r\n    }\r\n\r\n    render() {\r\n        const { task, provided, innerRef, isDragging, style, showEditBtn, onTaskId } = this.props;\r\n        return (\r\n            <section ref={this.imgContainer}>\r\n                <div\r\n                    className={\"task-container without-padding flex column align center\" + (isDragging ? \" isDragging\" : \"\")}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={innerRef}\r\n                    style={style}\r\n                >\r\n                    <img title={task.id} alt=\"task\" src={task.url} />\r\n                    <div className=\"task-container-labels flex wrap\">\r\n                        {task.labels.map(label => {\r\n                            return <div key={label} className={label + ' small-label'}>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                    <p className=\"task-container-title\">{task.title}</p>\r\n                    <div className={\"flex align-center space-between\" + (task.description === '' ? ' row-reverse' : '')}>\r\n                        {(showEditBtn && (onTaskId === task.id)) ?\r\n                            <CreateIcon className=\"task-container-open-menu\"\r\n                                onClick={e => this.toggleMiniDetails(e)} />\r\n                            : ''}\r\n                        {(task.description !== '') ?\r\n                            <ListAltIcon /> : ''\r\n                        }\r\n                        <div className=\"flex\">\r\n                            {(task.taskTeamMembers.map(member => {\r\n                                return <div key={member._id} className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: `${member.color}` }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"flex align-center\">\r\n                                            {utils.createUserIcon(member.firstName,\r\n                                                member.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            }))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport mapDynamicComponents from \"./mapDynamicComponents\"\r\n\r\nexport default class DynamicComponent extends Component {\r\n    state = {\r\n        componentType: 'text',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ componentType: this.props.task.type });\r\n    }\r\n\r\n    getComponent() {\r\n        return mapDynamicComponents[this.state.componentType];\r\n    }\r\n\r\n    render() {\r\n        const Cmp = this.getComponent();\r\n        return <React.Fragment>\r\n            <Cmp\r\n                column={this.props.column}\r\n                provided={this.props.provided}\r\n                innerRef={this.props.innerRef}\r\n                task={this.props.task}\r\n                isDragging={this.props.isDragging}\r\n                style={this.props.style}\r\n                onTaskId={this.props.onTaskId}\r\n                showEditBtn={this.props.showEditBtn}\r\n                toggleMiniDetails = {this.props.toggleMiniDetails}\r\n                user={this.props.user}\r\n            >\r\n            </Cmp>\r\n        </React.Fragment>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\n\r\nimport DynamicComponent from './dynamics/DynamicComponent';\r\n\r\nexport default class TasksList extends Component {\r\n\r\n    state = {\r\n        showAddForm: false,\r\n        currTaskId: '',\r\n        onTaskId: '',\r\n        showTaskDetails: false\r\n    }\r\n\r\n    toggleTaskDetails = id => {\r\n        if (id) {\r\n            this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails, currTaskId: id }));\r\n        } else {\r\n            this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails }));\r\n        }\r\n\r\n    }\r\n\r\n    canOpenTaskDetails = taskId => {\r\n        return (this.state.showTaskDetails && this.state.currTaskId === taskId)\r\n    }\r\n\r\n    showEditBtn = (id) => {\r\n        this.setState({ showEditBtn: true, onTaskId: id })\r\n    }\r\n\r\n    hideEditBtn = () => {\r\n        this.setState({ showEditBtn: false })\r\n    }\r\n\r\n    render() {\r\n        const { tasks, provided, innerRef, isDraggingOver } = this.props;\r\n        return (\r\n            <section\r\n                className={\"task-list\" + (isDraggingOver ? \" isDraggingOver\" : \"\")}\r\n                {...provided.droppableProps}\r\n                ref={innerRef}\r\n            >\r\n                        {tasks.map((task, idx) => (\r\n                            <div key={task.id} className=\"task-list-container\">\r\n                                <Draggable draggableId={task.id} index={idx}>\r\n                                    {(provided, snapshot) => (\r\n                                        <NaturalDragAnimation\r\n                                            style={provided.draggableProps.style}\r\n                                            snapshot={snapshot}\r\n                                            rotationMultiplier={1.3}\r\n                                        >\r\n                                            {style => (\r\n                                                <div onClick={_ => this.props.toggleTaskDetails({ id: task.id, column: this.props.column })}\r\n                                                    onMouseEnter={() => this.showEditBtn(task.id)}\r\n                                                    onMouseLeave={() => this.hideEditBtn()}\r\n                                                >\r\n                                                    <DynamicComponent\r\n                                                        provided={provided}\r\n                                                        innerRef={provided.innerRef}\r\n                                                        task={task}\r\n                                                        column={this.props.column}\r\n                                                        isDragging={snapshot.isDragging}\r\n                                                        style={style}\r\n                                                        onTaskId={this.state.onTaskId}\r\n                                                        showEditBtn={this.state.showEditBtn}\r\n                                                        toggleMiniDetails = {this.props.toggleMiniDetails}\r\n                                                        user={this.props.user}\r\n                                                    >\r\n                                                    </DynamicComponent>\r\n                                                </div>\r\n                                            )}\r\n                                        </NaturalDragAnimation>\r\n                                    )}\r\n                                </Draggable>\r\n                            </div>\r\n                        ))}\r\n                        {provided.placeholder}\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport utils from '../services/utils'\r\n\r\nexport default class TaskForm extends Component {\r\n\r\n    state = {\r\n        task: {\r\n            id: utils.getRandomId(),\r\n            title: '',\r\n            createdAt: Date.now(),\r\n            dueDate: '',\r\n            importance: '',\r\n            description: '',\r\n            type: 'text',\r\n            labels: [],\r\n            todos: [],\r\n            creator: {},\r\n            taskTeamMembers: []\r\n        },\r\n        edit: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nameInput.focus();\r\n        this.setFormDataForEdit();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.task !== this.props.task) {\r\n            this.setFormDataForEdit();\r\n        }\r\n    }\r\n\r\n    setFormDataForEdit() {\r\n        if (this.props.task) {\r\n            const task = this.props.task;\r\n            this.setState({\r\n                task: {\r\n                    id: task.id,\r\n                    title: task.title,\r\n                    createdAt: task.createdAt,\r\n                    dueDate: task.dueDate,\r\n                    importance: task.importance,\r\n                    description: this.props.description,\r\n                    type: task.type,\r\n                    labels: task.labels,\r\n                    todos: task.todos,\r\n                    creator: task.creator,\r\n                    taskTeamMembers: task.taskTeamMembers\r\n                },\r\n                edit: true\r\n            })\r\n        }\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        const fieldName = ev.target.name;\r\n        const value = ev.target.value;\r\n        this.setState({ task: { ...this.state.task, [fieldName]: value } })\r\n    }\r\n\r\n    save = (ev) => {\r\n        ev.preventDefault();\r\n        this.checkIfUrlAndSave(this.state.task.title);\r\n    }\r\n\r\n    checkIfUrlAndSave = (url) => {\r\n        const youtubeREGEX = /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\r\n        const imgREGEX = /.(jpg|jpeg|png|gif)\\/?$/;\r\n        if (url.match(youtubeREGEX)) {\r\n            const newUrl = url.replace('watch?v=', 'embed/');\r\n            return this.setState(prevState => ({ task: { ...prevState.task, title: '', type: 'video', url: newUrl } }), _ => {\r\n                this.saveTask();\r\n            });\r\n        } else if (url.match(imgREGEX)) {\r\n            return this.setState(prevState => ({ task: { ...prevState.task, title: '', type: 'image', url } }), _ => {\r\n                this.saveTask();\r\n            });\r\n        }\r\n        this.saveTask();\r\n    }\r\n\r\n    saveTask = _ => {\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [this.state.task.id]: this.state.task\r\n            }\r\n        };\r\n        const column = this.props.column;\r\n        const id = this.state.task.id;\r\n        if (!column.taskIds.includes(id)) column.taskIds.push(id);\r\n        const msg = (!this.state.edit) ?\r\n            `The task '${this.state.task.title}' was added by ${this.props.user}` :\r\n            `${this.props.user} edited the task '${this.state.task.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.closeUpdateForm();\r\n        if (this.props.toggleUpdateForm) this.props.toggleUpdateForm();\r\n        if (this.props.toggleTaskDetails) this.props.toggleTaskDetails();\r\n    }\r\n\r\n    textAreaAdjust = ev => {\r\n        ev.target.style.height = \"1px\"\r\n        ev.target.style.height = (25 + ev.target.scrollHeight) + \"px\";\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"task-form\" >\r\n            <form onSubmit={this.save} onClick={ev => ev.stopPropagation()}>\r\n                <div className=\"flex column\" >\r\n\r\n                    <textarea type=\"text\"\r\n                        onKeyUp={this.textAreaAdjust}\r\n                        placeholder=\"Enter a title for this card...\"\r\n                        name=\"title\"\r\n                        ref={(input) => { this.nameInput = input; }}\r\n                        onChange={this.inputChange} value={this.state.task.title} />\r\n                    <div className=\"save-btn-container flex align-center\">\r\n                        <button className=\"task-form-save-btn save capitalize\">add card</button>\r\n                        <CloseIcon className=\"task-form-back-btn\" onClick={(ev) => { ev.stopPropagation(); this.props.closeUpdateForm() }} />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\n\r\n// import AddIcon from '@material-ui/icons/Add';\r\n\r\nimport TopMenuOptions from './TopMenuOptions'\r\nimport TasksList from './TasksList';\r\nimport TaskForm from '../cmps/TaskForm'\r\n\r\nexport default class BoardColumns extends Component {\r\n\r\n    state = {\r\n        timer: null,\r\n        title: ''\r\n    }\r\n\r\n    onDelete = (id) => {\r\n        const board = { ...this.props.board };\r\n        const columnOrder = board.columnOrder;\r\n        const column = board.columns[id];\r\n        for (const taskId of column.taskIds) {\r\n            for (const taskKey in board.tasks) {\r\n                if (taskId === taskKey) {\r\n                    delete board.tasks[taskKey];\r\n                }\r\n            }\r\n        }\r\n        delete board.columns[id];\r\n        const idx = columnOrder.findIndex(column => column === id);\r\n        columnOrder.splice(idx, 1);\r\n        const msg = `'${column.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger';\r\n        this.props.updateBoard(board, msg, notificationType);\r\n    }\r\n\r\n    onDragEnd = result => {\r\n        const { destination, source, draggableId, type } = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        };\r\n\r\n        if (destination.droppableId === source.droppableId &&\r\n            destination.index === source.index) {\r\n            return;\r\n        };\r\n\r\n        if (type === 'column') {\r\n            const newColumnOrder = this.props.board.columnOrder.slice();\r\n            newColumnOrder.splice(source.index, 1);\r\n            newColumnOrder.splice(destination.index, 0, draggableId);\r\n            const columnTitle = this.props.board.columns[draggableId].title;\r\n            const newBoard = {\r\n                ...this.props.board,\r\n                columnOrder: newColumnOrder\r\n            }\r\n            const msg = `'${columnTitle}' was moved by ${this.props.user}`;\r\n            const notificationType = 'success';\r\n            return this.props.updateBoard(newBoard, msg, notificationType);\r\n        };\r\n\r\n        const start = this.props.board.columns[source.droppableId];\r\n        const finish = this.props.board.columns[destination.droppableId];\r\n\r\n        if (start === finish) {\r\n            const newTaskIds = start.taskIds.slice();\r\n            newTaskIds.splice(source.index, 1);\r\n            newTaskIds.splice(destination.index, 0, draggableId);\r\n            const newColumn = {\r\n                ...start,\r\n                taskIds: newTaskIds\r\n            };\r\n            const newBoard = {\r\n                ...this.props.board,\r\n                columns: {\r\n                    ...this.props.board.columns,\r\n                    [newColumn.id]: newColumn\r\n                }\r\n            };\r\n            const taskTitle = this.props.board.tasks[draggableId].title;\r\n            const msg = `${this.props.user} changed the position of the task '${taskTitle}'`;\r\n            const notificationType = 'success';\r\n            return this.props.updateBoard(newBoard, msg, notificationType);\r\n        };\r\n\r\n        const startTaskIds = start.taskIds.slice();\r\n        startTaskIds.splice(source.index, 1);\r\n        const newStart = {\r\n            ...start,\r\n            taskIds: startTaskIds\r\n        };\r\n\r\n        const finishTaskIds = finish.taskIds.slice();\r\n        finishTaskIds.splice(destination.index, 0, draggableId);\r\n        const newFinish = {\r\n            ...finish,\r\n            taskIds: finishTaskIds\r\n        };\r\n\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            columns: {\r\n                ...this.props.board.columns,\r\n                [newStart.id]: newStart,\r\n                [newFinish.id]: newFinish\r\n            }\r\n        };\r\n        const taskTitle = this.props.board.tasks[draggableId].title;\r\n        const msg = `${this.props.user} moved the task '${taskTitle}' from '${newStart.title}' to '${newFinish.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    setColumnName = (columnId) => {\r\n        const columnTitle = this.props.board.columns[columnId].title;\r\n        this.setState({ title: columnTitle });\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        this.setState({ title: ev.target.innerText });\r\n    }\r\n\r\n    saveColumnName = (columnId, title) => {\r\n        const columnTitle = this.props.board.columns[columnId].title;\r\n        if (columnTitle === title) return;\r\n\r\n        const updatedBoard = { ...this.props.board };\r\n        updatedBoard.columns[columnId].title = title;\r\n\r\n        const msg = `${this.props.user} changed the name of '${columnTitle}' to '${title}'`;\r\n        const notificationType = 'success';\r\n\r\n        this.props.updateBoard(updatedBoard, msg, notificationType);\r\n    }\r\n\r\n    addCardText(column) {\r\n        return (column.taskIds.length === 0) ? 'Add a card' : 'Add another card';\r\n    }\r\n\r\n    render() {\r\n        const { currColumnId, showTopMenuOptions, showAddForm } = this.props;\r\n        return (\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\r\n                    {provided => (\r\n                        <div\r\n                            className=\"board-columns flex\"\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            {this.props.board.columnOrder.map((columnKey, idx) => {\r\n\r\n                                const column = this.props.board.columns[columnKey];\r\n                                const tasks = column.taskIds.map(currId => this.props.board.tasks[currId]);\r\n\r\n                                return <Draggable draggableId={columnKey} key={column.id} index={idx}>\r\n\r\n                                    {(provided, snapshot) => (\r\n                                        <NaturalDragAnimation\r\n                                            style={provided.draggableProps.style}\r\n                                            snapshot={snapshot}\r\n                                            rotationMultiplier={1.3}\r\n                                        >\r\n                                            {style => (\r\n\r\n                                                <div\r\n                                                    className=\"board-columns-item\"\r\n                                                    {...provided.draggableProps}\r\n                                                    ref={provided.innerRef}\r\n                                                    style={style}\r\n                                                >\r\n                                                    <div\r\n                                                        className=\"board-columns-item-header flex align-center space-between\"\r\n                                                        {...provided.dragHandleProps}\r\n                                                    >\r\n                                                        <div className=\"board-columns-item-header-h2-wrapper\">\r\n                                                            <h2\r\n                                                                contentEditable='true'\r\n                                                                spellCheck=\"false\"\r\n                                                                onFocus={() => this.setColumnName(column.id)}\r\n                                                                onInput={(ev) => this.emitChange(ev)}\r\n                                                                onBlur={() => this.saveColumnName(column.id, this.state.title)}\r\n                                                                suppressContentEditableWarning={true}\r\n                                                            >\r\n                                                                {column.title}\r\n                                                            </h2>\r\n                                                        </div>\r\n\r\n\r\n\r\n                                                        <div className=\"board-columns-item-header-menu-btn-icon\"\r\n                                                            onClick={(ev) => { ev.stopPropagation(); this.props.openEditColumn(column.id) }}> ... </div>\r\n                                                    </div>\r\n\r\n\r\n\r\n                                                    {showTopMenuOptions && (currColumnId === column.id) ?\r\n                                                        <TopMenuOptions\r\n                                                            onDelete={this.onDelete}\r\n                                                            column={column}\r\n                                                            board={this.props.board}\r\n                                                            updateBoard={this.props.updateBoard}\r\n                                                            toggleTopMenuOptions={this.props.closeEditColumn}\r\n                                                            user={this.props.user}\r\n                                                        />\r\n                                                        : ''}\r\n                                                    <Droppable droppableId={column.id} type=\"task\">\r\n                                                        {(provided, snapshot) => {\r\n                                                            return <TasksList\r\n                                                                board={this.props.board}\r\n                                                                innerRef={provided.innerRef}\r\n                                                                provided={provided}\r\n                                                                tasks={tasks}\r\n                                                                isDraggingOver={snapshot.isDraggingOver}\r\n                                                                column={column}\r\n                                                                toggleTaskDetails={this.props.toggleTaskDetails}\r\n                                                                updateBoard={this.props.updateBoard}\r\n                                                                toggleMiniDetails={this.props.toggleMiniDetails}\r\n                                                                user={this.props.user}\r\n                                                            >\r\n                                                            </TasksList>\r\n                                                        }}\r\n                                                    </Droppable>\r\n\r\n                                                    {/* <div className=\"task-list-footer\"> */}\r\n                                                    {(!showAddForm || currColumnId !== column.id) &&\r\n                                                        <div className=\"task-list-footer flex align-center\">\r\n                                                            {/* <AddIcon/> */}\r\n                                                            <div className=\"task-list-footer-add-task fill-width\"\r\n                                                                onClick={(ev) => { ev.stopPropagation(); this.props.openAddForm(column.id) }}>\r\n                                                                <span className=\"add-icon\">+</span>{this.addCardText(column)}</div>\r\n                                                        </div>\r\n                                                    }\r\n                                                    {/* </div> */}\r\n                                                    {showAddForm && (currColumnId === column.id) ?\r\n                                                        <TaskForm\r\n                                                            user={this.props.user}\r\n                                                            board={this.props.board}\r\n                                                            column={column}\r\n                                                            closeUpdateForm={this.props.closeAddForm}\r\n                                                            updateBoard={this.props.updateBoard}\r\n                                                        />\r\n                                                        : ''\r\n                                                    }\r\n                                                </div>\r\n                                            )}\r\n                                        </NaturalDragAnimation>\r\n                                    )}\r\n                                </Draggable>\r\n                            })}\r\n                            {provided.placeholder}\r\n                        </div >)}\r\n                </Droppable>\r\n            </DragDropContext>\r\n\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nexport default class BoardHistory extends Component {\r\n    render() {\r\n        return (\r\n            <div className={\"boardhistory-container column\"\r\n                + (this.props.showHistory ? ' translateLeft' : '')}>\r\n                <div className=\"flex column\">\r\n                    <div className=\"uppercase text-center\">\r\n                        <h2>board history :</h2>\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n                <ul className=\"clean-list\">\r\n                    {this.props.history.map(item => (\r\n                        <li key={item.id}><div className=\"msg\">{item.msg}<br />{moment(item.time).calendar()}</div><hr /></li>\r\n\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport utils from '../services/utils'\r\n\r\nexport default class BoardTeamMembers extends Component {\r\n    state = {\r\n        currentBoardMembers: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({ currentBoardMembers: this.props.board.teamMembers });\r\n    }\r\n\r\n    updateTeamMembers = (user) => {\r\n        const board = this.props.board;\r\n        const teamMembers = board.teamMembers;\r\n        let msg = '';\r\n        let notificationType = '';\r\n        if (teamMembers.find(teamMember => teamMember._id === user._id)) {\r\n            const idx = teamMembers.findIndex(teamMember => teamMember._id === user._id);\r\n            teamMembers.splice(idx, 1);\r\n            msg = `${user.username} was removed from this board`;\r\n            notificationType = 'danger';\r\n        } else {\r\n            teamMembers.push(user);\r\n            msg = `${user.username} was added to this board`;\r\n            notificationType = 'success';\r\n        }\r\n        this.setState({ currentBoardMembers: teamMembers });\r\n        this.props.updateBoard(board, msg, notificationType);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        const currentBoardMembers = this.state.currentBoardMembers;\r\n        const users = this.props.users.filter(user => !currentBoardMembers.find(boardMember => user._id === boardMember._id));\r\n        return (\r\n            <div className={\"board-team-members-container text-center column\"\r\n                + (this.props.toggleBoardTeamMembers ? ' translateLeft' : '')} onClick={(ev) => this.onStopPropagation(ev)}>\r\n\r\n                <div className=\"members-container-colors-container flex column\">\r\n                    <div className=\"pointer uppercase\"><h2>board members :</h2></div>\r\n                    <hr />\r\n                    {this.state.currentBoardMembers.map(teamMember => {\r\n                        return (\r\n                            <div key={teamMember._id} className=\"team-member flex align-center\"\r\n                                onClick={() => this.updateTeamMembers(teamMember)}>\r\n                                <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"capitalize\" style={{ color: '#172b4d' }}>\r\n                                            {utils.createUserIcon(teamMember.firstName, teamMember.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"capitalize\">{teamMember.firstName} {teamMember.lastName}</span>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n                <div className=\"add-team-members flex column\">\r\n                    <p className=\"pointer uppercase\">add / remove users</p>\r\n                    {users.map(user => {\r\n                        return (\r\n                            <div key={user._id} className=\"team-member flex align-center\"\r\n                                onClick={() => this.updateTeamMembers(user)}>\r\n                                <div className=\"team-member-icon-wrapper flex align-center justify-center\"\r\n                                    style={{ backgroundColor: '#dfe1e6' }}>\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"capitalize\" style={{ color: '#172b4d' }}>\r\n                                            {utils.createUserIcon(user.firstName, user.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"capitalize\">{user.firstName} {user.lastName}</span>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class ColumnAddForm extends Component {\r\n\r\n    state = {\r\n        column: {\r\n            id: utils.getRandomId(),\r\n            title: '',\r\n            taskIds: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nameInput.focus();\r\n        this.setFormDataForEdit();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.column !== this.props.column) {\r\n            this.setFormDataForEdit();\r\n        }\r\n    }\r\n\r\n    setFormDataForEdit() {\r\n        if (this.props.column) {\r\n            const column = this.props.column;\r\n            this.setState({\r\n                column: {\r\n                    id: column.id,\r\n                    title: column.title,\r\n                    taskIds: column.taskIds\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let value = ev.target.value;\r\n        this.setState({ column: { ...this.state.column, [fieldName]: value } })\r\n    }\r\n\r\n    saveColumn = (ev) => {\r\n        ev.preventDefault();\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            columns: {\r\n                ...this.props.board.columns,\r\n                [this.state.column.id]: this.state.column\r\n            }\r\n        };\r\n        const id = this.state.column.id;\r\n        const columnOrder = newBoard.columnOrder;\r\n        if (!columnOrder.includes(id)) columnOrder.push(id);\r\n        const msg = `'${this.state.column.title}' was added by ` + this.props.user;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.toggleAddForm();\r\n    }\r\n\r\n    render() {\r\n        return <form className=\"add-column-form-container flex column space-between\" onSubmit={this.saveColumn}>\r\n            <input\r\n                ref={(input) => { this.nameInput = input; }}\r\n                type='text'\r\n                placeholder='Enter list title...'\r\n                name='title'\r\n                onChange={this.inputChange}\r\n                value={this.state.column.title} />\r\n            <div className=\"save-btn-container flex\">\r\n                <button className=\"add-column-save-btn capitalize\"\r\n                    variant=\"contained\">add list</button>\r\n\r\n                <CloseIcon className=\"add-column-back-to-board flex align-center\"\r\n                    onClick={this.props.toggleAddForm} />\r\n\r\n            </div>\r\n        </form>\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Filter extends Component {\r\n\r\n    state = {\r\n        filterBy: {\r\n            title: '',\r\n            teamMembers: ''\r\n        }\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let value = ev.target.value;\r\n        this.setState(({ filterBy: { [fieldName]: value } }), () => this.props.onFilter(this.state.filterBy));\r\n    }\r\n\r\n    render() {\r\n        const teamMembers = this.props.teamMembers;\r\n        return <div className=\"board-page-nav-bar-filters-item flex\">\r\n\r\n            <input type=\"text\" placeholder=\"Search card by name\"\r\n                value={this.state.filterBy.title}\r\n                onChange={this.inputChange} name=\"title\">\r\n            </input>\r\n\r\n            <div style={{ background: (this.props.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n            <select name=\"teamMembers\" style={{\r\n                color: (this.props.isDarkBackground) ? 'white' : 'black',\r\n                background: (this.props.isDarkBackground) ? '#0000006b' : '#ffffff8e'\r\n            }} onChange={this.inputChange}>\r\n                <option value=''>All Team Members</option>\r\n                {teamMembers.map(teamMember => (\r\n                    <option className=\"capitalize\" key={teamMember._id} value={`${teamMember.username}`}>{teamMember.firstName} {teamMember.lastName}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Sort extends Component {\r\n\r\n    state = {\r\n        sortBy: '',\r\n        sortOrder: 'asc'\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let value = ev.target.value;\r\n        this.setState(prevState => ({ filterBy: { ...prevState.filterBy, [fieldName]: value } }));\r\n    }\r\n\r\n    onSortBy = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let sortOrder = (this.state.sortOrder === 'asc') ? 'desc' : 'asc';\r\n        this.setState({ sortBy: fieldName, sortOrder: sortOrder }, () => this.props.onSort(this.state.sortBy, this.state.sortOrder));\r\n    }\r\n\r\n    toggleButtonName = () => {\r\n        return (this.state.sortOrder === 'asc') ? 'Newest Cards' : 'Oldest Cards';\r\n    }\r\n\r\n    render() {\r\n        return <div  className=\"board-page-nav-bar-filters-item fill-height\">\r\n            <button className={`nav-btn fill-height\r\n            ${(this.props.isDarkBackground) ? 'dark' : 'light'}`}\r\n                onClick={this.onSortBy}\r\n                name='createdAt'>{this.toggleButtonName()}</button>\r\n\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport utils from '../services/utils';\r\n\r\nimport office from '../unsplashdefaultdata/officequery';\r\n\r\nexport default class SplashMenu extends Component {\r\n\r\n    state = {\r\n        splashImagesUrls: office,\r\n        filterByName: ''\r\n    }\r\n\r\n    inputChange = ev => {\r\n        this.setState({ filterByName: ev.target.value });\r\n    }\r\n\r\n    onSave = async () => {\r\n        try {\r\n            const splashImages = await utils.getImagesFromUnsplash(this.state.filterByName)\r\n            let splashImagesUrls = [];\r\n            splashImages.forEach(image => {\r\n                const UrlIndx = splashImagesUrls.findIndex(currUrl => currUrl === image.urls);\r\n                if (UrlIndx >= 0) {\r\n                    splashImagesUrls.splice(UrlIndx, 1)\r\n                } else {\r\n                    splashImagesUrls.push(image.urls);\r\n                }\r\n            })\r\n            this.setState({ splashImagesUrls });\r\n        } catch (err) {\r\n            // res.status(401).send({ error: err });\r\n        }\r\n    }\r\n\r\n    setBoardBackground = (imageUrl) => {\r\n        const newBoard = { ...this.props.board }\r\n        newBoard.boardBgImage = imageUrl.full;\r\n        newBoard.boardBgThumbnail = imageUrl.small;\r\n        const msg = `${this.props.user} changed background image`;\r\n        const notificationType = 'success';\r\n        // this.props.isDarkBackground(newBoard.boardBgImage);\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    stopPropagation = (ev) => {\r\n        ev.stopPropagation()\r\n    }\r\n\r\n    render() {\r\n        return <div className={\"splash-menu flex column align-center\" + (this.props.toggleSplashMenu ? ' translateLeft' : '')}\r\n            onClick={(ev) => this.stopPropagation(ev)}>\r\n            <div className=\"flex column fill-width filter-container\">\r\n                <div className=\"splash-menu-search-bar fill-width flex justify-center\">\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Search by name...'\r\n                        onChange={this.inputChange}\r\n                    />\r\n                    <button className=\"splash-menu-search-bar-save-btn\" onClick={this.onSave}>\r\n                        <SearchIcon />\r\n                    </button>\r\n                </div>\r\n                <button className=\"splash-menu-search-bar-save-btn upload-btn capitalize\">\r\n                    <input style={{ display: \"none\" }} type=\"file\" id=\"upload-img\" onChange={this.props.onAddImg}></input>\r\n                    <label htmlFor=\"upload-img\">upload image</label>\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"splash-images-container-wrapper\">\r\n                <div className=\"splash-images-container flex wrap fill-width\" >\r\n                    {this.state.splashImagesUrls.map(imageUrl => {\r\n                        return <div key={imageUrl.small} className=\"splash-images-container-item flex wrap\">\r\n                            <img src={imageUrl.small} alt=\"oops.. didn't found it\" onClick={() => this.setBoardBackground(imageUrl)}></img>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DatePicker from 'react-datepicker';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default class DueDate extends React.Component {\r\n    state = {\r\n        dueDate: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDate();\r\n    }\r\n\r\n    setDate = _ => {\r\n        this.setState({ dueDate: this.props.task.dueDate ? new Date(this.props.task.dueDate) : new Date() })\r\n    }\r\n\r\n    // componentWillUnmount() {\r\n    //     this.saveTask();\r\n    // }\r\n\r\n    handleChange = date => {\r\n        this.setState({ dueDate: date });\r\n        this.saveTask();\r\n    }\r\n\r\n    saveTask = _ => {\r\n        const newTask = { ...this.props.task, dueDate: this.state.dueDate.getTime() };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} changed the due date for task '${this.props.task.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"duedate-edit flex column\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}>\r\n                <div className=\"close-btn-container\">\r\n                    <CloseIcon className=\"duedate-edit-close-btn\" onClick={this.props.onToggle} />\r\n                </div>\r\n\r\n                <div className=\"flex column align-center justify-center datepicker-container\">\r\n                    <DatePicker\r\n                        selected={this.state.dueDate}\r\n                        onChange={this.handleChange}\r\n                        showTimeSelect\r\n                        timeFormat=\"HH:mm\"\r\n                        timeIntervals={15}\r\n                        timeCaption=\"Time\"\r\n                        dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                    />\r\n                    <button className=\"add-duedate-btn capitalize\" onClick={this.saveTask}>add</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default class Labels extends Component {\r\n    state = {\r\n        choosenLabels: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setNewState();\r\n    }\r\n\r\n    setNewState = () => {\r\n        this.setState({ choosenLabels: this.props.task.labels })\r\n    }\r\n\r\n    updateChoosenLabels = (ev) => {\r\n        const label = ev.target.classList[0];\r\n        const choosenLabels = this.state.choosenLabels;\r\n        const labelIdx = choosenLabels.findIndex(currLabel => currLabel === label);\r\n        let msg = '';\r\n        let notificationType = '';\r\n        if (labelIdx >= 0) {\r\n            choosenLabels.splice(labelIdx, 1)\r\n            msg = `A label was removed from the task '${this.props.task.title}'`;\r\n            notificationType = 'danger';\r\n        } else {\r\n            choosenLabels.push(label);\r\n            msg = `A label was added to the task '${this.props.task.title}'`;\r\n            notificationType = 'success';\r\n        }\r\n        this.setState({ choosenLabels },() => this.onSave(msg, notificationType));\r\n    }\r\n\r\n    onSave = (msg, notificationType) => {\r\n        const newTask = { ...this.props.task, labels: this.state.choosenLabels };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        let updateStyle = null;\r\n        if (this.props.miniTask) {\r\n            updateStyle = {\r\n                left: 12 + 'px',\r\n                top: 36 + 'px',\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <div className=\"labels-container text-center\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}\r\n                style={{ ...updateStyle }}\r\n            >\r\n                <CloseIcon className=\"labels-container-close-btn\" onClick={this.props.toggleChooseLabels} />\r\n                <p className=\"uppercase\">choose labels</p>\r\n                <hr />\r\n                <div className=\"labels-container-colors-container flex column align-center \">\r\n                    <div className=\"label-color-1 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-2 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-3 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-4 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-5 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-6 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class Members extends Component {\r\n    state = {\r\n        choosenMembers: [],\r\n        availableMembers: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setNewState();\r\n    }\r\n\r\n    setNewState = () => {\r\n        this.setState({ choosenMembers: this.props.task.taskTeamMembers }, this.setAvailableMembers);\r\n    }\r\n\r\n    updateChoosenMembers = (teamMember) => {\r\n        const choosenMembers = this.state.choosenMembers;\r\n        const memberIdx = choosenMembers.findIndex(currMember => currMember._id === teamMember._id);\r\n        let msg = '';\r\n        let notificationType = '';\r\n        if (memberIdx >= 0) {\r\n            choosenMembers.splice(memberIdx, 1);\r\n            msg = `${teamMember.username} was released from the task '${this.props.task.title}'`;\r\n            notificationType = 'danger';\r\n        } else {\r\n            choosenMembers.push(teamMember);\r\n            msg = `${teamMember.username} was asigned to the task '${this.props.task.title}'`;\r\n            notificationType = 'success';\r\n        }\r\n        this.setState({ choosenMembers }, this.setAvailableMembers(msg, notificationType));\r\n    }\r\n\r\n    setAvailableMembers = (msg, notificationType) => {\r\n        const availableMembers = this.props.board.teamMembers.filter(currMember => !this.state.choosenMembers.find(taskMember => taskMember._id === currMember._id));\r\n        this.setState({ availableMembers }, this.onSave(msg, notificationType));\r\n    }\r\n\r\n    onSave = (msg, notificationType) => {\r\n        const newTask = { ...this.props.task, taskTeamMembers: this.state.choosenMembers };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        let updateStyle = null;\r\n        if (this.props.pos) {\r\n            updateStyle = {\r\n                left: 10 + 'px',\r\n                top: 72 + 'px',\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"members-container text-center column\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}\r\n                style={{ ...updateStyle }}>\r\n                <CloseIcon className=\"members-container-close-btn\" onClick={this.props.toggleChooseMembers} />\r\n                <p className=\"uppercase\">assigned members</p>\r\n                <hr />\r\n\r\n                <div className=\"members-container-asign-members-wrapper flex\">\r\n                    <div className=\"members-container-asign-members flex column fill-width\">\r\n\r\n                        {this.props.task.taskTeamMembers.map(member => {\r\n                            return <div key={member._id} className=\"team-member flex\"\r\n                                onClick={() => this.updateChoosenMembers(member)}>\r\n                                <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p>\r\n                                            {utils.createUserIcon(member.firstName,\r\n                                                member.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <p>{member.firstName} {member.lastName}</p>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"add-team-members-wrapper flex column\">\r\n                    <p className=\"uppercase\"> add a team member </p>\r\n                    <div className=\"add-team-members flex column\">\r\n                        {this.state.availableMembers.map(teamMember => {\r\n                            return (\r\n                                <div key={teamMember._id}\r\n                                    className=\"team-member flex align-center\"\r\n                                    onClick={() => this.updateChoosenMembers(teamMember)}>\r\n                                    <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                                        <div className=\"team-member-icon\">\r\n                                            <p>\r\n                                                {utils.createUserIcon(teamMember.firstName,\r\n                                                    teamMember.lastName)}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <p>{teamMember.firstName} {teamMember.lastName}</p>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div >\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport utils from '../services/utils'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default class Todo extends Component {\r\n    state = {\r\n        todos: [],\r\n        text: '',\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setNewState();\r\n    }\r\n\r\n    setNewState = () => {\r\n        this.setState({ todos: this.props.task.todos })\r\n    }\r\n\r\n    updateTodo = (ev) => {\r\n        this.setState({ text: ev.target.value })\r\n    }\r\n\r\n\r\n    onSaveTodo = async () => {\r\n        const todo = {\r\n            text: this.state.text,\r\n            isDone: false,\r\n            id: utils.getRandomId()\r\n        }\r\n\r\n        const todos = this.state.todos;\r\n        todos.push(todo);\r\n        this.setState({ todos });\r\n        const newTask = { ...this.props.task, todos: this.state.todos };\r\n        const newBoard = { ...this.props.board, tasks: { ...this.props.board.tasks, [newTask.id]: newTask } }\r\n        const taskTitle = this.props.task.title;\r\n        const msg = `${this.props.user} added a new todo to the task '${taskTitle}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        // this.props.updateProgressBar();\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"check-list-item-container text-center\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}\r\n            >\r\n                <div className=\"checklist-closebtn-container\">\r\n                    <CloseIcon className=\"check-list-item-container-close-btn pointer\" onClick={this.props.toggleTodos} />\r\n                </div>\r\n\r\n                <div className=\"input-container flex column justify-center align-center\">\r\n                    <input className=\"text-center\" type=\"text\" placeholder=\"add new todo\"\r\n                        value={this.state.text}\r\n                        onChange={this.updateTodo} name=\"text\">\r\n                    </input>\r\n                    <button className=\"save-todo-btn capitalize\" onClick={this.onSaveTodo}>add</button>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\n//icons :\r\n\r\nimport NotesIcon from '@material-ui/icons/Notes';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';\r\nimport LabelOutlinedIcon from '@material-ui/icons/LabelOutlined';\r\nimport AssignmentTurnedInOutlinedIcon from '@material-ui/icons/AssignmentTurnedInOutlined';\r\nimport EventOutlinedIcon from '@material-ui/icons/EventOutlined';\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined';\r\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\r\nimport DueDate from './DueDate';\r\nimport Labels from './Labels';\r\nimport Members from './Members';\r\nimport Todos from './Todos';\r\n\r\nimport utils from '../services/utils'\r\n\r\nexport default class TaskDetails extends Component {\r\n    state = {\r\n        deuDate: null,\r\n        description: '',\r\n        teamMembers: [],\r\n        choosenMembers: [],\r\n        choosenlabels: [],\r\n        showActivity: false,\r\n        showEditDescriptionForm: false,\r\n        toggleChooseLabels: false,\r\n        toggleChooseMembers: false,\r\n        toggleTodos: false,\r\n        onToggleDueDate: false,\r\n        toggleDeleteTodo: false,\r\n        progressWidth: 0,\r\n        currTodoId: '',\r\n        taskTitle: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        let currTask = this.props.board.tasks[this.props.taskId]\r\n        this.setState({ description: currTask.description }, this.updateProgressBar);\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ description: targetValue });\r\n    }\r\n\r\n    toggleUpdateDescriptionForm = () => {\r\n        this.setState(prevState => ({ showEditDescriptionForm: !prevState.showEditDescriptionForm }))\r\n    }\r\n\r\n    onToggleDueDate = ev => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ onToggleDueDate: !prevState.onToggleDueDate }));\r\n    }\r\n\r\n\r\n    closeUpdateDescriptionForm = () => {\r\n        this.setState({ toggleUpdateDescriptionForm: false })\r\n    }\r\n\r\n    onStopPropagationAndCloseOptions = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState({\r\n            toggleChooseLabels: false,\r\n            toggleChooseMembers: false\r\n        })\r\n    }\r\n\r\n    toggleChooseLabels = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ toggleChooseLabels: !prevState.toggleChooseLabels }))\r\n    }\r\n\r\n    onSaveDescription = (task) => {\r\n        const newTask = { ...task, description: this.state.description };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `The description of '${task.title}' was changed by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    toggleChooseMembers = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ toggleChooseMembers: !prevState.toggleChooseMembers }))\r\n    }\r\n\r\n    toggleTodos = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ toggleTodos: !prevState.toggleTodos }))\r\n    }\r\n\r\n    onDuplicateTask = (column, task) => {\r\n        const newTask = { ...task, id: utils.getRandomId() };\r\n        column.taskIds.push(newTask.id);\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `The task '${task.title}' was duplicated by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.toggleTaskDetails();\r\n    }\r\n\r\n    onDeleteTask = (column, task) => {\r\n        const board = { ...this.props.board };\r\n        const taskIds = column.taskIds;\r\n        const idx = taskIds.findIndex(taskId => taskId === task.id);\r\n        taskIds.splice(idx, 1);\r\n        delete board.tasks[task.id];\r\n        const msg = `'${task.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger';\r\n        this.props.updateBoard(board, msg, notificationType);\r\n        this.props.toggleTaskDetails();\r\n    }\r\n\r\n    toggleTodoDone = async (todo) => {\r\n        todo.isDone = !todo.isDone;\r\n        let newTask = { ...this.props.board.tasks[this.props.taskId] };\r\n        const todos = newTask.todos;\r\n        const idx = todos.findIndex(currTodo => (currTodo.id === todo.id));\r\n        todos[idx].isDone = todo.isDone;\r\n        let msg = '';\r\n        let notificationType = '';\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        if (todo.isDone) {\r\n            msg = `The subtask '${todo.text}' in '${newTask.title}' was completed by ${this.props.user}`;\r\n            notificationType = 'success';\r\n        } else {\r\n            msg = `The subtask '${todo.text}' in '${newTask.title}' was remarked as uncompleted by ${this.props.user}`;\r\n            notificationType = 'danger';\r\n        }\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.updateProgressBar()\r\n    }\r\n\r\n    updateProgressBar = () => {\r\n        let start = this.state.progressWidth;\r\n        let task = this.props.board.tasks[this.props.taskId];\r\n        let doneTodosCounter = task.todos.filter(todo => (todo.isDone)).length;\r\n        task.todosDone = doneTodosCounter;\r\n\r\n        let interval;\r\n        let progressWidth = Math.round((doneTodosCounter / task.todos.length) * 100);\r\n        if (!progressWidth && !start) return;\r\n        if (start < progressWidth) {\r\n            interval = setInterval(() => {\r\n                if (start >= progressWidth) {\r\n                    clearInterval(interval);\r\n                } else {\r\n                    start++;\r\n                    this.setState({ progressWidth: start })\r\n                }\r\n            }, 10);\r\n        } else {\r\n            interval = setInterval(() => {\r\n                if (start <= progressWidth) {\r\n                    clearInterval(interval);\r\n                } else {\r\n                    start--;\r\n                    this.setState({ progressWidth: start })\r\n                }\r\n            }, 10);\r\n        }\r\n    }\r\n\r\n    deleteTodo = (todoId) => {\r\n        const task = this.props.board.tasks[this.props.taskId];\r\n        let todos = task.todos;\r\n        const idx = todos.findIndex(currTodo => (currTodo.id === todoId));\r\n        const deletedTodo = todos[idx];\r\n        todos.splice(idx, 1);\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [task.id]: task\r\n            }\r\n        }\r\n        const msg = `The subtask '${deletedTodo.text}' in '${task.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.updateProgressBar();\r\n        this.hideDeleteTodoButton(todoId);\r\n    }\r\n\r\n    showDeleteTodoButton = (todoId) => {\r\n        this.setState({ toggleDeleteTodo: true, currTodoId: todoId });\r\n    }\r\n\r\n    hideDeleteTodoButton = (todoId) => {\r\n        this.setState({ toggleDeleteTodo: false, currTodoId: todoId });\r\n    }\r\n\r\n    setTaskName = (taskId) => {\r\n        const taskTitle = this.props.board.tasks[taskId].title;\r\n        this.setState({ taskTitle: taskTitle });\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        this.setState({ taskTitle: ev.target.innerText });\r\n    }\r\n\r\n    saveTaskName = (taskId, title) => {\r\n        const taskTitle = this.props.board.tasks[taskId].title;\r\n        if (taskTitle === title) return;\r\n\r\n        const updatedBoard = { ...this.props.board };\r\n        updatedBoard.tasks[taskId].title = title;\r\n\r\n        const msg = `${this.props.user} changed the title of the task '${taskTitle}' to '${title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(updatedBoard, msg, notificationType);\r\n    }\r\n\r\n    render() {\r\n        const task = this.props.board.tasks[this.props.taskId];\r\n        const { column } = this.props;\r\n        return (\r\n            <div className=\"screen flex align-center justify-center\" onClick={() => this.props.toggleTaskDetails()}>\r\n                <div className=\"task-details-container-wrapper flex\" onClick={(ev) => this.onStopPropagationAndCloseOptions(ev)}>\r\n                    <div className=\"task-details-container flex\">\r\n                        <CloseIcon className=\"add-column-back-to-board   flex align-center\"\r\n                            onClick={() => this.props.toggleTaskDetails()} />\r\n                        <div className=\"task-details-container-main full\">\r\n                            <header className=\"task-details-container-header\">\r\n                                <DescriptionOutlinedIcon style={{\r\n                                    color: '#42526e', position: 'absolute',\r\n                                    top: '10px',\r\n                                    left: '12px'\r\n                                }} />\r\n                                <h2\r\n                                    contentEditable='true'\r\n                                    spellCheck=\"false\"\r\n                                    onFocus={() => this.setTaskName(task.id)}\r\n                                    onInput={(ev) => this.emitChange(ev)}\r\n                                    onBlur={() => this.saveTaskName(task.id, this.state.taskTitle)}\r\n                                    suppressContentEditableWarning={true}\r\n                                >{task.title}</h2>\r\n                                <div className=\"task-details-container-in-list flex\">\r\n                                    <p>in list <span>{column.title}</span></p>\r\n                                </div>\r\n                            </header>\r\n\r\n                            <div className=\"chosen-labels-container\">\r\n                                {this.state.toggleChooseLabels ?\r\n                                    <Labels\r\n                                        toggleChooseLabels={this.toggleChooseLabels}\r\n                                        board={this.props.board}\r\n                                        task={task}\r\n                                        updateBoard={this.props.updateBoard}\r\n                                    /> : ''\r\n                                }\r\n                                {task.labels.length !== 0 && <h3 className=\"uppercase\" style={{\r\n                                    fontSize: '.75rem',\r\n                                    fontWeight: 500,\r\n                                    letterSpacing: '.04em',\r\n                                }}>Labels</h3>}\r\n                                <div className=\"labels-choosen-container flex\">\r\n                                    {\r\n                                        task.labels.map(label => {\r\n                                            return <div key={label} className={label + ' medium-label'}>\r\n                                            </div>\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"task-details-container-members-container\">\r\n                                {this.state.toggleChooseMembers ?\r\n                                    <Members\r\n                                        toggleChooseMembers={this.toggleChooseMembers}\r\n                                        board={this.props.board}\r\n                                        task={task}\r\n                                        updateBoard={this.props.updateBoard}\r\n                                        users={this.props.users}\r\n                                    /> : ''\r\n                                }\r\n                                {task.taskTeamMembers.length !== 0 && <h3 className=\"uppercase\" style={{\r\n                                    fontSize: '.75rem',\r\n                                    fontWeight: 500,\r\n                                    letterSpacing: '.04em'\r\n                                }}>members</h3>}\r\n                                <div className=\"flex\">\r\n                                    {\r\n                                        task.taskTeamMembers.map(member => {\r\n                                            return <Avatar key={member._id} style={{\r\n                                                backgroundColor: '#dfe1e6',\r\n                                                height: 28,\r\n                                                width: 28,\r\n                                                fontSize: '0.85rem',\r\n                                                margin: '4px 4px 4px 0',\r\n                                                color: '#172b4d',\r\n                                                fontWeight: 600,\r\n                                                textAlign: 'center'\r\n                                            }}>\r\n                                                {utils.createUserIcon(member.firstName,\r\n                                                    member.lastName)}\r\n                                            </Avatar>\r\n\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"task-details-container-check-list-container\">\r\n                                {this.state.toggleTodos ?\r\n                                    <Todos\r\n                                        toggleTodos={this.toggleTodos}\r\n                                        board={this.props.board}\r\n                                        user={this.props.user}\r\n                                        task={task}\r\n                                        updateBoard={this.props.updateBoard}\r\n                                        updateProgressBar={this.updateProgressBar}\r\n                                    /> : ''\r\n                                }\r\n                                <AssignmentTurnedInOutlinedIcon\r\n                                    style={{\r\n                                        color: '#42526e',\r\n                                        position: 'relative',\r\n                                        top: '35px',\r\n                                        right: '44px',\r\n                                    }}\r\n                                />\r\n                                <h2>Checklist</h2>\r\n\r\n                                {task.todos ?\r\n                                    <div className=\"check-list-container flex column\">\r\n                                        {task.todos.map(todo => {\r\n                                            return <div key={todo.id} className=\"todo-item flex align-center space-between\" onMouseEnter={() => this.showDeleteTodoButton(todo.id)}\r\n                                                onMouseLeave={() => this.hideDeleteTodoButton(todo.id)}>\r\n                                                <div className=\"flex align-center\">\r\n                                                    <input type=\"checkbox\" onChange={() => this.toggleTodoDone(todo)} checked={todo.isDone ? 'checked' : ''}>\r\n                                                    </input>\r\n                                                    <p className={todo.isDone ? \"text-decoration\" : \"\"}>\r\n                                                        {todo.text}\r\n                                                    </p>\r\n                                                </div>\r\n                                                <DeleteOutlineIcon\r\n                                                    onClick={() => this.deleteTodo(todo.id)}\r\n                                                    className=\"pointer delete-btn\"\r\n                                                    style={{ display: this.state.toggleDeleteTodo && this.state.currTodoId === todo.id ? 'block' : 'none' }}\r\n                                                />\r\n                                            </div>\r\n                                        })\r\n                                        }\r\n                                        <div className=\"check-list-progress\">\r\n                                            <div className=\"progress fill-height flex align-center\" style={{ width: this.state.progressWidth + \"%\" }} >\r\n                                                <small className=\"fill-width text-center\">{this.state.progressWidth + \"%\"}</small>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div> : ''\r\n                                }\r\n                            </div>\r\n                            <div className=\"task-details-container-duedate-container\">\r\n                                <EventOutlinedIcon style={{\r\n                                    color: '#42526e', position: 'relative',\r\n                                    top: '35px',\r\n                                    right: '44px'\r\n                                }} />\r\n                                <h2>Due Date</h2>\r\n                                {(task.dueDate) ?\r\n                                    <p>{moment(task.dueDate).format(\"MMMM Do YYYY, hh:mm a\")}</p> :\r\n                                    <p>This task doesn't have a due date yet</p>\r\n                                }\r\n                                {this.state.onToggleDueDate ? <DueDate\r\n                                    task={task}\r\n                                    onToggle={this.onToggleDueDate}\r\n                                    board={this.props.board}\r\n                                    updateBoard={this.props.updateBoard}\r\n                                    updateProgressBar={this.updateProgressBar}\r\n\r\n                                    user={this.props.user}\r\n                                /> : ''}\r\n                            </div>\r\n\r\n                            <div className=\"task-details-container-description\">\r\n                                <NotesIcon style={{\r\n                                    color: '#42526e', position: 'relative',\r\n                                    top: '35px',\r\n                                    right: '44px'\r\n                                }} />\r\n                                <h2>Description</h2>\r\n                                <form onSubmit={this.save} onClick={this.toggleUpdateDescriptionForm}>\r\n                                    <textarea className=\"fill-width\"\r\n                                        name=\"description\"\r\n                                        rows=\"3\"\r\n                                        cols=\"40\"\r\n                                        onInput={this.emitChange}\r\n                                        defaultValue={task.description}\r\n                                        spellCheck=\"false\"\r\n                                        placeholder=\"Add a more detailed description...\">\r\n                                    </textarea>\r\n                                </form>\r\n                                {this.state.showEditDescriptionForm ?\r\n                                    <div className=\"flex align-center\">\r\n                                        <button className=\"task-form-save-btn uppercase\" onClick={() => this.onSaveDescription(task)}>save</button>\r\n                                        <CloseIcon className=\"task-form-back-btn\" onClick={this.closeUpdateDescriptionForm} />\r\n                                    </div> : ''\r\n                                }\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"task-details-container-overall-options\">\r\n                            <div className=\"task-details-container-add-to-card-options container\">\r\n                                <h3 className=\"uppercase\" style={{\r\n                                    fontSize: '0.75rem',\r\n                                    fontWeight: 500,\r\n                                    letterSpacing: '0.04em'\r\n                                }}>add to card</h3>\r\n                                <div className=\"task-details-container-add-to-card-options flex column\">\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\" onClick={ev => this.toggleChooseLabels(ev)}>\r\n                                        <LabelOutlinedIcon />\r\n                                        <p className=\"capitalize\" >labels</p>\r\n                                    </div>\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\" onClick={ev => this.toggleChooseMembers(ev)} >\r\n                                        <PersonAddOutlinedIcon />\r\n                                        <p className=\"capitalize\">members</p>\r\n                                    </div>\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\" onClick={ev => this.toggleTodos(ev)} >\r\n                                        <AssignmentTurnedInOutlinedIcon />\r\n                                        <p className=\"capitalize\">check list</p>\r\n                                    </div>\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\" onClick={ev => this.onToggleDueDate(ev)}>\r\n                                        <EventOutlinedIcon />\r\n                                        <p className=\"capitalize\">due date</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"task-details-container-actions-options container\">\r\n                                <h3 className=\"uppercase\" style={{\r\n                                    fontSize: '0.75rem',\r\n                                    fontWeight: 500,\r\n                                    letterSpacing: '0.04em'\r\n                                }}>actions</h3>\r\n                                <div className=\"task-details-container-actions-options-btn flex align-center\" onClick={() => this.onDuplicateTask(column, task)}>\r\n                                    <FileCopyOutlinedIcon />\r\n                                    <p className=\"capitalize\">duplicate</p>\r\n                                </div>\r\n                                <div className=\"task-details-container-actions-options-btn flex align-center\" onClick={() => this.onDeleteTask(column, task)}>\r\n                                    <DeleteOutlineOutlinedIcon />\r\n                                    <p className=\"capitalize\">delete</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class MiniDetailsButton extends Component {\r\n\r\n    render() {\r\n        const { text, onClick } = this.props;\r\n        return <div className=\"mini-details-editor-button\"\r\n            onClick={onClick}>\r\n            <p>{text}</p>\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsButton from './MiniDetailsButton';\r\nimport Labels from './Labels';\r\nimport DueDate from './DueDate';\r\nimport Members from './Members';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class MiniDetailsEditor extends Component {\r\n    state = {\r\n        onToggleLabels: false,\r\n        onToggleDueDate: false,\r\n        onToggleMembers: false\r\n    }\r\n\r\n    onToggleLabels = _ => {\r\n        this.setState(prevState => ({ onToggleLabels: !prevState.onToggleLabels }));\r\n    }\r\n\r\n    onToggleDueDate = _ => {\r\n        this.setState(prevState => ({ onToggleDueDate: !prevState.onToggleDueDate }));\r\n    }\r\n\r\n    onToggleMembers = _ => {\r\n        this.setState(prevState => ({ onToggleMembers: !prevState.onToggleMembers }));\r\n    }\r\n\r\n    onDuplicateTask = _ => {\r\n        const { task } = this.props.miniTask\r\n        const newTask = { ...task, id: utils.getRandomId() };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        newBoard.columns[this.props.miniTask.column.id].taskIds.push(newTask.id);\r\n        const msg = `The task '${task.title}' was duplicated by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    onDelete = _ => {\r\n        const { miniTask } = this.props;\r\n        const board = { ...this.props.board };\r\n        const column = this.props.miniTask.column;\r\n        const taskIds = column.taskIds;\r\n        const task = board.tasks[miniTask.task.id];\r\n        const idx = taskIds.findIndex(taskId => taskId === miniTask.task.id);\r\n        taskIds.splice(idx, 1);\r\n        delete board.tasks[miniTask.task.id];\r\n        const msg = `'${task.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger'; \r\n        this.props.updateBoard(board, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { miniTask } = this.props;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        let top = boundingClientRect.top;\r\n\r\n        if(top + 180 > window.innerHeight){\r\n            top = window.innerHeight - 180;\r\n        }\r\n\r\n        return <div\r\n            className=\"mini-details-editor\"\r\n            style={{\r\n                left: (boundingClientRect.left + 265) + 'px',\r\n                top: (top + 1) + 'px'\r\n            }}\r\n        >\r\n            <MiniDetailsButton text=\"🖊️ Edit Labels\" onClick={this.onToggleLabels} />\r\n            {this.state.onToggleLabels ? <Labels\r\n                miniTask={miniTask}\r\n                task={miniTask.task}\r\n                toggleChooseLabels={this.onToggleLabels}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard} /> : ''}\r\n            <MiniDetailsButton text=\"🎭 Change Members\" onClick={this.onToggleMembers} />\r\n            {this.state.onToggleMembers ? <Members\r\n                pos={true}\r\n                task={miniTask.task}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                toggleChooseMembers={this.onToggleMembers}\r\n            /> : ''}\r\n            <MiniDetailsButton text=\"📅 Change Due Date\" onClick={this.onToggleDueDate} />\r\n            {this.state.onToggleDueDate ? <DueDate\r\n                task={miniTask.task}\r\n                onToggle={this.onToggleDueDate}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n            /> : ''}\r\n            <MiniDetailsButton text=\"⎘ Duplicate Task\" onClick={this.onDuplicateTask} />\r\n            <MiniDetailsButton text=\"🗑️ Delete Task\" onClick={this.onDelete} />\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport default function ScreenFilter(props) {\r\n    return (\r\n        <div className=\"screen-filter\" onClick={_ => props.onToggle()}></div>\r\n    )\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsEditor from '../MiniDetailsEditor';\r\nimport ScreenFilter from '../ScreenFilter';\r\n\r\nexport default class MiniTextDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textArea = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        title: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textArea.current.focus();\r\n    }\r\n\r\n    handleFocus = ev => {\r\n        ev.target.select();\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ title: targetValue });\r\n    }\r\n\r\n    onSave = _ => {\r\n        const newTask = { ...this.props.miniTask.task, title: this.state.title ? this.state.title : this.props.miniTask.task.title };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} changed the title of the task '${this.props.miniTask.task.title}' to '${this.state.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.miniTask;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        const labelLen = task.labels.length;\r\n        let height = boundingClientRect.height;\r\n        let top = boundingClientRect.top;\r\n\r\n        if (height + top > window.innerHeight) {\r\n            height = (window.innerHeight - top - 50) > 248 ? window.innerHeight - top - 50 : 248;\r\n        }\r\n        if (boundingClientRect.top > (window.innerHeight - (window.innerHeight / 4))) {\r\n            top = window.innerHeight - height - 50;\r\n        }\r\n        \r\n        return <div className=\"mini-details-container\">\r\n            <div\r\n                className=\"mini-details\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: top + 'px',\r\n                    height: height + 'px'\r\n                }}\r\n            >\r\n                <div className=\"task-container-labels flex\">\r\n                    {task.labels.map(label => {\r\n                        return <div key={label} className={label + ' small-label'}>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <textarea\r\n                    name=\"title\"\r\n                    className={\"text-area\" + (labelLen > 0 ? ' preview-label' : '')}\r\n                    defaultValue={task.title}\r\n                    ref={this.textArea}\r\n                    onFocus={this.handleFocus}\r\n                    onInput={this.emitChange}\r\n                    placeholder=\"Add a task title...\"\r\n                >\r\n                </textarea>\r\n            </div>\r\n            <button\r\n                className=\"mini-details-save-btn\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: (top + height + 10) + 'px'\r\n                }}\r\n                onClick={this.onSave}\r\n            >SAVE</button>\r\n            <MiniDetailsEditor\r\n                user={this.props.user}\r\n                miniTask={this.props.miniTask}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle}\r\n            />\r\n            <ScreenFilter onToggle={this.props.onToggle} />\r\n        </div >\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsEditor from '../MiniDetailsEditor';\r\nimport ScreenFilter from '../ScreenFilter';\r\n\r\nexport default class MiniImageDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textArea = React.createRef();\r\n        this.imgContainer = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        title: '',\r\n        imgHeight: 220\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textArea.current.focus();\r\n        this.setState({ imgHeight: this.imgContainer.current.getBoundingClientRect().height });\r\n    }\r\n\r\n    handleFocus = ev => {\r\n        ev.target.select();\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ title: targetValue });\r\n    }\r\n\r\n    onSave = _ => {\r\n        const newTask = { ...this.props.miniTask.task, title: this.state.title ? this.state.title : this.props.miniTask.task.title };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} updated the task '${this.props.miniTask.task.title}' to '${this.state.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.miniTask;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        const labelLen = task.labels.length;\r\n        let height = boundingClientRect.height;\r\n        let top = boundingClientRect.top;\r\n        if (height + top > window.innerHeight) {\r\n            height = (window.innerHeight - top - 50) > 252 ? window.innerHeight - top - 50 : 252;\r\n        }\r\n        if (boundingClientRect.top > (window.innerHeight - (window.innerHeight / 4))) {\r\n            top = window.innerHeight - height - 50;\r\n        }\r\n\r\n        return <div className=\"mini-details-container\">\r\n            <div\r\n                className=\"mini-details\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: top + 'px',\r\n                    height: height + 'px'\r\n                }}\r\n            >\r\n                <img ref={this.imgContainer} title={task.id} alt=\"task\" src={task.url} />\r\n                <div className=\"task-container-labels flex\">\r\n                    {task.labels.map(label => {\r\n                        return <div key={label} className={label + ' small-label'}>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <textarea\r\n                    name=\"title\"\r\n                    className={\"text-area\" + (labelLen > 0 ? ' preview-label' : '')}\r\n                    style={{\r\n                        height: height - this.state.imgHeight + 'px',\r\n                        position: 'relative',\r\n                    }}\r\n                    defaultValue={task.title}\r\n                    ref={this.textArea}\r\n                    onFocus={this.handleFocus}\r\n                    onInput={this.emitChange}\r\n                    placeholder=\"Add a task title...\"\r\n                >\r\n                </textarea>\r\n            </div>\r\n            <button\r\n                className=\"mini-details-save-btn\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: (top + height + (task.title ? 10 : 32)) + 'px'\r\n                }}\r\n                onClick={this.onSave}\r\n            >SAVE</button>\r\n            <MiniDetailsEditor\r\n                user={this.props.user}\r\n                miniTask={this.props.miniTask}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle} />\r\n            <ScreenFilter onToggle={this.props.onToggle} />\r\n        </div >\r\n    }\r\n}","import MiniTextDetails from './MiniTextDetails';\r\nimport MiniImageDetails from './MiniImageDetails';\r\nimport MiniVideoDetails from './MiniVideoDetails';\r\n\r\nexport default {\r\n    text: MiniTextDetails,\r\n    video: MiniVideoDetails,\r\n    image: MiniImageDetails\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsEditor from '../MiniDetailsEditor';\r\nimport ScreenFilter from '../ScreenFilter';\r\n\r\nexport default class MiniVideoDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textArea = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        title: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textArea.current.focus();\r\n    }\r\n\r\n    handleFocus = ev => {\r\n        ev.target.select();\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ title: targetValue });\r\n    }\r\n\r\n    onSave = _ => {\r\n        const newTask = { ...this.props.miniTask.task, title: this.state.title ? this.state.title : this.props.miniTask.task.title };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} updated the task '${this.props.miniTask.task.title}' to '${this.state.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.miniTask;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        const videoDimensions = { height: 140, width: 246 };\r\n        const labelLen = task.labels.length;\r\n        let height = boundingClientRect.height;\r\n        let top = boundingClientRect.top;\r\n\r\n        if (height + top > window.innerHeight) {\r\n            height = (window.innerHeight - top - 50) > 248 ? window.innerHeight - top - 50 : 248;\r\n        }\r\n        if (boundingClientRect.top > (window.innerHeight - (window.innerHeight / 4))) {\r\n            top = window.innerHeight - height - 50;\r\n        }\r\n        return <div className=\"mini-details-container\">\r\n            <div\r\n                className=\"mini-details\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: top + 'px',\r\n                    height: height + 'px'\r\n                }}\r\n            >\r\n                <iframe title={task.id}\r\n                    type='text/html' width={videoDimensions.width}\r\n                    height={videoDimensions.height}\r\n                    src={task.url}\r\n                    allowFullScreen=\"allowfullscreen\"></iframe>\r\n                <div className=\"task-container-labels flex\">\r\n                    {task.labels.map(label => {\r\n                        return <div key={label} className={label + ' small-label'}>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <textarea\r\n                    name=\"title\"\r\n                    className={\"text-area\" + (labelLen > 0 ? ' preview-label' : '')}\r\n                    style={{\r\n                        height: height - videoDimensions.height,\r\n                        position: 'relative',\r\n                        bottom: 14 + 'px'\r\n                    }}\r\n                    defaultValue={task.title}\r\n                    ref={this.textArea}\r\n                    onFocus={this.handleFocus}\r\n                    onInput={this.emitChange}\r\n                    placeholder=\"Add a task title...\"\r\n                >\r\n                </textarea>\r\n            </div>\r\n            <button\r\n                className=\"mini-details-save-btn\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: (top + height + (task.title ? 10 : 32)) + 'px'\r\n                }}\r\n                onClick={this.onSave}\r\n            >SAVE</button>\r\n            <MiniDetailsEditor\r\n                user={this.props.user}\r\n                miniTask={this.props.miniTask}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle} />\r\n            <ScreenFilter onToggle={this.props.onToggle} />\r\n        </div >\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport mapDynamicMiniComponents from \"./mapDynamicMiniComponents\"\r\n\r\nexport default class DynamicMiniComponent extends Component {\r\n    state = {\r\n        previewType: 'text'\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ previewType: this.props.miniTask.previewType });\r\n    }\r\n\r\n    getComponent() {\r\n        return mapDynamicMiniComponents[this.state.previewType];\r\n    }\r\n\r\n    render() {\r\n        const Cmp = this.getComponent();\r\n        return <React.Fragment>\r\n            <Cmp\r\n                miniTask={this.props.miniTask}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle}\r\n                board={this.props.board}\r\n                user={this.props.user}\r\n            >\r\n            </Cmp>\r\n        </React.Fragment>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { store } from 'react-notifications-component';\r\nimport FastAverageColor from 'fast-average-color';\r\n\r\n\r\nimport LoadPage from '../cmps/LoadPage';\r\nimport BoardColumns from '../cmps/BoardColumns';\r\nimport BoardHistory from '../cmps/BoardHistory';\r\nimport BoardTeamMembers from '../cmps/BoardTeamMembers';\r\nimport ColumnAddForm from '../cmps/ColumnAddForm';\r\nimport Login from '../cmps/Login';\r\nimport Filter from '../cmps/Filter';\r\nimport Sort from '../cmps/Sort';\r\nimport SplashMenu from '../cmps/SplashMenu';\r\nimport TaskDetails from '../cmps/TaskDetails';\r\nimport DynamicMiniComponent from '../cmps/dynamics/DynamicMiniComponent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport GroupAddOutlinedIcon from '@material-ui/icons/GroupAddOutlined';\r\nimport ImageSearchOutlinedIcon from '@material-ui/icons/ImageSearchOutlined';\r\nimport HistoryOutlinedIcon from '@material-ui/icons/HistoryOutlined';\r\n\r\nimport utils from '../services/utils';\r\nimport SocketService from '../services/SocketService';\r\n\r\nimport { loadBoard, updateBoard, setBoard } from '../actions/BoardActions';\r\nimport { logout, getLoggedInUser, getUsers } from '../actions/UserActions';\r\n\r\nclass Board extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.imgRef = React.createRef();\r\n  }\r\n\r\n  state = {\r\n    showColAddForm: true,\r\n    showTaskDetails: false,\r\n    showMiniTaskDetails: false,\r\n    toggleLogin: false,\r\n    toggleSplashMenu: false,\r\n    showHistory: false,\r\n    toggleBoardTeamMembers: false,\r\n    miniTaskDetails: {},\r\n    filterBy: {\r\n      title: '',\r\n      teamMembers: ''\r\n    },\r\n    sortBy: '',\r\n    sortOrder: '',\r\n    showTopMenuOptions: true,\r\n    showAddForm: false,\r\n    currColumnId: '',\r\n    isBoardLoaded: false,\r\n    isDarkBackground: null,\r\n    filterIconMod: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    const boardId = this.props.match.params.id;\r\n\r\n    this.props.getUsers();\r\n    this.props.getLoggedInUser();\r\n    this.loadBoard();\r\n    this.resize();\r\n    window.addEventListener('resize', this.resize);\r\n\r\n    SocketService.setup();\r\n    SocketService.emit('boardId', boardId);\r\n    SocketService.on('updateBoard', (board) => this.props.setBoard(board));\r\n    SocketService.on('getNotification', (notification) => store.addNotification(notification));\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const boardId = this.props.match.params.id;\r\n    if (this.state.isBoardLoaded) {\r\n      if (prevProps.board.boardBgImage !== this.props.board.boardBgImage) {\r\n        this.isDarkBackground();\r\n      };\r\n      return;\r\n    } else if (boardId === this.props.board._id) {\r\n      this.setState({ isBoardLoaded: true });\r\n      this.isDarkBackground();\r\n    };\r\n\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize');\r\n    SocketService.off('updateBoard');\r\n    SocketService.off('getNotification');\r\n    SocketService.terminate();\r\n  }\r\n\r\n  loadBoard = () => {\r\n    const boardId = this.props.match.params.id;\r\n    const filterBy = this.state.filterBy;\r\n    const sortBy = this.state.sortBy;\r\n    const sortOrder = this.state.sortOrder;\r\n    this.props.loadBoard(boardId, filterBy, sortBy, sortOrder);\r\n  }\r\n\r\n  toggleAddColumn = () => {\r\n    this.setState((prevState) => ({\r\n      showColAddForm: !prevState.showColAddForm,\r\n    }))\r\n  }\r\n\r\n  goBack = () => {\r\n    this.props.history.push('/');\r\n  }\r\n\r\n  toggleLogin = (ev) => {\r\n    ev.stopPropagation()\r\n    this.setState((prevState) => ({\r\n      toggleLogin: !prevState.toggleLogin,\r\n      showHistory: false,\r\n      toggleBoardTeamMembers: false,\r\n      toggleSplashMenu: false\r\n    }))\r\n  }\r\n\r\n  closeAllTabs = (ev) => {\r\n    ev.stopPropagation()\r\n    this.setState({\r\n      toggleLogin: false,\r\n      toggleSplashMenu: false,\r\n      showHistory: false,\r\n      toggleBoardTeamMembers: false,\r\n      showTopMenuOptions: false,\r\n      showAddForm: false,\r\n    });\r\n  }\r\n\r\n  toggleTaskDetails = (currTask) => {\r\n    if (currTask === undefined) {\r\n      this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails }));\r\n    } else if (this.state.showTaskDetails && currTask.id !== this.state.currTask.id) {\r\n      this.setState({ currTask });\r\n    } else {\r\n      this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails, currTask }));\r\n    }\r\n  }\r\n\r\n  onAddImg = (ev) => {\r\n    const file = ev.target.files[0];\r\n    utils.uploadImg(file).then(res => {\r\n      const newBoard = { ...this.props.board }\r\n      newBoard.boardBgImage = res\r\n      const msg = `${this.props.user} changed background image`;\r\n      const notificationType = 'success';\r\n      this.props.updateBoard(newBoard, msg, notificationType);\r\n    })\r\n  }\r\n\r\n  onFilter = (filterBy) => {\r\n    this.setState(prevState => ({ filterBy: { ...prevState.filterBy, ...filterBy } }), this.loadBoard);\r\n  }\r\n\r\n  onSort = (sortBy, sortOrder) => {\r\n    this.setState({ sortBy, sortOrder }, this.loadBoard);\r\n  }\r\n\r\n  toggleMiniDetails = miniTask => {\r\n    if (miniTask) {\r\n      return this.setState(prevState => ({ showMiniTaskDetails: !prevState.showMiniTaskDetails, miniTaskDetails: miniTask }));\r\n    }\r\n    this.setState(prevState => ({ showMiniTaskDetails: !prevState.showMiniTaskDetails }));\r\n  }\r\n\r\n  toggleSplashMenu = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState(prevState => ({\r\n      toggleSplashMenu: !prevState.toggleSplashMenu,\r\n      showHistory: false,\r\n      toggleBoardTeamMembers: false,\r\n      toggleLogin: false\r\n    }));\r\n  }\r\n\r\n  toggleBoardHistory = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState(prevState => ({\r\n      showHistory: !prevState.showHistory,\r\n      toggleSplashMenu: false,\r\n      toggleBoardTeamMembers: false,\r\n      toggleLogin: false\r\n    }));\r\n  }\r\n\r\n  toggleBoardTeamMembers = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState(prevState => ({\r\n      toggleBoardTeamMembers: !prevState.toggleBoardTeamMembers,\r\n      showHistory: false,\r\n      toggleSplashMenu: false,\r\n      toggleLogin: false\r\n    }))\r\n  }\r\n\r\n  openAddForm = colId => {\r\n    this.setState({ showAddForm: true, currColumnId: colId }, this.closeEditColumn);\r\n  }\r\n\r\n  closeAddForm = _ => {\r\n    this.setState({ showAddForm: false });\r\n  }\r\n\r\n  openEditColumn = (colId) => {\r\n    this.setState({ showTopMenuOptions: true, currColumnId: colId }, this.closeAddForm());\r\n  }\r\n\r\n  closeEditColumn = _ => {\r\n    this.setState({ showTopMenuOptions: false });\r\n  }\r\n\r\n  isDarkBackground = async (img) => {\r\n    const fac = new FastAverageColor();\r\n    let backgroundImage = new Image();\r\n    backgroundImage.crossOrigin = 'anonymous';\r\n    backgroundImage.src = img || this.props.board.boardBgImage;\r\n    try {\r\n      const color = await fac.getColorAsync(backgroundImage, { algorithm: 'dominant' });\r\n      (color.isDark) ? this.setState({ isDarkBackground: true }) : this.setState({ isDarkBackground: false });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  resize = _ => {\r\n    if(window.innerWidth < 900) {\r\n      this.setState({ filterIconMod: true });\r\n    } else {\r\n      this.setState({ filterIconMod: false })\r\n    };\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isBoardLoaded) return <LoadPage />\r\n    // const { teamMembers } = { ...this.props.board }\r\n    let button;\r\n    if (this.props.loggedInUser) {\r\n      button = <button className=\"board-page-nav-bar nav-btn\"\r\n        onClick={this.props.logout}>\r\n        logout\r\n      </button>\r\n    } else {\r\n      button = <button className=\"board-page-nav-bar nav-btn\"\r\n        onClick={ev => this.toggleLogin(ev)}>\r\n        login\r\n      </button>\r\n    }\r\n    return (\r\n      <div className=\"screen\" onClick={this.closeAllTabs}>\r\n        <div className=\"board-page fill-height flex column\" style={{ backgroundImage: 'url(' + this.props.board.boardBgImage + ')', backgroundAttachment: 'fixed' }}>\r\n\r\n          <div className=\"board-page-nav-bar flex align-center space-between\">\r\n            <div className=\"board-page-nav-bar-logo\" onClick={this.goBack}> </div>\r\n            <div className=\"flex align-center\">\r\n              {this.props.loggedInUser &&\r\n                <div className=\"flex\">\r\n                  <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: 'rgba(223, 225, 230, 0.8)', color: '#172b4d' }} >\r\n                    <div className=\"team-member-icon\">\r\n                      <p>\r\n                        {utils.createUserIcon(this.props.loggedInUser.firstName,\r\n                          this.props.loggedInUser.lastName)}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"logged-in-user flex column\">\r\n                    <small>Logged as:</small>\r\n                    <p> {this.props.loggedInUser.username}</p>\r\n                  </div>\r\n                </div>\r\n              }\r\n\r\n              {button}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"board-page-nav-bar-filters flex align-center space-between\">\r\n            <div className={`flex align-center`}>\r\n              <button\r\n                className={`board-page-nav-bar-filters nav-btn flex \r\n                          ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                onClick={this.goBack} >\r\n                <HomeIcon />\r\n              </button>\r\n\r\n              {/* {this.props.board.teamMembers.length > 0 &&\r\n                <div className=\"board-page-nav-bar-filters team-members-container flex\">\r\n                  {\r\n                    teamMembers.map(member => {\r\n                      return <div key={member.username} className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                        <p className=\"team-member-icon\">\r\n                          {utils.createUserIcon(member.firstName,\r\n                            member.lastName)}\r\n                        </p>\r\n                      </div>\r\n                    })\r\n                  }\r\n                </div>\r\n              } */}\r\n\r\n              <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <Filter onFilter={this.onFilter}\r\n                teamMembers={this.props.board.teamMembers}\r\n                isDarkBackground={this.state.isDarkBackground} />\r\n\r\n              <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <Sort onSort={this.onSort} isDarkBackground={this.state.isDarkBackground} />\r\n            </div>\r\n\r\n            <div className=\"board-page-nav-bar-filters-item flex align-center\">\r\n              <div className=\"board-page-nav-bar-filters-item fill-height\">\r\n                <button\r\n                  className={`nav-btn fill-height capitalize\r\n                  ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                  onClick={this.toggleBoardTeamMembers}>\r\n                  {!this.state.filterIconMod ? <Typography component=\"p\" className=\"flex align-center p-reset\">\r\n                    <GroupAddOutlinedIcon style={{ marginRight: 5 }} />\r\n                    add members\r\n                    </Typography> : <GroupAddOutlinedIcon />}\r\n                </button>\r\n              </div>\r\n\r\n              <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <div className=\"board-page-nav-bar-filters-item fill-height\">\r\n                <button\r\n                  className={`nav-btn fill-height capitalize\r\n                  ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                  onClick={(ev) => this.toggleSplashMenu(ev)}>\r\n                  {!this.state.filterIconMod ? <Typography component=\"p\" className=\"flex align-center p-reset\">\r\n                    <ImageSearchOutlinedIcon style={{ marginRight: 5 }} />\r\n                    change background\r\n                  </Typography> : <ImageSearchOutlinedIcon />}\r\n                </button>\r\n              </div>\r\n\r\n              <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <div className=\"board-page-nav-bar-filters-item flex fill-height\">\r\n                <button\r\n                  className={`board-page-nav-bar-filters nav-btn capitalize \r\n                  ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                  onClick={this.toggleBoardHistory}>\r\n                  {!this.state.filterIconMod ? <Typography component=\"p\" className=\"flex align-center p-reset\">\r\n                    <HistoryOutlinedIcon style={{ marginRight: 5 }} />\r\n                    show history\r\n                  </Typography> : <HistoryOutlinedIcon />}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <SplashMenu\r\n            toggleSplashMenu={this.state.toggleSplashMenu}\r\n            board={this.props.board}\r\n            updateBoard={this.props.updateBoard}\r\n            closeAllTabs={this.closeAllTabs}\r\n            onAddImg={this.onAddImg}\r\n            showUploadBgImg={this.state.closeAllTabs}\r\n            isDarkBackground={this.isDarkBackground}\r\n            user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'}\r\n          />\r\n\r\n          {(this.state.toggleLogin) && <Login variant=\"outlined\" className=\"home-page-login\" toggleLogin={this.toggleLogin} />}\r\n          <div className=\"board-page-columns-container\">\r\n            <div className=\"flex align-start fill-height\">\r\n              <Login\r\n                variant=\"outlined\"\r\n                className=\"home-page-login\"\r\n                toggleLogin={this.toggleLogin}\r\n                toggleState={this.state.toggleLogin} />\r\n              <BoardColumns\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                toggleTaskDetails={this.toggleTaskDetails}\r\n                toggleMiniDetails={this.toggleMiniDetails}\r\n                user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'}\r\n                currColumnId={this.state.currColumnId}\r\n                openAddForm={this.openAddForm}\r\n                closeAddForm={this.closeAddForm}\r\n                openEditColumn={this.openEditColumn}\r\n                closeEditColumn={this.closeEditColumn}\r\n                showTopMenuOptions={this.state.showTopMenuOptions}\r\n                showAddForm={this.state.showAddForm}\r\n              />\r\n              <div className=\"flex column align-center\">\r\n                {this.state.showColAddForm ?\r\n                  <button className={`board-page-add-another-column-btn\r\n                  ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                    onClick={this.toggleAddColumn}>\r\n                    <span className=\"add-icon\">+</span>Add another list</button> : ''}\r\n                {!this.state.showColAddForm && <ColumnAddForm board={this.props.board} updateBoard={this.props.updateBoard}\r\n                  toggleAddForm={this.toggleAddColumn} user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'} />}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {this.state.showTaskDetails && <TaskDetails\r\n            taskId={this.state.currTask.id}\r\n            board={this.props.board}\r\n            column={this.state.currTask.column}\r\n            updateBoard={this.props.updateBoard}\r\n            toggleTaskDetails={this.toggleTaskDetails}\r\n            user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'} />}\r\n          {this.state.showMiniTaskDetails && <DynamicMiniComponent\r\n            miniTask={this.state.miniTaskDetails}\r\n            updateBoard={this.props.updateBoard}\r\n            onToggle={this.toggleMiniDetails}\r\n            board={this.props.board}\r\n            user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'}\r\n          />}\r\n\r\n          <BoardHistory variant=\"outlined\"\r\n            className=\"home-page-login\" history={this.props.board.history} showHistory={this.state.showHistory}\r\n            toggleBoardHistory={this.toggleBoardHistory} />\r\n\r\n          <BoardTeamMembers board={this.props.board}\r\n            users={this.props.users} toggleBoardTeamMembers={this.state.toggleBoardTeamMembers}\r\n            updateBoard={this.props.updateBoard} />\r\n        </div>\r\n\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    board: state.boards.board,\r\n    loggedInUser: state.user.loggedInUser,\r\n    users: state.user.users\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  loadBoard,\r\n  updateBoard,\r\n  logout,\r\n  getLoggedInUser,\r\n  setBoard,\r\n  getUsers\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport history from './history';\r\nimport '../src/styles/global.scss'\r\n\r\nimport Home from './pages/Home.js';\r\nimport Board from './pages/Board.js';\r\n\r\nfunction App() {\r\n  return (\r\n      <Router history={history}>\r\n        <Switch>\r\n          <Route path=\"/\" component={Home} exact />\r\n          <Route path=\"/board/:id\" component={Board} exact />\r\n        </Switch>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  boards: [],\r\n  board: {}\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_BOARDS':\r\n      return { ...state, boards: action.boards };\r\n    case 'SET_BOARD':\r\n      return { ...state, board: action.board };\r\n    case 'UPDATE_BOARD':\r\n      return { ...state, board: action.board };\r\n    case 'ADD_BOARD':\r\n      return { ...state, boards: [...state.boards, action.addedBoard] };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","let localLoggedinUser = null;\r\n// if (localStorage.user) localLoggedinUser = JSON.parse(localStorage.user);\r\n\r\nconst initialState = {\r\n  loggedInUser: localLoggedinUser,\r\n  users: []\r\n};\r\n\r\nexport default function(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_USER':\r\n      return { ...state, loggedInUser: action.user };\r\n    case 'SET_USERS':\r\n      return {...state, users: action.users};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const initialState = {\r\n  isLoading: false\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'LOADING_START':\r\n      return { ...state, isLoading: true };\r\n    case 'LOADING_DONE':\r\n      return { ...state, isLoading: false };\r\n    default: return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport BoardReducer from './BoardReducer'\r\nimport UserReducer from './UserReducer';\r\nimport SystemReducer from './SystemReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  boards: BoardReducer,\r\n  system: SystemReducer,\r\n  user: UserReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst Store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default Store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport ReactNotification from 'react-notifications-component';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'react-notifications-component/dist/theme.css';\n\nimport Store from './store';\n\nReactDOM.render(\n  <Provider store={Store}>\n    <ReactNotification />\n      <App />\n  </Provider>,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}