{"version":3,"sources":["cmps/BoardPreview.js","cmps/BoardsList.js","services/HttpService.js","services/UserService.js","actions/UserActions.js","services/SocketService.js","cmps/Login.js","services/utils.js","services/BoardService.js","actions/BoardActions.js","pages/Home.js","cmps/LoadPage.js","cmps/TopMenuOptions.js","cmps/dynamics/mapDynamicComponents.js","cmps/dynamics/TaskPreview.js","cmps/dynamics/VideoPreview.js","cmps/dynamics/ImagePreview.js","cmps/dynamics/DynamicComponent.js","cmps/TasksList.js","cmps/TaskForm.js","cmps/BoardColumns.js","cmps/BoardHistory.js","cmps/BoardTeamMembers.js","cmps/ColumnAddForm.js","cmps/Filter.js","cmps/Sort.js","cmps/SplashMenu.js","cmps/DueDate.js","cmps/Labels.js","cmps/Members.js","cmps/Todos.js","cmps/TaskDetails.js","cmps/MiniDetailsButton.js","cmps/MiniDetailsEditor.js","cmps/ScreenFilter.js","cmps/dynamics/MiniTextDetails.js","cmps/dynamics/MiniImageDetails.js","cmps/dynamics/mapDynamicMiniComponents.js","cmps/dynamics/MiniVideoDetails.js","cmps/dynamics/DynamicMiniComponent.js","pages/Board.js","App.js","serviceWorker.js","reducers/BoardReducer.js","reducers/UserReducer.js","reducers/index.js","store.js","index.js"],"names":["BoardPreview","board","className","src","boardBgThumbnail","alt","boardBgThumbnailTitleStyle","title","withRouter","boards","user","duplicateBoard","templateBoards","filter","isTemplate","myBoards","createdBy","_id","myCollaboratedBoards","teamMembers","find","teamMember","map","key","onClick","username","length","myBoard","to","myCollaboratedBoard","axios","Axios","create","withCredentials","endpoint","data","ajax","a","async","method","url","res","console","log","dir","response","status","this","props","history","push","login","userCred","HttpService","logout","signup","getLoggedInUser","getUsers","users","dispatch","UserService","_setUser","Object","entries","type","_setUsers","socket","Login","state","msg","loginCred","email","password","signupCred","firstName","lastName","loginHandleChange","ev","target","name","value","setState","prevState","signupHandleChange","doLogin","preventDefault","userCreds","doSignup","signupCreds","toggleLogin","doLogout","doStopPropagation","stopPropagation","signupSection","onSubmit","onChange","placeholder","loginSection","loggedInUser","style","Component","mapDispatchToProps","connect","setup","io","terminate","on","eventName","cb","off","emit","getRandomId","letters","id","i","ind","Math","floor","random","createUserIcon","charAt","getRandomColor","color","uploadImg","file","UPLOAD_URL","formData","FormData","append","post","then","catch","err","error","getImagesFromUnsplash","filterName","URL","get","results","emitNotification","notification","message","insert","container","animationIn","animationOut","dismiss","duration","SocketService","add","query","boardId","filterBy","sortBy","sortOrder","keys","join","_createQueryString","put","remove","_setBoards","loadBoard","BoardService","_boardUpdate","Home","tasks","columns","columnOrder","boardBgImage","createBoard","createdBoardMessage","newBoard","task","duplicatedBoard","taskTeamMembers","createdAt","Date","now","utils","time","loadBoards","button","Button","CSSTransition","in","timeout","classNames","unmountOnExit","Fab","variant","href","addedBoard","_addBoard","LoadPage","CircularProgress","TopMenuOptions","onDuplicateColumn","column","newColumn","newId","idx","findIndex","columnId","splice","taskIds","forEach","taskId","clonedTaskId","taskIdIdx","taskIdx","toggleTopMenuOptions","updateBoard","onDelete","text","toggleMiniDetails","miniTask","boundingClientRect","taskContainer","current","getBoundingClientRect","previewType","React","createRef","prevProps","toggleRender","provided","innerRef","isDragging","showEditBtn","onTaskId","ref","draggableProps","dragHandleProps","labels","label","e","description","todos","todosDone","member","backgroundColor","video","videoContainer","width","height","allowFullScreen","security","image","imgContainer","DynamicComponent","componentType","mapDynamicComponents","Cmp","getComponent","Fragment","TasksList","showAddForm","currTaskId","showTaskDetails","toggleTaskDetails","canOpenTaskDetails","hideEditBtn","_","isDraggingOver","droppableProps","draggableId","index","snapshot","rotationMultiplier","onMouseEnter","onMouseLeave","TaskForm","dueDate","importance","edit","inputChange","fieldName","save","checkIfUrlAndSave","match","newUrl","replace","saveTask","includes","closeUpdateForm","toggleUpdateForm","textAreaAdjust","scrollHeight","nameInput","focus","setFormDataForEdit","onKeyUp","input","BoardColumns","timer","taskKey","onDragEnd","result","destination","source","droppableId","newColumnOrder","slice","columnTitle","start","finish","newTaskIds","taskTitle","startTaskIds","newStart","finishTaskIds","newFinish","setColumnName","emitChange","innerText","saveColumnName","updatedBoard","currColumnId","showTopMenuOptions","direction","columnKey","currId","contentEditable","spellCheck","onFocus","onInput","onBlur","suppressContentEditableWarning","openEditColumn","closeEditColumn","reRender","openAddForm","addCardText","closeAddForm","BoardHistory","item","moment","calendar","BoardTeamMembers","currentBoardMembers","componentDidMount","updateTeamMembers","notificationType","onStopPropagation","boardMember","ColumnAddForm","saveColumn","toggleAddForm","Filter","onFilter","background","isDarkBackground","Sort","onSortBy","onSort","toggleButtonName","SplashMenu","splashImagesUrls","office","filterByName","onSave","splashImages","UrlIndx","currUrl","urls","setBoardBackground","imageUrl","full","small","display","onAddImg","htmlFor","DueDate","setDate","handleChange","date","newTask","getTime","onToggle","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","popperModifiers","flip","behavior","preventOverflow","enabled","Labels","choosenLabels","setNewState","updateChoosenLabels","classList","labelIdx","currLabel","updateStyle","left","top","toggleChooseLabels","Members","choosenMembers","availableMembers","setAvailableMembers","updateChoosenMembers","memberIdx","currMember","taskMember","pos","toggleChooseMembers","Todo","updateTodo","onSaveTodo","todo","isDone","updateProgressBar","toggleTodos","TaskDetails","choosenlabels","showActivity","showEditDescriptionForm","onToggleDueDate","toggleDeleteTodo","progressWidth","currTodoId","targetValue","openUpdateDescriptionForm","closeUpdateDescriptionForm","onStopPropagationAndCloseOptions","onSaveDescription","onDuplicateTask","onDeleteTask","toggleTodoDone","currTodo","doneTodosCounter","interval","round","setInterval","clearInterval","deleteTodo","todoId","deletedTodo","hideDeleteTodoButton","showDeleteTodoButton","setTaskName","changeDescription","saveTaskName","uploadImage","files","currTask","position","fontSize","fontWeight","letterSpacing","Avatar","margin","textAlign","right","checked","format","cols","MiniDetailsButton","MiniDetailsEditor","onToggleLabels","onToggleMembers","window","innerHeight","ScreenFilter","MiniTextDetails","handleFocus","select","textArea","labelLen","defaultValue","MiniImageDetails","imgHeight","videoDimensions","bottom","DynamicMiniComponent","mapDynamicMiniComponents","Board","showColAddForm","showMiniTaskDetails","toggleSplashMenu","showHistory","toggleBoardTeamMembers","miniTaskDetails","isBoardLoaded","filterIconMod","mobileMod","params","toggleAddColumn","goBack","closeAllTabs","undefined","toggleBoardHistory","colId","img","fac","FastAverageColor","backgroundImage","Image","crossOrigin","getColorAsync","algorithm","isDark","resize","innerWidth","addEventListener","setBoard","store","addNotification","removeEventListener","backgroundAttachment","marginTop","Typography","component","marginRight","showUploadBgImg","toggleState","unshift","App","path","exact","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialState","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","process","origin","fetch","headers","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d16df0f4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction BoardPreview({ board }) {\r\n  return (\r\n    <div className=\"board-preview card\">\r\n      <img src={board.boardBgThumbnail} alt=\"none\" />\r\n      <div className={`flex justify-center align-center title-container ${board.boardBgThumbnailTitleStyle}`}>\r\n        <h2 className={`capitalize ${board.boardBgThumbnailTitleStyle}`}>{board.title}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default (BoardPreview)","import React from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport BoardPreview from './BoardPreview';\r\n\r\nfunction BoardsList({ boards, user, duplicateBoard }) {\r\n    const templateBoards = boards.filter(board => board.isTemplate);\r\n    const myBoards = (user) ? boards.filter(board => board.createdBy._id === user._id) : '';\r\n    const myCollaboratedBoards = (user) ? boards.filter(board => {\r\n        return board.teamMembers.find(teamMember => user._id === teamMember._id && user._id !== board.createdBy._id);\r\n    }) : '';\r\n\r\n    return (\r\n        <section className=\"boards-list column\">\r\n            <h2 className=\"text-center uppercase\"> check our premade templates</h2>\r\n            <div className=\"boards-list-main-inner-container\">\r\n                {templateBoards.map(board => (\r\n                    <div className=\"boards-list-main-inner-container-item pointer\" key={board._id} onClick={() => duplicateBoard(board)}>\r\n                        <BoardPreview board={board} />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            {user &&\r\n                <div>\r\n                    <h2 className=\"text-center uppercase\"> {`${user.username}'s`} boards</h2>\r\n                    {(myBoards.length === 0) ?\r\n                        <div className=\"capitalize flex justify-center noboards\">\r\n                            you haven't created a board yet! click on get started or try one of our premade templates!\r\n                    </div> :\r\n                        <div className=\"boards-list-main-inner-container\">\r\n                            {myBoards.map(myBoard => (\r\n                                <NavLink className=\"boards-list-main-inner-container-item\" key={myBoard._id} to={`/board/${myBoard._id}`}>\r\n                                    <BoardPreview board={myBoard} />\r\n                                </NavLink>\r\n                            ))}\r\n                        </div>\r\n                    }\r\n                    <h2 className=\"text-center uppercase\"> {`${user.username}`} is also a member of these boards</h2>\r\n                    {(myCollaboratedBoards.length === 0) ?\r\n                        <div className=\"capitalize flex justify-center noboards\">\r\n                            you are not a member of other boards\r\n                    </div> :\r\n                        <div>\r\n                            <div className=\"boards-list-main-inner-container\">\r\n                                {myCollaboratedBoards.map(myCollaboratedBoard => (\r\n                                    <NavLink className=\"boards-list-main-inner-container-item\" key={myCollaboratedBoard._id} to={`/board/${myCollaboratedBoard._id}`}>\r\n                                        <BoardPreview board={myCollaboratedBoard} />\r\n                                    </NavLink>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default withRouter(BoardsList)","import Axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data){\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data){\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data){\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data){\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method='get', data=null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        if (err.response && err.response.status === 401) {\r\n          this.props.history.push('/');\r\n        }\r\n        throw err;\r\n    }\r\n}","import HttpService from './HttpService'\r\n\r\nexport default {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getLoggedInUser,\r\n    getUsers\r\n}\r\n\r\nasync function login(userCred) {\r\n    try {\r\n        const user = await HttpService.post('auth/login', userCred);\r\n        return user;\r\n    } catch (err) {\r\n        console.log('UserService: err in login', err);\r\n    }\r\n}\r\n\r\nasync function signup(userCred) {\r\n    try {\r\n        const user = await HttpService.post('auth/signup', userCred);\r\n        return user;\r\n    } catch (err) {\r\n        console.log('UserService: err in signup', err);\r\n    }\r\n}\r\n\r\nasync function logout() {\r\n    try {\r\n        await HttpService.post('auth/logout');\r\n    } catch (err) {\r\n        console.log('UserService: err in logout', err);\r\n    }\r\n}\r\n\r\nasync function getLoggedInUser() {\r\n    try {\r\n        const user = await HttpService.get('auth/user');\r\n        return user;\r\n    } catch (err) {\r\n        console.log('UserService: err in getting loggedInUser', err);\r\n    }\r\n}\r\n\r\nasync function getUsers() {\r\n    try {\r\n        const users = await HttpService.get('user');\r\n        return users;\r\n    } catch (err) {\r\n        console.log('UserService: err in getting users', err);\r\n    }\r\n}\r\n","import UserService from '../services/UserService';\r\n\r\nexport function login(userCreds) {\r\n  return async dispatch => {\r\n    try {\r\n      const user = await UserService.login(userCreds);\r\n      dispatch(_setUser(user));\r\n    } catch (err) {\r\n      console.log('UserActions: err in login', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function signup(userCreds) {\r\n  return async dispatch => {\r\n    try {\r\n      const user = await UserService.signup(userCreds);\r\n      dispatch(_setUser(user));\r\n    } catch (err) {\r\n      console.log('UserActions: err in signup', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function logout() {\r\n  return async dispatch => {\r\n    try {\r\n      await UserService.logout();\r\n      dispatch(_setUser(null));\r\n    } catch (err) {\r\n      console.log('UserActions: err in logout', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function getLoggedInUser() {\r\n  return async dispatch => {\r\n    try {\r\n      const user = await UserService.getLoggedInUser();\r\n      if (Object.entries(user).length === 0) return;\r\n      dispatch(_setUser(user));\r\n    }  catch (err) {\r\n      console.log('UserActions: err in logout', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _setUser(user) {\r\n  return {\r\n    type: 'SET_USER',\r\n    user\r\n  };\r\n}\r\n\r\nexport function getUsers() {\r\n  return async dispatch => {\r\n    try {\r\n      const users = await UserService.getUsers();\r\n      dispatch(_setUsers(users));\r\n    } catch (err) {\r\n      console.log('UserActions: err in getUsers', err);\r\n    }\r\n  }\r\n}\r\n\r\nfunction _setUsers(users) {\r\n  return {\r\n    type: 'SET_USERS',\r\n    users\r\n  };\r\n}","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n  process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport default {\r\n  setup,\r\n  terminate,\r\n  on,\r\n  off,\r\n  emit\r\n};\r\n\r\nfunction setup() {\r\n  socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n  socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n  socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n  socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n  socket.emit(eventName, data);\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n  getLoggedInUser,\r\n  login,\r\n  logout,\r\n  signup\r\n} from '../actions/UserActions';\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    msg: '',\r\n    loginCred: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n    signupCred: {\r\n      firstName: '',\r\n      lastName: '',\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    },\r\n  }\r\n\r\n  loginHandleChange = ev => {\r\n    const { name, value } = ev.target;\r\n    this.setState(prevState => ({\r\n      loginCred: {\r\n        ...prevState.loginCred,\r\n        [name]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  signupHandleChange = ev => {\r\n    const { name, value } = ev.target;\r\n    this.setState(prevState => ({\r\n      signupCred: {\r\n        ...prevState.signupCred,\r\n        [name]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  doLogin = async ev => {\r\n    ev.preventDefault();\r\n    const { email, password } = this.state.loginCred;\r\n    if (!email || !password) {\r\n      return this.setState({ msg: 'Please enter user/password' });\r\n    }\r\n    const userCreds = { email, password };\r\n    this.props.login(userCreds);\r\n    this.setState({ loginCred: { email: '', password: '' } });\r\n  };\r\n\r\n  doSignup = async ev => {\r\n    ev.preventDefault();\r\n    const { firstName, lastName, username, email, password } = this.state.signupCred;\r\n    if (!firstName || !lastName || !email || !password || !username) {\r\n      return this.setState({ msg: 'All inputs are required!' });\r\n    }\r\n    const signupCreds = { firstName, lastName, username, email, password };\r\n    this.props.signup(signupCreds);\r\n    this.setState({ signupCred: { firstName: '', lastName: '', username: '', email: '', password: '' } });\r\n    this.props.toggleLogin();\r\n  };\r\n\r\n  doLogout = () => {\r\n    this.props.logout();\r\n  }\r\n\r\n  doStopPropagation = (ev) => {\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    let signupSection = (\r\n      <form className=\"login-container-signup text-center\" onSubmit={this.doSignup}>\r\n        <p>Not a member yet? Sign up!</p>\r\n        <input\r\n          type=\"text\"\r\n          name=\"firstName\"\r\n          value={this.state.signupCred.firstName}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"First Name\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"lastName\"\r\n          value={this.state.signupCred.lastName}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Last Name\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          value={this.state.signupCred.email}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Email\"\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={this.state.signupCred.username}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Username\"\r\n        />\r\n        <br />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={this.state.signupCred.password}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Password\"\r\n        />\r\n        <br />\r\n        <button className=\"login-container-signup-btn\">Signup</button>\r\n      </form>\r\n    );\r\n    let loginSection = (\r\n      <form className=\"login-container-login text-center\" onSubmit={this.doLogin}>\r\n        <p> Login: </p>\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          value={this.state.loginCred.email}\r\n          onChange={this.loginHandleChange}\r\n          placeholder=\"Email\"\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={this.state.loginCred.password}\r\n          onChange={this.loginHandleChange}\r\n          placeholder=\"Password\"\r\n        />\r\n        <br />\r\n        <button className=\"login-container-login-btn\">Login</button>\r\n      </form>\r\n    );\r\n\r\n    const { loggedInUser } = this.props;\r\n\r\n    return (\r\n      <div className=\"login-container flex column align-center\"\r\n        style={this.props.style}\r\n        onClick={this.doStopPropagation}\r\n      >\r\n        <div className=\"login-container-logo\">\r\n        </div>\r\n        <h2>{this.state.msg}</h2>\r\n        <div className={\"login-container-form-container\"}>\r\n          {loggedInUser && (\r\n            <div>\r\n              <h2 className=\"login-container-loggedin-username\"> <p>Welcome!</p> {loggedInUser.username} </h2>\r\n              <div className=\"fill-width flex\">\r\n                <button className=\"login-container-form-container-logout\" onClick={this.doLogout}>Logout</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {!this.props.loggedInUser && loginSection}\r\n          <hr />\r\n          {!this.props.loggedInUser && signupSection}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    users: state.user.users,\r\n    loggedInUser: state.user.loggedInUser,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  login,\r\n  logout,\r\n  signup,\r\n  getLoggedInUser\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import axios from 'axios'\r\n\r\nimport SocketService from './SocketService';\r\n\r\nexport default {\r\n  getRandomId,\r\n  createUserIcon,\r\n  getRandomColor,\r\n  uploadImg,\r\n  getImagesFromUnsplash,\r\n  emitNotification\r\n}\r\n\r\nfunction getRandomId() {\r\n  let letters = '1234567890poiiytreqwasdfghjklmnbvcxxssersgyushquiz';\r\n  let id = '';\r\n  for (let i = 0; i < 10; i++) {\r\n    let ind = Math.floor(Math.random() * letters.length)\r\n    id += letters[ind];\r\n  }\r\n  return id;\r\n}\r\n\r\nfunction createUserIcon(firstName, lastName) {\r\n  let newIcon = firstName.charAt(0) + lastName.charAt(0)\r\n  return (newIcon)\r\n}\r\n\r\nfunction getRandomColor() {\r\n  var letters = '0123456789ABCDEF';\r\n  var color = '#';\r\n  for (var i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n\r\nfunction uploadImg(file) {\r\n  const CLOUD_NAME = 'dujlxvxxv'\r\n  const PRESET_NAME = 'xi62wuas'\r\n  const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\r\n\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  formData.append('upload_preset', PRESET_NAME);\r\n\r\n  return axios.post(UPLOAD_URL, formData)\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      return res.url\r\n    })\r\n    .catch(err => console.error(err))\r\n}\r\n\r\nfunction getImagesFromUnsplash(filterName) {\r\n  const client_id = '9a992bf0a58ef7c4735758c98ec044dcdb524c2178db25d55cd773d7436f15d1'\r\n  const URL = `https://api.unsplash.com/search/photos?per_page=20&query=${filterName}&client_id=${client_id}`\r\n  return axios.get(URL)\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      return res.results\r\n    })\r\n    .catch(err => console.error(err))\r\n}\r\n\r\nfunction emitNotification(msg, type) {\r\n  const notification = {\r\n    message: msg,\r\n    type: type,\r\n    insert: \"top\",\r\n    container: \"bottom-right\",\r\n    animationIn: [\"animated\", \"zoomIn\"],\r\n    animationOut: [\"animated\", \"fadeOut\"],\r\n    dismiss: {\r\n      duration: 5000,\r\n    }\r\n  };\r\n  SocketService.emit('sendNotification', notification);\r\n}","import HttpService from './HttpService';\r\n\r\nexport default {\r\n  add,\r\n  query,\r\n  get,\r\n  put,\r\n  remove\r\n};\r\n\r\nfunction query() {\r\n  return HttpService.get('board');\r\n}\r\n\r\nfunction get(boardId, filterBy, sortBy, sortOrder) {\r\n  return HttpService.get(`board/${boardId}?${_createQueryString(filterBy)}&sortby=${sortBy}&sortorder=${sortOrder}`);\r\n}\r\n\r\nfunction _createQueryString(filterBy) {\r\n  return Object.keys(filterBy).map(filter => filter + '=' + filterBy[filter]).join('&');\r\n}\r\n\r\nfunction put(board) {\r\n  return HttpService.put(`board/${board._id}`, board);\r\n}\r\n\r\nfunction remove(boardId) {\r\n  return HttpService.delete(`board/${boardId}`);\r\n}\r\n\r\nfunction add(board) {\r\n  return HttpService.post('board', board);\r\n}","import BoardService from '../services/BoardService';\r\nimport SocketService from '../services/SocketService';\r\nimport utils from '../services/utils';\r\n\r\nexport function loadBoards() {\r\n  return async dispatch => {\r\n    try {\r\n      const boards = await BoardService.query();\r\n      dispatch(_setBoards(boards));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoards', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _setBoards(boards) {\r\n  return {\r\n    type: 'SET_BOARDS',\r\n    boards\r\n  };\r\n}\r\n\r\nexport function loadBoard(boardId, filterBy, sortBy, sortOrder) {\r\n  return async dispatch => {\r\n    try {\r\n      const board = await BoardService.get(boardId, filterBy, sortBy, sortOrder);\r\n      dispatch(_boardUpdate(board));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoard', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function setBoard(board) {\r\n  return async dispatch => {\r\n    try {\r\n      dispatch(_boardUpdate(board));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in setBoard', err);\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateBoard(board, msg, notificationType) {\r\n  return async dispatch => {\r\n    try {\r\n      board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n      dispatch(_boardUpdate(board));\r\n      await BoardService.put(board);\r\n      SocketService.emit('boardUpdate', board);\r\n      utils.emitNotification(msg, notificationType);\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoard', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _boardUpdate(board) {\r\n  return {\r\n    type: 'UPDATE_BOARD',\r\n    board\r\n  }\r\n}\r\n\r\nexport function createBoard(board) {\r\n  return async dispatch => {\r\n    try {\r\n      const addedBoard = await BoardService.add(board);\r\n      dispatch(_addBoard(addedBoard));\r\n      return addedBoard;\r\n    } catch (err) {\r\n      console.log('BoardActions: err in createBoard', err);\r\n    }\r\n  }\r\n\r\n  function _addBoard(addedBoard) {\r\n    return {\r\n      type: 'ADD_BOARD',\r\n      addedBoard\r\n    };\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\n\r\nimport BoardsList from '../cmps/BoardsList';\r\nimport Login from '../cmps/Login';\r\n\r\nimport utils from '../services/utils';\r\n\r\nimport { loadBoards, loadBoard, createBoard } from '../actions/BoardActions'\r\nimport { logout, getLoggedInUser } from '../actions/UserActions'\r\n\r\nclass Home extends Component {\r\n\r\n  state = {\r\n    toggleLogin: false,\r\n    board: {\r\n      teamMembers: [],\r\n      tasks: {},\r\n      columns: {},\r\n      columnOrder: [],\r\n      style: {},\r\n      boardBgImage: 'https://images.unsplash.com/photo-1511649475669-e288648b2339?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&ixid=eyJhcHBfaWQiOjExMTc0M30',\r\n      history: [],\r\n      boardBgThumbnail: 'https://images.unsplash.com/photo-1511649475669-e288648b2339?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjExMTc0M30'\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.loadBoards();\r\n    this.props.getLoggedInUser();\r\n  }\r\n\r\n  toggleLogin = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState((prevState) => ({ toggleLogin: !prevState.toggleLogin }))\r\n  }\r\n\r\n  createBoard = async () => {\r\n    let board = this.state.board;\r\n    board.createdBy = this.props.loggedInUser || { _id: 'guest', username: 'guest' };\r\n    this.createdBoardMessage(board);\r\n    const newBoard = await this.props.createBoard(board);\r\n    this.props.history.push(`/board/${newBoard._id}`);\r\n  }\r\n\r\n  duplicateBoard = async (board) => {\r\n    let duplicatedBoard = { ...board };\r\n    delete duplicatedBoard._id;\r\n    delete duplicatedBoard.boardBgThumbnailTitleStyle;\r\n    duplicatedBoard.history = [];\r\n    duplicatedBoard.teamMembers = [];\r\n    duplicatedBoard.title = '';\r\n    duplicatedBoard.isTemplate = false;\r\n    duplicatedBoard.createdBy = this.props.loggedInUser || { _id: 'guest', username: 'guest' };\r\n    for (const task in duplicatedBoard.tasks) {\r\n      duplicatedBoard.tasks[task].taskTeamMembers = [];\r\n      duplicatedBoard.tasks[task].createdAt = Date.now();\r\n    }\r\n    this.createdBoardMessage(duplicatedBoard);\r\n    const newBoard = await this.props.createBoard(duplicatedBoard);\r\n    this.props.history.push(`/board/${newBoard._id}`);\r\n  }\r\n\r\n  createdBoardMessage = (board) => {\r\n    const username = (this.props.loggedInUser) ? this.props.loggedInUser.username : 'Guest';\r\n    let msg = `The Board was created by ${username}`;\r\n    board.history.push({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n  }\r\n\r\n  render() {\r\n    let button;\r\n    if (this.props.loggedInUser) {\r\n      button = <Button className=\"home-page-login-btn\" onClick={this.props.logout}>\r\n        <div>logout</div>\r\n      </Button>\r\n    } else {\r\n      button = <Button className=\"home-page-login-btn\" onClick={this.toggleLogin}>\r\n        <div>login</div>\r\n      </Button>\r\n    }\r\n\r\n    return (\r\n        <div className=\"home-page\">\r\n        {(this.state.toggleLogin) && <div className=\"home-page screen\" onClick={this.toggleLogin}></div>}\r\n          <section className=\"home-page-header\">\r\n            <div className=\"home-page-login flex justify-end align-center\">\r\n              {(this.props.loggedInUser) &&\r\n                <p className=\"flex column\">\r\n                  <small>welcome!</small>\r\n                  {this.props.loggedInUser.username}\r\n                </p>\r\n              }\r\n              {button}\r\n            </div>\r\n            <CSSTransition\r\n              in={this.state.toggleLogin}\r\n              timeout={700}\r\n              classNames=\"modal\"\r\n              unmountOnExit>\r\n              <Login\r\n                className=\"home-page-login\"\r\n                toggleLogin={this.toggleLogin} />\r\n            </CSSTransition>\r\n            <div className=\"home-page-header-container flex\">\r\n              <div className=\"header-image flex align-center justify-center fill-width fill-height\">\r\n                <div className=\"login-get-started-container flex align-center justify-center align-center\">\r\n                  <div className=\"home-page-logo-get-started flex column align-center\">\r\n                    <div className=\"home-page-header-container-logo-img fill-width fill-height\"></div>\r\n                    <div className=\"text-center\">\r\n                      <h2>Manage your tasks in a fun and easy way</h2>\r\n                    </div>\r\n                    <div className=\"get-started-btn\">\r\n                      <Fab variant=\"extended\">\r\n                        <p className=\"uppercase\" onClick={this.createBoard}>\r\n                          get started\r\n                    </p>\r\n                      </Fab>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </section>\r\n\r\n          <section className=\"home-page-boards-list flex wrap colum justify-center\">\r\n            <div className=\"home-page-boards-list-img\"></div>\r\n            <p className=\"home-page-boards-list-start-new-board-right-text flex\">\r\n              We, in Trebello, believe that simplicity and style must go together,\r\n            that's why we made our brand simple and easy to use for everyone.<br /> <br />\r\n              Maximize your team workflow and take them one step ahead.</p>\r\n          </section>\r\n\r\n          <BoardsList boards={this.props.boards} user={this.props.loggedInUser} duplicateBoard={this.duplicateBoard} />\r\n\r\n          <section className=\"home-page-footer flex column align-center justify-center\">\r\n            <h2 className=\"uppercase\"> our team </h2>\r\n            <div className=\"home-pagge-footer-team-members-cards-container flex wrap justify-center\">\r\n\r\n              <div className=\"home-page-footer-team-member-card flex column align-center\">\r\n                <div className=\"home-page-footer-team-member-card-member-img vlad\"></div>\r\n                <p>Vlad Batalin</p>\r\n                <small>Front-End development and Design</small>\r\n                <div className=\"flex\">\r\n                  <LinkedInIcon className=\"linkedInIcon\"></LinkedInIcon>\r\n                  <FacebookIcon className=\"faceBookIcon\"></FacebookIcon>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"home-page-footer-team-member-card flex column align-center\">\r\n                <div className=\"home-page-footer-team-member-card-member-img margad\"></div>\r\n                <p>Margad Taikhir</p>\r\n                <small>Front-End development with Back-End support</small>\r\n                <div className=\"flex\">\r\n                  <LinkedInIcon className=\"linkedInIcon\"></LinkedInIcon>\r\n                  <FacebookIcon className=\"faceBookIcon\"></FacebookIcon>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"home-page-footer-team-member-card flex column align-center justify-center\">\r\n                <div className=\"home-page-footer-team-member-card-member-img paolo\"></div>\r\n                <p>Paolo Groppi</p>\r\n                <small>Full-Stack development</small>\r\n                <div className=\"flex\">\r\n                  <a href=\"https://www.linkedin.com/in/paolo-groppi-6ba84117b\" target=\"blank\"><LinkedInIcon className=\"linkedInIcon\"></LinkedInIcon></a>\r\n                  <a href=\"https://www.facebook.com/karma.tova\" target=\"blank\"><FacebookIcon className=\"faceBookIcon\"></FacebookIcon></a>\r\n                </div>\r\n              </div>\r\n\r\n            </div>\r\n          </section>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    boards: state.boards.boards,\r\n    board: state.boards.board,\r\n    loggedInUser: state.user.loggedInUser\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  loadBoards,\r\n  loadBoard,\r\n  createBoard,\r\n  getLoggedInUser,\r\n  logout\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nexport default function LoadPage() {\r\n  return (\r\n    <div className=\"loading-page flex column align-center justify-center\">\r\n      <h2 className=\"uppercase\"> just a moment :)</h2>\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class TopMenuOptions extends Component {\r\n\r\n    onDuplicateColumn = () => {\r\n\r\n        let column = this.props.column;\r\n        let board = this.props.board;\r\n        let newColumn = { ...this.props.column }\r\n        const newId = utils.getRandomId();\r\n        const idx = board.columnOrder.findIndex(columnId => columnId === column.id);\r\n\r\n        newColumn.id = newId;\r\n        board.columnOrder.splice(idx + 1, 0, newColumn.id);\r\n\r\n        newColumn.taskIds.forEach(taskId => {\r\n\r\n            const clonedTaskId = utils.getRandomId();\r\n            const taskIdIdx = column.taskIds.findIndex(taskIdx => taskIdx === taskId);\r\n\r\n            board.tasks[clonedTaskId] = { ...board.tasks[taskId], id: clonedTaskId }\r\n            newColumn.taskIds = [...newColumn.taskIds];\r\n            newColumn.taskIds.splice(taskIdIdx, 1, clonedTaskId);\r\n        });\r\n\r\n        board.columns[newId] = newColumn;\r\n        this.props.toggleTopMenuOptions(column.id);\r\n        const msg = `'${column.title}' was duplicated by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(board, msg, notificationType);\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"top-menu-options\">\r\n            <h2 className=\"text-center capitalize\">options menu</h2>\r\n            <div className=\"options-container flex column\">\r\n                <p className=\"capitalize\" onClick={this.onDuplicateColumn}>duplicate list</p>\r\n                <p className=\"capitalize\" onClick={() => this.props.onDelete(this.props.column.id)}>delete list</p>\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n}","import TaskPreview from './TaskPreview';\r\nimport VideoPreview from './VideoPreview';\r\nimport ImagePreview from './ImagePreview';\r\n\r\nexport default {\r\n    text: TaskPreview,\r\n    video: VideoPreview,\r\n    image: ImagePreview\r\n}","import React, { Component } from \"react\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport utils from '../../services/utils'\r\n\r\nexport default class TaskPreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.taskContainer = React.createRef();\r\n    }\r\n\r\n    // need to see why it doesn't re-render tasklist\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.task.type !== this.props.task.type) {\r\n            console.log('inside')\r\n            this.props.toggleRender();\r\n        }\r\n    }\r\n\r\n    toggleMiniDetails = ev => {\r\n        ev.stopPropagation();\r\n        const miniTask = {\r\n            task: this.props.task,\r\n            boundingClientRect: this.taskContainer.current.getBoundingClientRect(),\r\n            previewType: this.props.task.type,\r\n            column: this.props.column\r\n        };\r\n        this.props.toggleMiniDetails(miniTask);\r\n    }\r\n\r\n    render() {\r\n        const { task, provided, innerRef, isDragging, style, showEditBtn, onTaskId } = this.props;\r\n        return (\r\n            <section ref={this.taskContainer}>\r\n                <div\r\n                    className={\"task-container\" + (isDragging ? \" isDragging\" : \"\")}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={innerRef}\r\n                    style={style}\r\n                >\r\n                    {task.url && <img title={task.id} alt=\"task\" src={task.url} />}\r\n\r\n                    <div className=\"task-container-labels flex wrap\">\r\n                        {task.labels.map(label => {\r\n                            return <div key={label} className={label + ' small-label'}>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                    <p className=\"task-container-title\">{task.title}</p>\r\n                    {(showEditBtn && (onTaskId === task.id)) ?\r\n                        <CreateIcon className=\"task-container-open-menu\"\r\n                            onClick={e => this.toggleMiniDetails(e)} />\r\n                        : ''}\r\n\r\n                    <div className={\"bottom-container grid-container flex\" + (task.description === '' ? ' row-reverse' : '')}>\r\n                        {(task.description !== '') ?\r\n                            <div className=\"grid-item justify-self-center align-self-center\">\r\n                                <SubjectIcon />\r\n                            </div>\r\n                            : <div className=\"grid-item\"></div>\r\n                        }\r\n\r\n                        {(task.todos.length > 0) ?\r\n                            <div className=\"grid-item align-center flex\">\r\n                                <div className=\"flex align-center\">\r\n                                    <CheckBoxIcon />\r\n                                    <p>{task.todosDone + '/' + task.todos.length}</p>\r\n                                </div>\r\n                            </div>\r\n                            : <div className=\"grid-item\"></div>\r\n                        }\r\n                        <div className=\"team-members-container grid-item\">\r\n                            <div className=\"flex justify-end\">\r\n                                {(task.taskTeamMembers.map(member => {\r\n                                    return <div key={member._id} className=\"team-member-icon-wrapper flex align-center\" style={{ backgroundColor: '#dfe1e6' }} >\r\n                                        <div className=\"team-member-icon\">\r\n                                            <p className=\"flex align-center\" style={{ color: '#172b4d' }}>\r\n                                                {utils.createUserIcon(member.firstName,\r\n                                                    member.lastName)}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n                                }))\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport utils from '../../services/utils'\r\n\r\n\r\nexport default class VideoPreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.videoContainer = React.createRef();\r\n    }\r\n\r\n    toggleMiniDetails = ev => {\r\n        ev.stopPropagation();\r\n        const miniTask = {\r\n            task: this.props.task,\r\n            boundingClientRect: this.videoContainer.current.getBoundingClientRect(),\r\n            previewType: this.props.task.type,\r\n            column: this.props.column\r\n        };\r\n        this.props.toggleMiniDetails(miniTask);\r\n    }\r\n\r\n    render() {\r\n        const { task, provided, innerRef, isDragging, style, showEditBtn, onTaskId } = this.props;\r\n        return (\r\n            <section ref={this.videoContainer}>\r\n                <div\r\n                    className={\"task-container without-padding flex column\" + (isDragging ? \" isDragging\" : \"\")}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={innerRef}\r\n                    style={style}\r\n                >\r\n                    {task.type === 'video' ?\r\n                        <iframe title={task.id} type='text/html' width=\"252\" height=\"142\" allowFullScreen=\"allowfullscreen\" src={task.url} security=\"restricted\"></iframe> :\r\n                        <img title={task.id} alt=\"task\" src={task.url} />\r\n                    }\r\n                    <div className=\"task-container-labels flex\">\r\n                        {task.labels.map(label => {\r\n                            return <div key={label} className={label + ' small-label'}>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                    <p className=\"task-container-title\">{task.title}</p>\r\n                    {(showEditBtn && (onTaskId === task.id)) ?\r\n                        <CreateIcon className=\"task-container-open-menu\"\r\n                            onClick={e => this.toggleMiniDetails(e)} />\r\n                        : ''}\r\n                    {(task.description !== '') ?\r\n                        <div className=\"grid-item justify-self-center align-self-center\">\r\n                            <SubjectIcon />\r\n                        </div>\r\n                        : <div className=\"grid-item\"></div>\r\n                    }\r\n                    {(task.todos.length > 0) ?\r\n                        <div className=\"grid-item align-center flex\">\r\n                            <div className=\"flex\">\r\n                                <CheckBoxIcon />\r\n                                <p>{task.todosDone + '/' + task.todos.length}</p>\r\n                            </div>\r\n                        </div>\r\n                        : <div className=\"grid-item\"></div>\r\n                    }\r\n                    <div className=\"team-members-container grid-item\">\r\n                        <div className=\"flex justify-end\">\r\n                            {(task.taskTeamMembers.map(member => {\r\n                                return <div key={member._id} className=\"team-member-icon-wrapper flex align-center\" style={{ backgroundColor: '#dfe1e6' }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"flex align-center\" style={{ color: '#172b4d' }}>\r\n                                            {utils.createUserIcon(member.firstName,\r\n                                                member.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            }))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport utils from '../../services/utils'\r\n\r\n\r\nexport default class ImagePreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.imgContainer = React.createRef();\r\n    }\r\n\r\n    toggleMiniDetails = ev => {\r\n        ev.stopPropagation();\r\n        const miniTask = {\r\n            task: this.props.task,\r\n            boundingClientRect: this.imgContainer.current.getBoundingClientRect(),\r\n            previewType: this.props.task.type,\r\n            column: this.props.column,\r\n        };\r\n        this.props.toggleMiniDetails(miniTask);\r\n    }\r\n\r\n    render() {\r\n        const { task, provided, innerRef, isDragging, style, showEditBtn, onTaskId } = this.props;\r\n        return (\r\n            <section ref={this.imgContainer}>\r\n                <div\r\n                    className={\"task-container without-padding flex column align center\" + (isDragging ? \" isDragging\" : \"\")}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={innerRef}\r\n                    style={style}\r\n                >\r\n                    <img title={task.id} alt=\"task\" src={task.url} />\r\n                    <div className=\"task-container-labels flex wrap\">\r\n                        {task.labels.map(label => {\r\n                            return <div key={label} className={label + ' small-label'}>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                    <p className=\"task-container-title\">{task.title}</p>\r\n                    {(showEditBtn && (onTaskId === task.id)) ?\r\n                        <CreateIcon className=\"task-container-open-menu\"\r\n                            onClick={e => this.toggleMiniDetails(e)} />\r\n                        : ''}\r\n                    <div className={\"bottom-container grid-container flex\" + (task.description === '' ? ' row-reverse' : '')}>\r\n                        {(task.description !== '') ?\r\n                            <div className=\"grid-item justify-self-center align-self-center\">\r\n                                <SubjectIcon />\r\n                            </div>\r\n                            : <div className=\"grid-item\"></div>\r\n                        }\r\n                        {(task.todos.length > 0) ?\r\n                            <div className=\"grid-item align-center flex\">\r\n                                <div className=\"flex\">\r\n                                    <CheckBoxIcon />\r\n                                    <p>{task.todosDone + '/' + task.todos.length}</p>\r\n                                </div>\r\n                            </div>\r\n                            : <div className=\"grid-item\"></div>\r\n                        }\r\n                        <div className=\"team-members-container grid-item\">\r\n                            <div className=\"flex justify-end\">\r\n                                {(task.taskTeamMembers.map(member => {\r\n                                    return <div key={member._id} className=\"team-member-icon-wrapper flex align-center\" style={{ backgroundColor: '#dfe1e6' }} >\r\n                                        <div className=\"team-member-icon\">\r\n                                            <p className=\"flex align-center\" style={{ color: '#172b4d' }}>\r\n                                                {utils.createUserIcon(member.firstName,\r\n                                                    member.lastName)}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n                                }))\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport mapDynamicComponents from \"./mapDynamicComponents\"\r\n\r\nexport default class DynamicComponent extends Component {\r\n    state = {\r\n        componentType: 'text',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ componentType: this.props.task.type });\r\n    }\r\n\r\n    getComponent() {\r\n        return mapDynamicComponents[this.state.componentType];\r\n    }\r\n\r\n    render() {\r\n        const Cmp = this.getComponent();\r\n        return <React.Fragment>\r\n            <Cmp\r\n                toggleRender={this.props.toggleRender}\r\n                column={this.props.column}\r\n                provided={this.props.provided}\r\n                innerRef={this.props.innerRef}\r\n                task={this.props.task}\r\n                isDragging={this.props.isDragging}\r\n                style={this.props.style}\r\n                onTaskId={this.props.onTaskId}\r\n                showEditBtn={this.props.showEditBtn}\r\n                toggleMiniDetails={this.props.toggleMiniDetails}\r\n                user={this.props.user}\r\n            >\r\n            </Cmp>\r\n        </React.Fragment>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\n\r\nimport DynamicComponent from './dynamics/DynamicComponent';\r\n\r\nexport default class TasksList extends Component {\r\n\r\n    state = {\r\n        showAddForm: false,\r\n        currTaskId: '',\r\n        onTaskId: '',\r\n        showTaskDetails: false,\r\n    }\r\n\r\n    toggleTaskDetails = id => {\r\n        this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails, currTaskId: id || prevState.currTaskId }));\r\n    }\r\n\r\n    canOpenTaskDetails = taskId => {\r\n        return (this.state.showTaskDetails && this.state.currTaskId === taskId)\r\n    }\r\n\r\n    showEditBtn = (id) => {\r\n        this.setState({ showEditBtn: true, onTaskId: id })\r\n    }\r\n\r\n    hideEditBtn = () => {\r\n        this.setState({ showEditBtn: false })\r\n    }\r\n\r\n    //is it re-rendering at all???\r\n    toggleRender = _ => {\r\n        console.log('tasklist');\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const { tasks, provided, innerRef, isDraggingOver } = this.props;\r\n\r\n        return (\r\n            <section\r\n                className={\"task-list\" + (isDraggingOver ? \" isDraggingOver\" : \"\")}\r\n                {...provided.droppableProps}\r\n                ref={innerRef}\r\n            >\r\n                {tasks.map((task, idx) => (\r\n                    <div key={task.id} className=\"task-list-container\">\r\n                        <Draggable draggableId={task.id} index={idx}>\r\n                            {(provided, snapshot) => (\r\n                                <NaturalDragAnimation\r\n                                    style={provided.draggableProps.style}\r\n                                    snapshot={snapshot}\r\n                                    rotationMultiplier={1.3}\r\n                                >\r\n                                    {style => (\r\n                                        <div onClick={_ => this.props.toggleTaskDetails({ id: task.id, column: this.props.column })}\r\n                                            onMouseEnter={() => this.showEditBtn(task.id)}\r\n                                            onMouseLeave={() => this.hideEditBtn()}\r\n                                        >\r\n                                            <DynamicComponent\r\n                                                toggleRender={this.toggleRender}\r\n                                                provided={provided}\r\n                                                innerRef={provided.innerRef}\r\n                                                task={task}\r\n                                                column={this.props.column}\r\n                                                isDragging={snapshot.isDragging}\r\n                                                style={style}\r\n                                                onTaskId={this.state.onTaskId}\r\n                                                showEditBtn={this.state.showEditBtn}\r\n                                                toggleMiniDetails={this.props.toggleMiniDetails}\r\n                                                user={this.props.user}\r\n                                            >\r\n                                            </DynamicComponent>\r\n                                        </div>\r\n                                    )}\r\n                                </NaturalDragAnimation>\r\n                            )}\r\n                        </Draggable>\r\n                    </div>\r\n                ))}\r\n                {provided.placeholder}\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport utils from '../services/utils'\r\n\r\nexport default class TaskForm extends Component {\r\n\r\n    state = {\r\n        task: {\r\n            id: utils.getRandomId(),\r\n            title: '',\r\n            createdAt: Date.now(),\r\n            dueDate: '',\r\n            importance: '',\r\n            description: '',\r\n            type: 'text',\r\n            labels: [],\r\n            todos: [],\r\n            taskTeamMembers: []\r\n        },\r\n        edit: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nameInput.focus();\r\n        this.setFormDataForEdit();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.task !== this.props.task) {\r\n            this.setFormDataForEdit();\r\n        }\r\n    }\r\n\r\n    setFormDataForEdit() {\r\n        if (this.props.task) {\r\n            const task = this.props.task;\r\n            this.setState({\r\n                task: {\r\n                    id: task.id,\r\n                    title: task.title,\r\n                    createdAt: task.createdAt,\r\n                    dueDate: task.dueDate,\r\n                    importance: task.importance,\r\n                    description: this.props.description,\r\n                    type: task.type,\r\n                    labels: task.labels,\r\n                    todos: task.todos,\r\n                    taskTeamMembers: task.taskTeamMembers\r\n                },\r\n                edit: true\r\n            })\r\n        }\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        const fieldName = ev.target.name;\r\n        const value = ev.target.value;\r\n        this.setState({ task: { ...this.state.task, [fieldName]: value } })\r\n    }\r\n\r\n    save = (ev) => {\r\n        ev.preventDefault();\r\n        this.checkIfUrlAndSave(this.state.task.title);\r\n    }\r\n\r\n    checkIfUrlAndSave = (url) => {\r\n        const youtubeREGEX = /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\r\n        const imgREGEX = /.(jpg|jpeg|png|gif)\\/?$/;\r\n        if (url.match(youtubeREGEX)) {\r\n            const newUrl = url.replace('watch?v=', 'embed/');\r\n            return this.setState(prevState => ({ task: { ...prevState.task, title: '', type: 'video', url: newUrl } }), _ => {\r\n                this.saveTask();\r\n            });\r\n        } else if (url.match(imgREGEX)) {\r\n            return this.setState(prevState => ({ task: { ...prevState.task, title: '', type: 'image', url } }), _ => {\r\n                this.saveTask();\r\n            });\r\n        }\r\n        this.saveTask();\r\n    }\r\n\r\n    saveTask = _ => {\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [this.state.task.id]: this.state.task\r\n            }\r\n        };\r\n        const column = this.props.column;\r\n        const id = this.state.task.id;\r\n        if (!column.taskIds.includes(id)) column.taskIds.push(id);\r\n        const msg = (!this.state.edit) ?\r\n            `The task '${this.state.task.title}' was added by ${this.props.user}` :\r\n            `${this.props.user} edited the task '${this.state.task.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.closeUpdateForm();\r\n        if (this.props.toggleUpdateForm) this.props.toggleUpdateForm();\r\n        if (this.props.toggleTaskDetails) this.props.toggleTaskDetails();\r\n    }\r\n\r\n    textAreaAdjust = ev => {\r\n        ev.target.style.height = \"1px\"\r\n        ev.target.style.height = (25 + ev.target.scrollHeight) + \"px\";\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"task-form\" >\r\n            <form onSubmit={this.save} onClick={ev => ev.stopPropagation()}>\r\n                <div className=\"flex column\" >\r\n\r\n                    <textarea type=\"text\"\r\n                        onKeyUp={this.textAreaAdjust}\r\n                        placeholder=\"Enter a title for this card...\"\r\n                        name=\"title\"\r\n                        ref={(input) => { this.nameInput = input; }}\r\n                        onChange={this.inputChange} value={this.state.task.title} />\r\n                    <div className=\"save-btn-container flex align-center\">\r\n                        <button className=\"task-form-save-btn save capitalize\">add card</button>\r\n                        <CloseIcon className=\"task-form-back-btn\" onClick={(ev) => { ev.stopPropagation(); this.props.closeUpdateForm() }} />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\n\r\n// import AddIcon from '@material-ui/icons/Add';\r\n\r\nimport TopMenuOptions from './TopMenuOptions'\r\nimport TasksList from './TasksList';\r\nimport TaskForm from '../cmps/TaskForm'\r\n\r\nexport default class BoardColumns extends Component {\r\n    state = {\r\n        timer: null,\r\n        title: ''\r\n    }\r\n\r\n    onDelete = (id) => {\r\n        const board = { ...this.props.board };\r\n        const columnOrder = board.columnOrder;\r\n        const column = board.columns[id];\r\n        for (const taskId of column.taskIds) {\r\n            for (const taskKey in board.tasks) {\r\n                if (taskId === taskKey) {\r\n                    delete board.tasks[taskKey];\r\n                }\r\n            }\r\n        }\r\n        delete board.columns[id];\r\n        const idx = columnOrder.findIndex(column => column === id);\r\n        columnOrder.splice(idx, 1);\r\n        const msg = `'${column.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger';\r\n        this.props.updateBoard(board, msg, notificationType);\r\n    }\r\n\r\n    onDragEnd = result => {\r\n        const { destination, source, draggableId, type } = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        };\r\n\r\n        if (destination.droppableId === source.droppableId &&\r\n            destination.index === source.index) {\r\n            return;\r\n        };\r\n\r\n        if (type === 'column') {\r\n            const newColumnOrder = this.props.board.columnOrder.slice();\r\n            newColumnOrder.splice(source.index, 1);\r\n            newColumnOrder.splice(destination.index, 0, draggableId);\r\n            const columnTitle = this.props.board.columns[draggableId].title;\r\n            const newBoard = {\r\n                ...this.props.board,\r\n                columnOrder: newColumnOrder\r\n            }\r\n            const msg = `'${columnTitle}' was moved by ${this.props.user}`;\r\n            const notificationType = 'success';\r\n            return this.props.updateBoard(newBoard, msg, notificationType);\r\n        };\r\n\r\n        const start = this.props.board.columns[source.droppableId];\r\n        const finish = this.props.board.columns[destination.droppableId];\r\n\r\n        if (start === finish) {\r\n            const newTaskIds = start.taskIds.slice();\r\n            newTaskIds.splice(source.index, 1);\r\n            newTaskIds.splice(destination.index, 0, draggableId);\r\n            const newColumn = {\r\n                ...start,\r\n                taskIds: newTaskIds\r\n            };\r\n            const newBoard = {\r\n                ...this.props.board,\r\n                columns: {\r\n                    ...this.props.board.columns,\r\n                    [newColumn.id]: newColumn\r\n                }\r\n            };\r\n            const taskTitle = this.props.board.tasks[draggableId].title;\r\n            const msg = `${this.props.user} changed the position of the task '${taskTitle}'`;\r\n            const notificationType = 'success';\r\n            return this.props.updateBoard(newBoard, msg, notificationType);\r\n        };\r\n\r\n        const startTaskIds = start.taskIds.slice();\r\n        startTaskIds.splice(source.index, 1);\r\n        const newStart = {\r\n            ...start,\r\n            taskIds: startTaskIds\r\n        };\r\n\r\n        const finishTaskIds = finish.taskIds.slice();\r\n        finishTaskIds.splice(destination.index, 0, draggableId);\r\n        const newFinish = {\r\n            ...finish,\r\n            taskIds: finishTaskIds\r\n        };\r\n\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            columns: {\r\n                ...this.props.board.columns,\r\n                [newStart.id]: newStart,\r\n                [newFinish.id]: newFinish\r\n            }\r\n        };\r\n        const taskTitle = this.props.board.tasks[draggableId].title;\r\n        const msg = `${this.props.user} moved the task '${taskTitle}' from '${newStart.title}' to '${newFinish.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    setColumnName = (columnId) => {\r\n        const columnTitle = this.props.board.columns[columnId].title;\r\n        this.setState({ title: columnTitle });\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        this.setState({ title: ev.target.innerText });\r\n    }\r\n\r\n    saveColumnName = (columnId, title) => {\r\n        const columnTitle = this.props.board.columns[columnId].title;\r\n        if (columnTitle === title) return;\r\n\r\n        const updatedBoard = { ...this.props.board };\r\n        updatedBoard.columns[columnId].title = title;\r\n\r\n        const msg = `${this.props.user} changed the name of '${columnTitle}' to '${title}'`;\r\n        const notificationType = 'success';\r\n\r\n        this.props.updateBoard(updatedBoard, msg, notificationType);\r\n    }\r\n\r\n    addCardText(column) {\r\n        return (column.taskIds.length === 0) ? 'Add a card' : 'Add another card';\r\n    }\r\n\r\n    render() {\r\n        const { currColumnId, showTopMenuOptions, showAddForm } = this.props;\r\n        return (\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\r\n                    {provided => (\r\n                        <div\r\n                            className=\"board-columns flex\"\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}>\r\n                            {this.props.board.columnOrder.map((columnKey, idx) => {\r\n\r\n                                const column = this.props.board.columns[columnKey];\r\n                                const tasks = column.taskIds.map(currId => this.props.board.tasks[currId]);\r\n\r\n                                return (\r\n                                    <Draggable draggableId={columnKey} key={column.id} index={idx}>\r\n\r\n                                        {(provided, snapshot) => (\r\n                                            <NaturalDragAnimation\r\n                                                style={provided.draggableProps.style}\r\n                                                snapshot={snapshot}\r\n                                                rotationMultiplier={1.3}\r\n                                            >\r\n                                                {style => (\r\n\r\n                                                    <div\r\n                                                        className=\"board-columns-item\"\r\n                                                        {...provided.draggableProps}\r\n                                                        ref={provided.innerRef}\r\n                                                        style={style}\r\n                                                    >\r\n                                                        <div\r\n                                                            className=\"board-columns-item-header flex align-center space-between\"\r\n                                                            {...provided.dragHandleProps}\r\n                                                        >\r\n                                                            <div className=\"board-columns-item-header-h2-wrapper\">\r\n                                                                <h2\r\n                                                                    contentEditable='true'\r\n                                                                    spellCheck=\"false\"\r\n                                                                    onFocus={() => this.setColumnName(column.id)}\r\n                                                                    onInput={(ev) => this.emitChange(ev)}\r\n                                                                    onBlur={() => this.saveColumnName(column.id, this.state.title)}\r\n                                                                    suppressContentEditableWarning={true}\r\n                                                                >\r\n                                                                    {column.title}\r\n                                                                </h2>\r\n                                                            </div>\r\n\r\n\r\n\r\n                                                            <div className=\"board-columns-item-header-menu-btn-icon\"\r\n                                                                onClick={(ev) => { ev.stopPropagation(); this.props.openEditColumn(column.id) }}> ... </div>\r\n                                                        </div>\r\n\r\n\r\n\r\n                                                        {showTopMenuOptions && (currColumnId === column.id) ?\r\n                                                            <TopMenuOptions\r\n                                                                onDelete={this.onDelete}\r\n                                                                column={column}\r\n                                                                board={this.props.board}\r\n                                                                updateBoard={this.props.updateBoard}\r\n                                                                toggleTopMenuOptions={this.props.closeEditColumn}\r\n                                                                user={this.props.user}\r\n                                                            />\r\n                                                            : ''}\r\n                                                        <Droppable droppableId={column.id} type=\"task\">\r\n                                                            {(provided, snapshot) => {\r\n                                                                return <TasksList\r\n                                                                reRender={this.reRender}\r\n                                                                    board={this.props.board}\r\n                                                                    innerRef={provided.innerRef}\r\n                                                                    provided={provided}\r\n                                                                    tasks={tasks}\r\n                                                                    isDraggingOver={snapshot.isDraggingOver}\r\n                                                                    column={column}\r\n                                                                    toggleTaskDetails={this.props.toggleTaskDetails}\r\n                                                                    updateBoard={this.props.updateBoard}\r\n                                                                    toggleMiniDetails={this.props.toggleMiniDetails}\r\n                                                                    user={this.props.user}\r\n                                                                >\r\n                                                                </TasksList>\r\n                                                            }}\r\n                                                        </Droppable>\r\n                                                        {(!showAddForm || currColumnId !== column.id) &&\r\n                                                            <div className=\"task-list-footer flex align-center\">\r\n                                                                <div className=\"task-list-footer-add-task fill-width\"\r\n                                                                    onClick={(ev) => { ev.stopPropagation(); this.props.openAddForm(column.id) }}>\r\n                                                                    <span className=\"add-icon\">+</span>{this.addCardText(column)}</div>\r\n                                                            </div>\r\n                                                        }\r\n                                                        {showAddForm && (currColumnId === column.id) ?\r\n                                                            <TaskForm\r\n                                                                user={this.props.user}\r\n                                                                board={this.props.board}\r\n                                                                column={column}\r\n                                                                closeUpdateForm={this.props.closeAddForm}\r\n                                                                updateBoard={this.props.updateBoard}\r\n                                                            />\r\n                                                            : ''\r\n                                                        }\r\n                                                    </div>\r\n                                                )}\r\n                                            </NaturalDragAnimation>\r\n                                        )}\r\n                                    </Draggable>\r\n                                )\r\n                            })}\r\n                            {provided.placeholder}\r\n                        </div >)}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nexport default class BoardHistory extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"boardhistory-container column\">\r\n                <div className=\"flex column\">\r\n                    <div className=\"uppercase text-center\">\r\n                        <h2>board history :</h2>\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n                <ul className=\"clean-list\">\r\n                    {this.props.history.map(item => (\r\n                        <li key={item.id}><div className=\"msg\">{item.msg}<br />{moment(item.time).calendar()}</div><hr /></li>\r\n\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport utils from '../services/utils'\r\n\r\nexport default class BoardTeamMembers extends Component {\r\n    state = {\r\n        currentBoardMembers: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({ currentBoardMembers: this.props.board.teamMembers });\r\n    }\r\n\r\n    updateTeamMembers = (user) => {\r\n        const board = this.props.board;\r\n        const teamMembers = board.teamMembers;\r\n        let msg = '';\r\n        let notificationType = '';\r\n        if (teamMembers.find(teamMember => teamMember._id === user._id)) {\r\n            const idx = teamMembers.findIndex(teamMember => teamMember._id === user._id);\r\n            teamMembers.splice(idx, 1);\r\n            msg = `${user.username} was removed from this board`;\r\n            notificationType = 'danger';\r\n        } else {\r\n            teamMembers.push(user);\r\n            msg = `${user.username} was added to this board`;\r\n            notificationType = 'success';\r\n        }\r\n        this.setState({ currentBoardMembers: teamMembers });\r\n        this.props.updateBoard(board, msg, notificationType);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        const currentBoardMembers = this.state.currentBoardMembers;\r\n        const users = this.props.users.filter(user => !currentBoardMembers.find(boardMember => user._id === boardMember._id));\r\n        return (\r\n            <div className=\"board-team-members-container text-center column\"\r\n               onClick={(ev) => this.onStopPropagation(ev)}>\r\n\r\n                <div className=\"members-container-colors-container flex column\">\r\n                    <div className=\"pointer uppercase\"><h2>board members :</h2></div>\r\n                    <hr />\r\n                    {this.state.currentBoardMembers.map(teamMember => {\r\n                        return (\r\n                            <div key={teamMember._id} className=\"team-member flex align-center\"\r\n                                onClick={() => this.updateTeamMembers(teamMember)}>\r\n                                <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"capitalize\" style={{ color: '#172b4d' }}>\r\n                                            {utils.createUserIcon(teamMember.firstName, teamMember.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"capitalize\">{teamMember.firstName} {teamMember.lastName}</span>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n                <div className=\"add-team-members flex column\">\r\n                    <p className=\"pointer uppercase\">add / remove users</p>\r\n                    {users.map(user => {\r\n                        return (\r\n                            <div key={user._id} className=\"team-member flex align-center\"\r\n                                onClick={() => this.updateTeamMembers(user)}>\r\n                                <div className=\"team-member-icon-wrapper flex align-center justify-center\"\r\n                                    style={{ backgroundColor: '#dfe1e6' }}>\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"capitalize\" style={{ color: '#172b4d' }}>\r\n                                            {utils.createUserIcon(user.firstName, user.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"capitalize\">{user.firstName} {user.lastName}</span>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class ColumnAddForm extends Component {\r\n\r\n    state = {\r\n        column: {\r\n            id: utils.getRandomId(),\r\n            title: '',\r\n            taskIds: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nameInput.focus();\r\n        this.setFormDataForEdit();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.column !== this.props.column) {\r\n            this.setFormDataForEdit();\r\n        }\r\n    }\r\n\r\n    setFormDataForEdit() {\r\n        if (this.props.column) {\r\n            const column = this.props.column;\r\n            this.setState({\r\n                column: {\r\n                    id: column.id,\r\n                    title: column.title,\r\n                    taskIds: column.taskIds\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let value = ev.target.value;\r\n        this.setState({ column: { ...this.state.column, [fieldName]: value } })\r\n    }\r\n\r\n    saveColumn = (ev) => {\r\n        ev.preventDefault();\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            columns: {\r\n                ...this.props.board.columns,\r\n                [this.state.column.id]: this.state.column\r\n            }\r\n        };\r\n        const id = this.state.column.id;\r\n        const columnOrder = newBoard.columnOrder;\r\n        if (!columnOrder.includes(id)) columnOrder.push(id);\r\n        const msg = `'${this.state.column.title}' was added by ` + this.props.user;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.toggleAddForm();\r\n    }\r\n\r\n    render() {\r\n        return <form className=\"add-column-form-container flex column space-between\" onSubmit={this.saveColumn}>\r\n            <input\r\n                ref={(input) => { this.nameInput = input; }}\r\n                type='text'\r\n                placeholder='Enter list title...'\r\n                name='title'\r\n                onChange={this.inputChange}\r\n                value={this.state.column.title} />\r\n            <div className=\"save-btn-container flex\">\r\n                <button className=\"add-column-save-btn capitalize\"\r\n                    variant=\"contained\">add list</button>\r\n\r\n                <CloseIcon className=\"add-column-back-to-board flex align-center\"\r\n                    onClick={this.props.toggleAddForm} />\r\n\r\n            </div>\r\n        </form>\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Filter extends Component {\r\n\r\n    state = {\r\n        filterBy: {\r\n            title: '',\r\n            teamMembers: ''\r\n        }\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let value = ev.target.value;\r\n        this.setState(prevState => ({ filterBy: { ...prevState.filterBy, [fieldName]: value } }), () => this.props.onFilter(this.state.filterBy));\r\n    }\r\n\r\n\r\n    render() {\r\n        const teamMembers = this.props.teamMembers;\r\n        return <div className=\"board-page-nav-bar-filters-item all-filters flex\">\r\n\r\n\r\n            <input type=\"text\" placeholder=\"Search card by name\"\r\n                value={this.state.filterBy.title}\r\n                onChange={this.inputChange} name=\"title\">\r\n            </input>\r\n\r\n            <div style={{ background: (this.props.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n            <select name=\"teamMembers\" style={{\r\n                color: (this.props.isDarkBackground) ? 'white' : 'black',\r\n                background: (this.props.isDarkBackground) ? '#0000006b' : '#ffffff8e'\r\n            }} onChange={this.inputChange}>\r\n                <option value=''>all team</option>\r\n                {teamMembers.map(teamMember => (\r\n                    <option className=\"capitalize\" key={teamMember._id} value={`${teamMember.username}`}>{teamMember.firstName} {teamMember.lastName}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Sort extends Component {\r\n\r\n    state = {\r\n        sortBy: '',\r\n        sortOrder: 'asc'\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let value = ev.target.value;\r\n        this.setState(prevState => ({ filterBy: { ...prevState.filterBy, [fieldName]: value } }));\r\n    }\r\n\r\n    onSortBy = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let sortOrder = (this.state.sortOrder === 'asc') ? 'desc' : 'asc';\r\n        this.setState({ sortBy: fieldName, sortOrder: sortOrder }, () => this.props.onSort(this.state.sortBy, this.state.sortOrder));\r\n    }\r\n\r\n    toggleButtonName = () => {\r\n        return (this.state.sortOrder === 'asc') ? 'Newest Cards' : 'Oldest Cards';\r\n    }\r\n\r\n    render() {\r\n        return <div  className=\"board-page-nav-bar-filters-item fill-height\">\r\n            <button className={`nav-btn fill-height\r\n            ${(this.props.isDarkBackground) ? 'dark' : 'light'}`}\r\n                onClick={this.onSortBy}\r\n                name='createdAt'>{this.toggleButtonName()}</button>\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport utils from '../services/utils';\r\n\r\nimport office from '../unsplashdefaultdata/officequery';\r\n\r\nexport default class SplashMenu extends Component {\r\n\r\n    state = {\r\n        splashImagesUrls: office,\r\n        filterByName: ''\r\n    }\r\n\r\n    inputChange = ev => {\r\n        this.setState({ filterByName: ev.target.value });\r\n    }\r\n\r\n    onSave = async () => {\r\n        try {\r\n            const splashImages = await utils.getImagesFromUnsplash(this.state.filterByName)\r\n            let splashImagesUrls = [];\r\n            splashImages.forEach(image => {\r\n                const UrlIndx = splashImagesUrls.findIndex(currUrl => currUrl === image.urls);\r\n                if (UrlIndx >= 0) {\r\n                    splashImagesUrls.splice(UrlIndx, 1)\r\n                } else {\r\n                    splashImagesUrls.push(image.urls);\r\n                }\r\n            })\r\n            this.setState({ splashImagesUrls });\r\n        } catch (err) {\r\n            // console.err(401).send({ error: err });\r\n        }\r\n    }\r\n\r\n    setBoardBackground = (imageUrl) => {\r\n        const newBoard = { ...this.props.board }\r\n        newBoard.boardBgImage = imageUrl.full;\r\n        newBoard.boardBgThumbnail = imageUrl.small;\r\n        const msg = `${this.props.user} changed background image`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    stopPropagation = (ev) => {\r\n        ev.stopPropagation()\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"splash-menu flex column align-center translateLeft\"\r\n            onClick={(ev) => this.stopPropagation(ev)}>\r\n            <div className=\"flex column fill-width filter-container\">\r\n                <div className=\"splash-menu-search-bar fill-width flex justify-center\">\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Search by name...'\r\n                        onChange={this.inputChange}\r\n                    />\r\n                    <button className=\"splash-menu-search-bar-save-btn\" onClick={this.onSave}>\r\n                        <SearchIcon />\r\n                    </button>\r\n                </div>\r\n                <button className=\"splash-menu-search-bar-save-btn upload-btn capitalize\">\r\n                    <input style={{ display: \"none\" }} type=\"file\" id=\"upload-img\" onChange={this.props.onAddImg}></input>\r\n                    <label htmlFor=\"upload-img\">upload image</label>\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"splash-images-container-wrapper\">\r\n                <div className=\"splash-images-container flex wrap fill-width\" >\r\n                    {this.state.splashImagesUrls.map(imageUrl => {\r\n                        return <div key={imageUrl.small} className=\"splash-images-container-item flex wrap\">\r\n                            <img src={imageUrl.small} alt=\"oops.. didn't found it\" onClick={() => this.setBoardBackground(imageUrl)}></img>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DatePicker from 'react-datepicker';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default class DueDate extends React.Component {\r\n    state = {\r\n        dueDate: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDate();\r\n    }\r\n\r\n    setDate = _ => {\r\n        this.setState({ dueDate: this.props.task.dueDate ? new Date(this.props.task.dueDate) : new Date() })\r\n    }\r\n\r\n    // componentWillUnmount() {\r\n    //     this.saveTask();\r\n    // }\r\n\r\n    handleChange = date => {\r\n        this.setState({ dueDate: date });\r\n        this.saveTask();\r\n    }\r\n\r\n    saveTask = _ => {\r\n        const newTask = { ...this.props.task, dueDate: this.state.dueDate.getTime() };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} changed the due date for task '${this.props.task.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"duedate-edit flex column\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}>\r\n                <div className=\"close-btn-container\">\r\n                    <CloseIcon className=\"duedate-edit-close-btn\" onClick={this.props.onToggle} />\r\n                </div>\r\n\r\n                <div className=\"flex column align-center justify-center datepicker-container\">\r\n                    <DatePicker\r\n                        selected={this.state.dueDate}\r\n                        onChange={this.handleChange}\r\n                        showTimeSelect\r\n                        timeFormat=\"HH:mm\"\r\n                        timeIntervals={15}\r\n                        timeCaption=\"Time\"\r\n                        dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                        popperModifiers={{\r\n                            flip: {behavior: ['bottom']},\r\n                            preventOverflow: { enabled: false }\r\n                        }}\r\n                    />\r\n                    <button className=\"add-duedate-btn capitalize\" onClick={this.saveTask}>add</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default class Labels extends Component {\r\n    state = {\r\n        choosenLabels: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setNewState();\r\n    }\r\n\r\n    setNewState = () => {\r\n        this.setState({ choosenLabels: this.props.task.labels })\r\n    }\r\n\r\n    updateChoosenLabels = (ev) => {\r\n        const label = ev.target.classList[0];\r\n        const choosenLabels = this.state.choosenLabels;\r\n        const labelIdx = choosenLabels.findIndex(currLabel => currLabel === label);\r\n        let msg = '';\r\n        let notificationType = '';\r\n        if (labelIdx >= 0) {\r\n            choosenLabels.splice(labelIdx, 1)\r\n            msg = `A label was removed from the task '${this.props.task.title}'`;\r\n            notificationType = 'danger';\r\n        } else {\r\n            choosenLabels.push(label);\r\n            msg = `A label was added to the task '${this.props.task.title}'`;\r\n            notificationType = 'success';\r\n        }\r\n        this.setState({ choosenLabels },() => this.onSave(msg, notificationType));\r\n    }\r\n\r\n    onSave = (msg, notificationType) => {\r\n        const newTask = { ...this.props.task, labels: this.state.choosenLabels };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        let updateStyle = null;\r\n        if (this.props.miniTask) {\r\n            updateStyle = {\r\n                left: 12 + 'px',\r\n                top: 36 + 'px',\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <div className=\"labels-container text-center\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}\r\n                style={{ ...updateStyle }}\r\n            >\r\n                <CloseIcon className=\"labels-container-close-btn\" onClick={this.props.toggleChooseLabels} />\r\n                <p className=\"uppercase\">choose labels</p>\r\n                <hr />\r\n                <div className=\"labels-container-colors-container flex column align-center \">\r\n                    <div className=\"label-color-1 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-2 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-3 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-4 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-5 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-6 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class Members extends Component {\r\n    state = {\r\n        choosenMembers: [],\r\n        availableMembers: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setNewState();\r\n    }\r\n\r\n    setNewState = () => {\r\n        this.setState({ choosenMembers: this.props.task.taskTeamMembers }, this.setAvailableMembers);\r\n    }\r\n\r\n    updateChoosenMembers = (teamMember) => {\r\n        const choosenMembers = this.state.choosenMembers;\r\n        const memberIdx = choosenMembers.findIndex(currMember => currMember._id === teamMember._id);\r\n        let msg = '';\r\n        let notificationType = '';\r\n        if (memberIdx >= 0) {\r\n            choosenMembers.splice(memberIdx, 1);\r\n            msg = `${teamMember.username} was released from the task '${this.props.task.title}'`;\r\n            notificationType = 'danger';\r\n        } else {\r\n            choosenMembers.push(teamMember);\r\n            msg = `${teamMember.username} was asigned to the task '${this.props.task.title}'`;\r\n            notificationType = 'success';\r\n        }\r\n        this.setState({ choosenMembers }, this.setAvailableMembers(msg, notificationType));\r\n    }\r\n\r\n    setAvailableMembers = (msg, notificationType) => {\r\n        const availableMembers = this.props.board.teamMembers.filter(currMember => !this.state.choosenMembers.find(taskMember => taskMember._id === currMember._id));\r\n        this.setState({ availableMembers }, this.onSave(msg, notificationType));\r\n    }\r\n\r\n    onSave = (msg, notificationType) => {\r\n        const newTask = { ...this.props.task, taskTeamMembers: this.state.choosenMembers };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        let updateStyle = null;\r\n        if (this.props.pos) {\r\n            updateStyle = {\r\n                left: 10 + 'px',\r\n                top: 72 + 'px',\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"members-container text-center column\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}\r\n                style={{ ...updateStyle }}>\r\n                <CloseIcon className=\"members-container-close-btn\" onClick={this.props.toggleChooseMembers} />\r\n                <p className=\"uppercase\">assigned members</p>\r\n                <hr />\r\n\r\n                <div className=\"members-container-asign-members-wrapper flex\">\r\n                    <div className=\"members-container-asign-members flex column fill-width\">\r\n\r\n                        {this.props.task.taskTeamMembers.map(member => {\r\n                            return <div key={member._id} className=\"team-member flex\"\r\n                                onClick={() => this.updateChoosenMembers(member)}>\r\n                                <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p>\r\n                                            {utils.createUserIcon(member.firstName,\r\n                                                member.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <p>{member.firstName} {member.lastName}</p>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"add-team-members-wrapper flex column\">\r\n                    <p className=\"uppercase\"> add a team member </p>\r\n                    <div className=\"add-team-members flex column\">\r\n                        {this.state.availableMembers.map(teamMember => {\r\n                            return (\r\n                                <div key={teamMember._id}\r\n                                    className=\"team-member flex align-center\"\r\n                                    onClick={() => this.updateChoosenMembers(teamMember)}>\r\n                                    <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                                        <div className=\"team-member-icon\">\r\n                                            <p>\r\n                                                {utils.createUserIcon(teamMember.firstName,\r\n                                                    teamMember.lastName)}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <p>{teamMember.firstName} {teamMember.lastName}</p>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div >\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport utils from '../services/utils'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default class Todo extends Component {\r\n    state = {\r\n        todos: [],\r\n        text: '',\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setNewState();\r\n    }\r\n\r\n    setNewState = () => {\r\n        this.setState({ todos: this.props.task.todos })\r\n    }\r\n\r\n    updateTodo = (ev) => {\r\n        this.setState({ text: ev.target.value })\r\n    }\r\n\r\n\r\n    onSaveTodo = async () => {\r\n        const todo = {\r\n            text: this.state.text,\r\n            isDone: false,\r\n            id: utils.getRandomId()\r\n        }\r\n\r\n        const todos = this.state.todos;\r\n        todos.push(todo);\r\n        this.setState({ todos });\r\n        const newTask = { ...this.props.task, todos: this.state.todos };\r\n        const newBoard = { ...this.props.board, tasks: { ...this.props.board.tasks, [newTask.id]: newTask } }\r\n        const taskTitle = this.props.task.title;\r\n        const msg = `${this.props.user} added a new todo to the task '${taskTitle}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.updateProgressBar();\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"check-list-item-container text-center\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}\r\n            >\r\n                <div className=\"checklist-closebtn-container\">\r\n                    <CloseIcon className=\"check-list-item-container-close-btn pointer\" onClick={this.props.toggleTodos} />\r\n                </div>\r\n\r\n                <div className=\"input-container flex column justify-center align-center\">\r\n                    <input className=\"text-center\" type=\"text\" placeholder=\"add new todo\"\r\n                        value={this.state.text}\r\n                        onChange={this.updateTodo} name=\"text\">\r\n                    </input>\r\n                    <button className=\"save-todo-btn capitalize\" onClick={this.onSaveTodo}>add</button>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\n//icons :\r\n\r\nimport NotesIcon from '@material-ui/icons/Notes';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';\r\nimport LabelOutlinedIcon from '@material-ui/icons/LabelOutlined';\r\nimport AssignmentTurnedInOutlinedIcon from '@material-ui/icons/AssignmentTurnedInOutlined';\r\nimport EventOutlinedIcon from '@material-ui/icons/EventOutlined';\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined';\r\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\r\nimport ImageOutlinedIcon from '@material-ui/icons/ImageOutlined';\r\n\r\nimport DueDate from './DueDate';\r\nimport Labels from './Labels';\r\nimport Members from './Members';\r\nimport Todos from './Todos';\r\n\r\nimport utils from '../services/utils'\r\n\r\nexport default class TaskDetails extends Component {\r\n    state = {\r\n        description: '',\r\n        teamMembers: [],\r\n        choosenMembers: [],\r\n        choosenlabels: [],\r\n        showActivity: false,\r\n        showEditDescriptionForm: false,\r\n        toggleChooseLabels: false,\r\n        toggleChooseMembers: false,\r\n        toggleTodos: false,\r\n        onToggleDueDate: false,\r\n        toggleDeleteTodo: false,\r\n        progressWidth: 0,\r\n        currTodoId: '',\r\n        taskTitle: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        const currTask = this.props.board.tasks[this.props.taskId]\r\n        this.setState({ description: currTask.description }, this.updateProgressBar);\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ description: targetValue });\r\n    }\r\n\r\n    openUpdateDescriptionForm = () => {\r\n        this.setState(prevState => ({ showEditDescriptionForm: true }))\r\n    }\r\n\r\n    onToggleDueDate = ev => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ onToggleDueDate: !prevState.onToggleDueDate }));\r\n    }\r\n\r\n\r\n    closeUpdateDescriptionForm = () => {\r\n        this.setState({ showEditDescriptionForm: false })\r\n    }\r\n\r\n    onStopPropagationAndCloseOptions = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState({\r\n            toggleChooseLabels: false,\r\n            toggleChooseMembers: false\r\n        })\r\n    }\r\n\r\n    toggleChooseLabels = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ toggleChooseLabels: !prevState.toggleChooseLabels }))\r\n    }\r\n\r\n    onSaveDescription = (ev, task) => {\r\n        ev.stopPropagation();\r\n        const newTask = { ...task, description: this.state.description };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `The description of '${task.title}' was changed by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.closeUpdateDescriptionForm();\r\n    }\r\n\r\n    toggleChooseMembers = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ toggleChooseMembers: !prevState.toggleChooseMembers }))\r\n    }\r\n\r\n    toggleTodos = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ toggleTodos: !prevState.toggleTodos }))\r\n    }\r\n\r\n    onDuplicateTask = (column, task) => {\r\n        const newTask = { ...task, id: utils.getRandomId(), labels: [...task.labels], todos: [...task.todos], taskTeamMembers: [...task.taskTeamMembers]};\r\n        column.taskIds.push(newTask.id);\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `The task '${task.title}' was duplicated by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.toggleTaskDetails();\r\n    }\r\n\r\n    onDeleteTask = (column, task) => {\r\n        const board = { ...this.props.board };\r\n        const taskIds = column.taskIds;\r\n        const idx = taskIds.findIndex(taskId => taskId === task.id);\r\n        taskIds.splice(idx, 1);\r\n        delete board.tasks[task.id];\r\n        const msg = `'${task.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger';\r\n        this.props.updateBoard(board, msg, notificationType);\r\n        this.props.toggleTaskDetails();\r\n    }\r\n\r\n    toggleTodoDone = async (todo) => {\r\n        todo.isDone = !todo.isDone;\r\n        let newTask = { ...this.props.board.tasks[this.props.taskId] };\r\n        const todos = newTask.todos;\r\n        const idx = todos.findIndex(currTodo => (currTodo.id === todo.id));\r\n        todos[idx].isDone = todo.isDone;\r\n        let doneTodosCounter = newTask.todos.filter(todo => (todo.isDone)).length;\r\n        newTask.todosDone = doneTodosCounter;\r\n        let msg = '';\r\n        let notificationType = '';\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        if (todo.isDone) {\r\n            msg = `The subtask '${todo.text}' in '${newTask.title}' was completed by ${this.props.user}`;\r\n            notificationType = 'success';\r\n        } else {\r\n            msg = `The subtask '${todo.text}' in '${newTask.title}' was remarked as uncompleted by ${this.props.user}`;\r\n            notificationType = 'danger';\r\n        }\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.updateProgressBar()\r\n    }\r\n\r\n    updateProgressBar = () => {\r\n        let start = this.state.progressWidth;\r\n        let task = this.props.board.tasks[this.props.taskId];\r\n        let doneTodosCounter = task.todos.filter(todo => (todo.isDone)).length;\r\n        task.todosDone = doneTodosCounter;\r\n\r\n        let interval;\r\n        let progressWidth = Math.round((doneTodosCounter / task.todos.length) * 100);\r\n        if (!progressWidth && !start) return;\r\n        if (start < progressWidth) {\r\n            interval = setInterval(() => {\r\n                if (start >= progressWidth) {\r\n                    clearInterval(interval);\r\n                } else {\r\n                    start++;\r\n                    this.setState({ progressWidth: start })\r\n                }\r\n            }, 10);\r\n        } else {\r\n            interval = setInterval(() => {\r\n                if (start <= progressWidth) {\r\n                    clearInterval(interval);\r\n                } else {\r\n                    start--;\r\n                    this.setState({ progressWidth: start })\r\n                }\r\n            }, 10);\r\n        }\r\n    }\r\n\r\n    deleteTodo = (todoId) => {\r\n        const task = this.props.board.tasks[this.props.taskId];\r\n        let todos = task.todos;\r\n        const idx = todos.findIndex(currTodo => (currTodo.id === todoId));\r\n        const deletedTodo = todos[idx];\r\n        todos.splice(idx, 1);\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [task.id]: task\r\n            }\r\n        }\r\n        const msg = `The subtask '${deletedTodo.text}' in '${task.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.updateProgressBar();\r\n        this.hideDeleteTodoButton(todoId);\r\n    }\r\n\r\n    showDeleteTodoButton = (todoId) => {\r\n        this.setState({ toggleDeleteTodo: true, currTodoId: todoId });\r\n    }\r\n\r\n    hideDeleteTodoButton = (todoId) => {\r\n        this.setState({ toggleDeleteTodo: false, currTodoId: todoId });\r\n    }\r\n\r\n    setTaskName = (taskId) => {\r\n        const taskTitle = this.props.board.tasks[taskId].title;\r\n        this.setState({ taskTitle: taskTitle });\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        this.setState({ taskTitle: ev.target.innerText });\r\n    }\r\n\r\n    changeDescription = (ev) => {\r\n        this.setState({ description: ev.target.value });\r\n    }\r\n\r\n    saveTaskName = (taskId, title) => {\r\n        const taskTitle = this.props.board.tasks[taskId].title;\r\n        if (taskTitle === title) return;\r\n\r\n        const updatedBoard = { ...this.props.board };\r\n        updatedBoard.tasks[taskId].title = title;\r\n\r\n        const msg = `${this.props.user} changed the title of the task '${taskTitle}' to '${title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(updatedBoard, msg, notificationType);\r\n    }\r\n\r\n\r\n\r\n    uploadImage = async (ev) => {\r\n        const task = this.props.board.tasks[this.props.taskId];\r\n        const newColumn = { ...this.props.column }\r\n        newColumn.taskIds = this.props.column.taskIds.slice();\r\n        const file = ev.target.files[0];\r\n        const imageUrl = await utils.uploadImg(file)\r\n        const newTask = { ...task }\r\n        newTask.type = 'image';\r\n        newTask.url = imageUrl;\r\n        newTask.taskTeamMembers = [...task.taskTeamMembers];\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            columns: {\r\n                ...this.props.board.columns,\r\n                [newColumn.id]: newColumn\r\n            },\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n\r\n        const msg = `${this.props.user} changed task ${this.props.board.tasks[this.props.taskId]}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.toggleTaskDetails();\r\n    }\r\n\r\n\r\n    render() {\r\n        const task = this.props.board.tasks[this.props.taskId];\r\n        const { column } = this.props;\r\n        return (\r\n            <div className=\"screen flex align-center justify-center\" onClick={() => this.props.toggleTaskDetails()}>\r\n                <div className=\"task-details-container-wrapper flex\" onClick={(ev) => this.onStopPropagationAndCloseOptions(ev)}>\r\n                    <div className=\"task-details-container flex\">\r\n                        <CloseIcon className=\"add-column-back-to-board   flex align-center\"\r\n                            onClick={() => this.props.toggleTaskDetails()} />\r\n                        <div className=\"task-details-container-main full\">\r\n                            <header className=\"task-details-container-header\">\r\n                                <DescriptionOutlinedIcon style={{\r\n                                    color: '#42526e', position: 'absolute',\r\n                                    top: '10px',\r\n                                    left: '12px'\r\n                                }} />\r\n                                <h2\r\n                                    contentEditable='true'\r\n                                    spellCheck=\"false\"\r\n                                    onFocus={() => this.setTaskName(task.id)}\r\n                                    onInput={(ev) => this.emitChange(ev)}\r\n                                    onBlur={() => this.saveTaskName(task.id, this.state.taskTitle)}\r\n                                    suppressContentEditableWarning={true}\r\n                                >{task.title}</h2>\r\n                                <div className=\"task-details-container-in-list flex\">\r\n                                    <p>in list <span>{column.title}</span></p>\r\n                                </div>\r\n                            </header>\r\n\r\n                            <div className=\"chosen-labels-container\">\r\n                                {this.state.toggleChooseLabels ?\r\n                                    <Labels\r\n                                        toggleChooseLabels={this.toggleChooseLabels}\r\n                                        board={this.props.board}\r\n                                        task={task}\r\n                                        updateBoard={this.props.updateBoard}\r\n                                    /> : ''\r\n                                }\r\n                                {task.labels.length !== 0 && <h3 className=\"uppercase\" style={{\r\n                                    fontSize: '.75rem',\r\n                                    fontWeight: 500,\r\n                                    letterSpacing: '.04em',\r\n                                }}>Labels</h3>}\r\n                                <div className=\"labels-choosen-container flex\">\r\n                                    {\r\n                                        task.labels.map(label => {\r\n                                            return <div key={label} className={label + ' medium-label'}>\r\n                                            </div>\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"task-details-container-members-container\">\r\n                                {this.state.toggleChooseMembers ?\r\n                                    <Members\r\n                                        toggleChooseMembers={this.toggleChooseMembers}\r\n                                        board={this.props.board}\r\n                                        task={task}\r\n                                        updateBoard={this.props.updateBoard}\r\n                                        users={this.props.users}\r\n                                    /> : ''\r\n                                }\r\n                                {task.taskTeamMembers.length !== 0 && <h3 className=\"uppercase\" style={{\r\n                                    fontSize: '.75rem',\r\n                                    fontWeight: 500,\r\n                                    letterSpacing: '.04em'\r\n                                }}>members</h3>}\r\n                                <div className=\"flex\">\r\n                                    {\r\n                                        task.taskTeamMembers.map(member => {\r\n                                            return <Avatar key={member._id} style={{\r\n                                                backgroundColor: '#dfe1e6',\r\n                                                height: 28,\r\n                                                width: 28,\r\n                                                fontSize: '0.85rem',\r\n                                                margin: '4px 4px 4px 0',\r\n                                                color: '#172b4d',\r\n                                                fontWeight: 600,\r\n                                                textAlign: 'center'\r\n                                            }}>\r\n                                                {utils.createUserIcon(member.firstName,\r\n                                                    member.lastName)}\r\n                                            </Avatar>\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"task-details-container-check-list-container\">\r\n                                {this.state.toggleTodos ?\r\n                                    <Todos\r\n                                        toggleTodos={this.toggleTodos}\r\n                                        board={this.props.board}\r\n                                        user={this.props.user}\r\n                                        task={task}\r\n                                        updateBoard={this.props.updateBoard}\r\n                                        updateProgressBar={this.updateProgressBar}\r\n                                    /> : ''\r\n                                }\r\n                                <AssignmentTurnedInOutlinedIcon\r\n                                    style={{\r\n                                        color: '#42526e',\r\n                                        position: 'relative',\r\n                                        top: '35px',\r\n                                        right: '44px',\r\n                                    }}\r\n                                />\r\n                                <h2>Checklist</h2>\r\n\r\n                                {task.todos ?\r\n                                    <div className=\"check-list-container flex column\">\r\n                                        {task.todos.map(todo => {\r\n                                            return <div key={todo.id} className=\"todo-item flex align-center space-between\" onMouseEnter={() => this.showDeleteTodoButton(todo.id)}\r\n                                                onMouseLeave={() => this.hideDeleteTodoButton(todo.id)}>\r\n                                                <div className=\"flex align-center\">\r\n                                                    <input type=\"checkbox\" onChange={() => this.toggleTodoDone(todo)} checked={todo.isDone ? 'checked' : ''}>\r\n                                                    </input>\r\n                                                    <p className={todo.isDone ? \"text-decoration\" : \"\"}>\r\n                                                        {todo.text}\r\n                                                    </p>\r\n                                                </div>\r\n                                                <DeleteOutlineIcon\r\n                                                    onClick={() => this.deleteTodo(todo.id)}\r\n                                                    className=\"pointer delete-btn\"\r\n                                                    style={{ display: this.state.toggleDeleteTodo && this.state.currTodoId === todo.id ? 'block' : 'none' }}\r\n                                                />\r\n                                            </div>\r\n                                        })\r\n                                        }\r\n                                        <div className=\"check-list-progress\">\r\n                                            <div className=\"progress fill-height flex align-center\" style={{ width: this.state.progressWidth + \"%\" }} >\r\n                                                <small className=\"fill-width text-center\">{this.state.progressWidth + \"%\"}</small>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div> : ''\r\n                                }\r\n                            </div>\r\n                            <div className=\"task-details-container-duedate-container\">\r\n                                <EventOutlinedIcon style={{\r\n                                    color: '#42526e', position: 'relative',\r\n                                    top: '35px',\r\n                                    right: '44px'\r\n                                }} />\r\n                                <h2>Due Date</h2>\r\n                                {(task.dueDate) ?\r\n                                    <p>{moment(task.dueDate).format(\"MMMM Do YYYY, hh:mm a\")}</p> :\r\n                                    <p>This task doesn't have a due date yet</p>\r\n                                }\r\n                                {this.state.onToggleDueDate ? <DueDate\r\n                                    task={task}\r\n                                    onToggle={this.onToggleDueDate}\r\n                                    board={this.props.board}\r\n                                    updateBoard={this.props.updateBoard}\r\n                                    updateProgressBar={this.updateProgressBar}\r\n\r\n                                    user={this.props.user}\r\n                                /> : ''}\r\n                            </div>\r\n\r\n                            <div className=\"task-details-container-description\">\r\n                                <NotesIcon style={{\r\n                                    color: '#42526e', position: 'relative',\r\n                                    top: '35px',\r\n                                    right: '44px'\r\n                                }} />\r\n                                <h2>Description</h2>\r\n                                <textarea className=\"fill-width\"\r\n                                    name=\"description\"\r\n                                    cols=\"40\"\r\n                                    onChange={this.changeDescription}\r\n                                    onClick={this.openUpdateDescriptionForm}\r\n                                    value={this.state.description}\r\n                                    spellCheck=\"false\"\r\n                                    placeholder=\"Add a more detailed description...\">\r\n                                </textarea>\r\n                                {this.state.showEditDescriptionForm ?\r\n                                    <div className=\"flex align-center\">\r\n                                        <button className=\"task-form-save-btn uppercase\" onClick={(ev) => this.onSaveDescription(ev, task)}>save</button>\r\n                                        <CloseIcon className=\"task-form-back-btn\" onClick={this.closeUpdateDescriptionForm} />\r\n                                    </div> : ''\r\n                                }\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"task-details-container-overall-options\">\r\n                            <div className=\"task-details-container-add-to-card-options container\">\r\n                                <h3 className=\"uppercase\" style={{\r\n                                    fontSize: '0.75rem',\r\n                                    fontWeight: 500,\r\n                                    letterSpacing: '0.04em'\r\n                                }}>add to card</h3>\r\n                                <div className=\"task-details-container-add-to-card-options flex column\">\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\" onClick={ev => this.toggleChooseLabels(ev)}>\r\n                                        <LabelOutlinedIcon />\r\n                                        <p className=\"capitalize\" >labels</p>\r\n                                    </div>\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\" onClick={ev => this.toggleChooseMembers(ev)} >\r\n                                        <PersonAddOutlinedIcon />\r\n                                        <p className=\"capitalize\">members</p>\r\n                                    </div>\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\" onClick={ev => this.toggleTodos(ev)} >\r\n                                        <AssignmentTurnedInOutlinedIcon />\r\n                                        <p className=\"capitalize\">check list</p>\r\n                                    </div>\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\" onClick={ev => this.onToggleDueDate(ev)}>\r\n                                        <EventOutlinedIcon />\r\n                                        <p className=\"capitalize\">due date</p>\r\n                                    </div>\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\">\r\n                                        <ImageOutlinedIcon />\r\n                                        <input style={{ display: \"none\" }} type=\"file\" id=\"upload-img-2\" onChange={ev => this.uploadImage(ev)}></input>\r\n                                        <label htmlFor=\"upload-img-2\"><p className=\"capitalize\">\r\n                                            upload image\r\n                                            </p></label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"task-details-container-actions-options container flex column \">\r\n                                <h3 className=\"uppercase\" style={{\r\n                                    fontSize: '0.75rem',\r\n                                    fontWeight: 500,\r\n                                    letterSpacing: '0.04em'\r\n                                }}>actions</h3>\r\n                                <div className=\"task-details-container-actions-options-btn flex align-center\" onClick={() => this.onDuplicateTask(column, task)}>\r\n                                    <FileCopyOutlinedIcon />\r\n                                    <p className=\"capitalize\">duplicate</p>\r\n                                </div>\r\n                                <div className=\"task-details-container-actions-options-btn flex align-center\" onClick={() => this.onDeleteTask(column, task)}>\r\n                                    <DeleteOutlineOutlinedIcon />\r\n                                    <p className=\"capitalize\">delete</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class MiniDetailsButton extends Component {\r\n\r\n    render() {\r\n        const { text, onClick } = this.props;\r\n        return <div className=\"mini-details-editor-button\"\r\n            onClick={onClick}>\r\n            <p>{text}</p>\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsButton from './MiniDetailsButton';\r\nimport Labels from './Labels';\r\nimport DueDate from './DueDate';\r\nimport Members from './Members';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class MiniDetailsEditor extends Component {\r\n    state = {\r\n        onToggleLabels: false,\r\n        onToggleDueDate: false,\r\n        onToggleMembers: false\r\n    }\r\n\r\n    onToggleLabels = _ => {\r\n        this.setState(prevState => ({ onToggleLabels: !prevState.onToggleLabels }));\r\n    }\r\n\r\n    onToggleDueDate = _ => {\r\n        this.setState(prevState => ({ onToggleDueDate: !prevState.onToggleDueDate }));\r\n    }\r\n\r\n    onToggleMembers = _ => {\r\n        this.setState(prevState => ({ onToggleMembers: !prevState.onToggleMembers }));\r\n    }\r\n\r\n    onDuplicateTask = _ => {\r\n        const { task } = this.props.miniTask\r\n        const newTask = { ...task, id: utils.getRandomId(), labels: [...task.labels], todos: [...task.todos], taskTeamMembers: [...task.taskTeamMembers]};\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        newBoard.columns[this.props.miniTask.column.id].taskIds.push(newTask.id);\r\n        const msg = `The task '${task.title}' was duplicated by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    onDelete = _ => {\r\n        const { miniTask } = this.props;\r\n        const board = { ...this.props.board };\r\n        const column = this.props.miniTask.column;\r\n        const taskIds = column.taskIds;\r\n        const task = board.tasks[miniTask.task.id];\r\n        const idx = taskIds.findIndex(taskId => taskId === miniTask.task.id);\r\n        taskIds.splice(idx, 1);\r\n        delete board.tasks[miniTask.task.id];\r\n        const msg = `'${task.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger'; \r\n        this.props.updateBoard(board, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { miniTask } = this.props;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        let top = boundingClientRect.top;\r\n\r\n        if(top + 180 > window.innerHeight){\r\n            top = window.innerHeight - 180;\r\n        }\r\n\r\n        return <div\r\n            className=\"mini-details-editor\"\r\n            style={{\r\n                left: (boundingClientRect.left + 265) + 'px',\r\n                top: (top + 1) + 'px'\r\n            }}\r\n        >\r\n            <MiniDetailsButton text=\"🖊️ Edit Labels\" onClick={this.onToggleLabels} />\r\n            {this.state.onToggleLabels ? <Labels\r\n                miniTask={miniTask}\r\n                task={miniTask.task}\r\n                toggleChooseLabels={this.onToggleLabels}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard} /> : ''}\r\n            <MiniDetailsButton text=\"🎭 Change Members\" onClick={this.onToggleMembers} />\r\n            {this.state.onToggleMembers ? <Members\r\n                pos={true}\r\n                task={miniTask.task}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                toggleChooseMembers={this.onToggleMembers}\r\n            /> : ''}\r\n            <MiniDetailsButton text=\"📅 Change Due Date\" onClick={this.onToggleDueDate} />\r\n            {this.state.onToggleDueDate ? <DueDate\r\n                task={miniTask.task}\r\n                onToggle={this.onToggleDueDate}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n            /> : ''}\r\n            <MiniDetailsButton text=\"⎘ Duplicate Task\" onClick={this.onDuplicateTask} />\r\n            <MiniDetailsButton text=\"🗑️ Delete Task\" onClick={this.onDelete} />\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport default function ScreenFilter(props) {\r\n    return (\r\n        <div className=\"screen-filter\" onClick={_ => props.onToggle()}></div>\r\n    )\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsEditor from '../MiniDetailsEditor';\r\nimport ScreenFilter from '../ScreenFilter';\r\n\r\nexport default class MiniTextDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textArea = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        title: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textArea.current.focus();\r\n    }\r\n\r\n    handleFocus = ev => {\r\n        ev.target.select();\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ title: targetValue });\r\n    }\r\n\r\n    onSave = _ => {\r\n        const newTask = { ...this.props.miniTask.task, title: this.state.title ? this.state.title : this.props.miniTask.task.title };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} changed the title of the task '${this.props.miniTask.task.title}' to '${this.state.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.miniTask;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        const labelLen = task.labels.length;\r\n        let height = boundingClientRect.height;\r\n        let top = boundingClientRect.top;\r\n\r\n        if (height + top > window.innerHeight) {\r\n            height = (window.innerHeight - top - 50) > 248 ? window.innerHeight - top - 50 : 248;\r\n        }\r\n        if (boundingClientRect.top > (window.innerHeight - (window.innerHeight / 4))) {\r\n            top = window.innerHeight - height - 50;\r\n        }\r\n        \r\n        return <div className=\"mini-details-container\">\r\n            <div\r\n                className=\"mini-details\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: top + 'px',\r\n                    height: height + 'px'\r\n                }}\r\n            >\r\n                <div className=\"task-container-labels flex\">\r\n                    {task.labels.map(label => {\r\n                        return <div key={label} className={label + ' small-label'}>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <textarea\r\n                    name=\"title\"\r\n                    className={\"text-area\" + (labelLen > 0 ? ' preview-label' : '')}\r\n                    defaultValue={task.title}\r\n                    ref={this.textArea}\r\n                    onFocus={this.handleFocus}\r\n                    onInput={this.emitChange}\r\n                    placeholder=\"Add a card title...\"\r\n                >\r\n                </textarea>\r\n            </div>\r\n            <button\r\n                className=\"mini-details-save-btn\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: (top + height + 10) + 'px'\r\n                }}\r\n                onClick={this.onSave}\r\n            >SAVE</button>\r\n            <MiniDetailsEditor\r\n                user={this.props.user}\r\n                miniTask={this.props.miniTask}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle}\r\n            />\r\n            <ScreenFilter onToggle={this.props.onToggle} />\r\n        </div >\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsEditor from '../MiniDetailsEditor';\r\nimport ScreenFilter from '../ScreenFilter';\r\n\r\nexport default class MiniImageDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textArea = React.createRef();\r\n        this.imgContainer = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        title: '',\r\n        imgHeight: 220\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textArea.current.focus();\r\n        this.setState({ imgHeight: this.imgContainer.current.getBoundingClientRect().height });\r\n    }\r\n\r\n    handleFocus = ev => {\r\n        ev.target.select();\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ title: targetValue });\r\n    }\r\n\r\n    onSave = _ => {\r\n        const newTask = { ...this.props.miniTask.task, title: this.state.title ? this.state.title : this.props.miniTask.task.title };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} updated the task '${this.props.miniTask.task.title}' to '${this.state.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.miniTask;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        const labelLen = task.labels.length;\r\n        let height = boundingClientRect.height;\r\n        let top = boundingClientRect.top;\r\n        if (height + top > window.innerHeight) {\r\n            height = (window.innerHeight - top - 50) > 252 ? window.innerHeight - top - 50 : 252;\r\n        }\r\n        if (boundingClientRect.top > (window.innerHeight - (window.innerHeight / 4))) {\r\n            top = window.innerHeight - height - 50;\r\n        }\r\n\r\n        return <div className=\"mini-details-container\">\r\n            <div\r\n                className=\"mini-details\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: top + 'px',\r\n                    height: height + 'px'\r\n                }}\r\n            >\r\n                <img ref={this.imgContainer} title={task.id} alt=\"task\" src={task.url} />\r\n                <div className=\"task-container-labels flex\">\r\n                    {task.labels.map(label => {\r\n                        return <div key={label} className={label + ' small-label'}>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <textarea\r\n                    name=\"title\"\r\n                    className={\"text-area\" + (labelLen > 0 ? ' preview-label' : '')}\r\n                    style={{\r\n                        height: height - this.state.imgHeight + 'px',\r\n                        position: 'relative',\r\n                    }}\r\n                    defaultValue={task.title}\r\n                    ref={this.textArea}\r\n                    onFocus={this.handleFocus}\r\n                    onInput={this.emitChange}\r\n                    placeholder=\"Add a card title...\"\r\n                >\r\n                </textarea>\r\n            </div>\r\n            <button\r\n                className=\"mini-details-save-btn\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: (top + height + (task.title ? 10 : 32)) + 'px'\r\n                }}\r\n                onClick={this.onSave}\r\n            >SAVE</button>\r\n            <MiniDetailsEditor\r\n                user={this.props.user}\r\n                miniTask={this.props.miniTask}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle} />\r\n            <ScreenFilter onToggle={this.props.onToggle} />\r\n        </div >\r\n    }\r\n}","import MiniTextDetails from './MiniTextDetails';\r\nimport MiniImageDetails from './MiniImageDetails';\r\nimport MiniVideoDetails from './MiniVideoDetails';\r\n\r\nexport default {\r\n    text: MiniTextDetails,\r\n    video: MiniVideoDetails,\r\n    image: MiniImageDetails\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsEditor from '../MiniDetailsEditor';\r\nimport ScreenFilter from '../ScreenFilter';\r\n\r\nexport default class MiniVideoDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textArea = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        title: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textArea.current.focus();\r\n    }\r\n\r\n    handleFocus = ev => {\r\n        ev.target.select();\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ title: targetValue });\r\n    }\r\n\r\n    onSave = _ => {\r\n        const newTask = { ...this.props.miniTask.task, title: this.state.title ? this.state.title : this.props.miniTask.task.title };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} updated the task '${this.props.miniTask.task.title}' to '${this.state.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.miniTask;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        const videoDimensions = { height: 140, width: 246 };\r\n        const labelLen = task.labels.length;\r\n        let height = boundingClientRect.height;\r\n        let top = boundingClientRect.top;\r\n\r\n        if (height + top > window.innerHeight) {\r\n            height = (window.innerHeight - top - 50) > 248 ? window.innerHeight - top - 50 : 248;\r\n        }\r\n        if (boundingClientRect.top > (window.innerHeight - (window.innerHeight / 4))) {\r\n            top = window.innerHeight - height - 50;\r\n        }\r\n        return <div className=\"mini-details-container\">\r\n            <div\r\n                className=\"mini-details\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: top + 'px',\r\n                    height: height + 'px'\r\n                }}\r\n            >\r\n                {task.type === 'video' ?\r\n                    <iframe title={task.id}\r\n                        type='text/html' width={videoDimensions.width}\r\n                        height={videoDimensions.height}\r\n                        src={task.url}\r\n                        allowFullScreen=\"allowfullscreen\"></iframe>\r\n                    : <img ref={this.imgContainer} title={task.id} alt=\"task\" src={task.url} />\r\n                }\r\n                <div className=\"task-container-labels flex\">\r\n                    {task.labels.map(label => {\r\n                        return <div key={label} className={label + ' small-label'}>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <textarea\r\n                    name=\"title\"\r\n                    className={\"text-area\" + (labelLen > 0 ? ' preview-label' : '')}\r\n                    style={{\r\n                        height: height - videoDimensions.height,\r\n                        position: 'relative',\r\n                        bottom: 14 + 'px'\r\n                    }}\r\n                    defaultValue={task.title}\r\n                    ref={this.textArea}\r\n                    onFocus={this.handleFocus}\r\n                    onInput={this.emitChange}\r\n                    placeholder=\"Add a card title...\"\r\n                >\r\n                </textarea>\r\n            </div>\r\n            <button\r\n                className=\"mini-details-save-btn\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: (top + height + (task.title ? 10 : 32)) + 'px'\r\n                }}\r\n                onClick={this.onSave}\r\n            >SAVE</button>\r\n            <MiniDetailsEditor\r\n                user={this.props.user}\r\n                miniTask={this.props.miniTask}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle} />\r\n            <ScreenFilter onToggle={this.props.onToggle} />\r\n        </div >\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport mapDynamicMiniComponents from \"./mapDynamicMiniComponents\"\r\n\r\nexport default class DynamicMiniComponent extends Component {\r\n    state = {\r\n        previewType: 'text'\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ previewType: this.props.miniTask.previewType });\r\n    }\r\n\r\n    getComponent() {\r\n        return mapDynamicMiniComponents[this.state.previewType];\r\n    }\r\n\r\n    render() {\r\n        const Cmp = this.getComponent();\r\n        return <React.Fragment>\r\n            <Cmp\r\n                miniTask={this.props.miniTask}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle}\r\n                board={this.props.board}\r\n                user={this.props.user}\r\n            >\r\n            </Cmp>\r\n        </React.Fragment>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { store } from 'react-notifications-component';\r\nimport FastAverageColor from 'fast-average-color';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport LoadPage from '../cmps/LoadPage';\r\nimport BoardColumns from '../cmps/BoardColumns';\r\nimport BoardHistory from '../cmps/BoardHistory';\r\nimport BoardTeamMembers from '../cmps/BoardTeamMembers';\r\nimport ColumnAddForm from '../cmps/ColumnAddForm';\r\nimport Login from '../cmps/Login';\r\nimport Filter from '../cmps/Filter';\r\nimport Sort from '../cmps/Sort';\r\nimport SplashMenu from '../cmps/SplashMenu';\r\nimport TaskDetails from '../cmps/TaskDetails';\r\nimport DynamicMiniComponent from '../cmps/dynamics/DynamicMiniComponent';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport GroupAddOutlinedIcon from '@material-ui/icons/GroupAddOutlined';\r\nimport ImageSearchOutlinedIcon from '@material-ui/icons/ImageSearchOutlined';\r\nimport HistoryOutlinedIcon from '@material-ui/icons/HistoryOutlined';\r\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nimport utils from '../services/utils';\r\nimport SocketService from '../services/SocketService';\r\n\r\nimport { loadBoard, updateBoard, setBoard } from '../actions/BoardActions';\r\nimport { logout, getLoggedInUser, getUsers } from '../actions/UserActions';\r\n\r\n// import { filterBoard } from '../selectors/BoardSelector';\r\n\r\nclass Board extends Component {\r\n  state = {\r\n    showColAddForm: true,\r\n    showTaskDetails: false,\r\n    showMiniTaskDetails: false,\r\n    toggleLogin: false,\r\n    toggleSplashMenu: false,\r\n    showHistory: false,\r\n    toggleBoardTeamMembers: false,\r\n    miniTaskDetails: {},\r\n    filterBy: {\r\n      title: '',\r\n      teamMembers: ''\r\n    },\r\n    sortBy: '',\r\n    sortOrder: '',\r\n    showTopMenuOptions: true,\r\n    showAddForm: false,\r\n    currColumnId: '',\r\n    isBoardLoaded: false,\r\n    isDarkBackground: null,\r\n    filterIconMod: false,\r\n    mobileMod: false\r\n  }\r\n\r\n  componentDidMount() {\r\n    const boardId = this.props.match.params.id;\r\n\r\n    this.props.getUsers();\r\n    this.props.getLoggedInUser();\r\n    this.loadBoard();\r\n    this.resize();\r\n    window.addEventListener('resize', this.resize);\r\n\r\n    SocketService.setup();\r\n    SocketService.emit('boardId', boardId);\r\n    SocketService.on('updateBoard', (board) => this.props.setBoard(board));\r\n    SocketService.on('getNotification', (notification) => store.addNotification(notification));\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const boardId = this.props.match.params.id;\r\n    if (this.state.isBoardLoaded) {\r\n      if (prevProps.board.boardBgImage !== this.props.board.boardBgImage) {\r\n        this.isDarkBackground();\r\n      };\r\n      return;\r\n    } else if (boardId === this.props.board._id) {\r\n      this.setState({ isBoardLoaded: true });\r\n      this.isDarkBackground();\r\n    };\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n    SocketService.off('updateBoard');\r\n    SocketService.off('getNotification');\r\n    SocketService.terminate();\r\n  }\r\n\r\n  loadBoard = () => {\r\n    const boardId = this.props.match.params.id;\r\n    const filterBy = this.state.filterBy;\r\n    const sortBy = this.state.sortBy;\r\n    const sortOrder = this.state.sortOrder;\r\n    this.props.loadBoard(boardId, filterBy, sortBy, sortOrder);\r\n  }\r\n\r\n  toggleAddColumn = () => {\r\n    this.setState((prevState) => ({\r\n      showColAddForm: !prevState.showColAddForm,\r\n    }))\r\n  }\r\n\r\n  goBack = () => {\r\n    this.props.history.push('/');\r\n  }\r\n\r\n  toggleLogin = (ev) => {\r\n    ev.stopPropagation()\r\n    this.setState((prevState) => ({\r\n      toggleLogin: !prevState.toggleLogin,\r\n      showHistory: false,\r\n      toggleBoardTeamMembers: false,\r\n      toggleSplashMenu: false\r\n    }))\r\n  }\r\n\r\n  closeAllTabs = (ev) => {\r\n    ev.stopPropagation()\r\n    this.setState({\r\n      toggleLogin: false,\r\n      toggleSplashMenu: false,\r\n      showHistory: false,\r\n      toggleBoardTeamMembers: false,\r\n      showTopMenuOptions: false,\r\n      showAddForm: false,\r\n    });\r\n  }\r\n\r\n  toggleTaskDetails = (currTask) => {\r\n    if (currTask === undefined) {\r\n      this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails }));\r\n    } else if (this.state.showTaskDetails && currTask.id !== this.state.currTask.id) {\r\n      this.setState({ currTask });\r\n    } else {\r\n      this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails, currTask }));\r\n    }\r\n  }\r\n\r\n  onAddImg = (ev) => {\r\n    const file = ev.target.files[0];\r\n    utils.uploadImg(file).then(res => {\r\n      const newBoard = { ...this.props.board }\r\n      newBoard.boardBgImage = res\r\n      newBoard.boardBgThumbnail = res\r\n      const msg = `${this.props.user} changed background image`;\r\n      const notificationType = 'success';\r\n      this.props.updateBoard(newBoard, msg, notificationType);\r\n    })\r\n  }\r\n\r\n  onFilter = (filterBy) => {\r\n    this.setState(prevState => ({ filterBy: { ...prevState.filterBy, ...filterBy } }), this.loadBoard);\r\n    // this.props.updateFilter(filterBy);\r\n  }\r\n\r\n  onSort = (sortBy, sortOrder) => {\r\n    this.setState({ sortBy, sortOrder }, this.loadBoard);\r\n  }\r\n\r\n  toggleMiniDetails = miniTask => {\r\n    if (miniTask) {\r\n      return this.setState(prevState => ({ showMiniTaskDetails: !prevState.showMiniTaskDetails, miniTaskDetails: miniTask }));\r\n    }\r\n    this.setState(prevState => ({ showMiniTaskDetails: !prevState.showMiniTaskDetails }));\r\n  }\r\n\r\n  toggleSplashMenu = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState(prevState => ({\r\n      toggleSplashMenu: !prevState.toggleSplashMenu,\r\n      showHistory: false,\r\n      toggleBoardTeamMembers: false,\r\n      toggleLogin: false\r\n    }));\r\n  }\r\n\r\n  toggleBoardHistory = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState(prevState => ({\r\n      showHistory: !prevState.showHistory,\r\n      toggleSplashMenu: false,\r\n      toggleBoardTeamMembers: false,\r\n      toggleLogin: false\r\n    }));\r\n  }\r\n\r\n  toggleBoardTeamMembers = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState(prevState => ({\r\n      toggleBoardTeamMembers: !prevState.toggleBoardTeamMembers,\r\n      showHistory: false,\r\n      toggleSplashMenu: false,\r\n      toggleLogin: false\r\n    }))\r\n  }\r\n\r\n  openAddForm = colId => {\r\n    this.setState({ showAddForm: true, currColumnId: colId }, this.closeEditColumn);\r\n  }\r\n\r\n  closeAddForm = _ => {\r\n    this.setState({ showAddForm: false });\r\n  }\r\n\r\n  openEditColumn = (colId) => {\r\n    this.setState({ showTopMenuOptions: true, currColumnId: colId }, this.closeAddForm());\r\n  }\r\n\r\n  closeEditColumn = _ => {\r\n    this.setState({ showTopMenuOptions: false });\r\n  }\r\n\r\n  isDarkBackground = async (img) => {\r\n    const fac = new FastAverageColor();\r\n    let backgroundImage = new Image();\r\n    backgroundImage.crossOrigin = 'anonymous';\r\n    backgroundImage.src = img || this.props.board.boardBgImage;\r\n    try {\r\n      const color = await fac.getColorAsync(backgroundImage, { algorithm: 'dominant' });\r\n      (color.isDark) ? this.setState({ isDarkBackground: true }) : this.setState({ isDarkBackground: false });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  resize = _ => {\r\n    this.setState({\r\n      filterIconMod: window.innerWidth < 1075 ? true : false,\r\n      mobileMod: window.innerWidth < 550 ? true : false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isBoardLoaded) return <LoadPage />\r\n    // const { teamMembers } = { ...this.props.board }\r\n    let button;\r\n    if (this.props.loggedInUser) {\r\n      button = <ExitToAppIcon onClick={this.props.logout} />\r\n    } else {\r\n      button = <div className=\"login-btn flex\"\r\n        onClick={ev => this.toggleLogin(ev)}>\r\n        <PersonOutlineIcon />\r\n        <p>login</p>\r\n      </div>\r\n    }\r\n    /* {this.props.board.teamMembers.length > 0 &&\r\n      <div className=\"board-page-nav-bar-filters team-members-container flex\">\r\n        {\r\n          teamMembers.map(member => {\r\n            return <div key={member.username} className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n              <p className=\"team-member-icon\">\r\n                {utils.createUserIcon(member.firstName,\r\n                  member.lastName)}\r\n              </p>\r\n            </div>\r\n          })\r\n        }\r\n      </div>\r\n    } */\r\n    return (\r\n      <div className=\"screen\" onClick={this.closeAllTabs}>\r\n        <div className=\"board-page fill-height flex column\" style={{ backgroundImage: 'url(' + this.props.board.boardBgImage + ')', backgroundAttachment: 'fixed' }}>\r\n\r\n          <div className=\"board-page-nav-bar flex align-center space-between\">\r\n            <div className=\"board-page-nav-bar-logo\" onClick={this.goBack}> </div>\r\n            <div className=\"flex align-center\">\r\n              {this.props.loggedInUser &&\r\n                <div className=\"flex\">\r\n                  <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: 'rgba(223, 225, 230, 0.8)', color: '#172b4d' }} >\r\n                    <div className=\"team-member-icon\">\r\n                      <p>\r\n                        {utils.createUserIcon(this.props.loggedInUser.firstName,\r\n                          this.props.loggedInUser.lastName)}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {!this.state.mobileMod ?\r\n                    <div className=\"logged-in-user flex column\">\r\n                      <small>Logged as:</small>\r\n                      <p> {this.props.loggedInUser.username}</p>\r\n                    </div> : ''}\r\n                </div>\r\n              }\r\n              {button}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"board-page-nav-bar-filters flex wrap align-center space-between\">\r\n            <div className=\"left-section flex align-center wrap\" style={{ marginTop: 2 }}>\r\n              <div className=\"left-section-mobile-mode flex align-center\">\r\n                <button\r\n                  className={`board-page-nav-bar-filters nav-btn flex \r\n                ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                  onClick={this.goBack} >\r\n                  <HomeIcon />\r\n                </button>\r\n\r\n\r\n                <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n                <Sort onSort={this.onSort} isDarkBackground={this.state.isDarkBackground} />\r\n                {window.innerWidth < 489 ? '' :\r\n                  <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n                }\r\n\r\n              </div>\r\n\r\n              <Filter onFilter={this.onFilter}\r\n                teamMembers={this.props.board.teamMembers}\r\n                isDarkBackground={this.state.isDarkBackground} />\r\n\r\n\r\n\r\n              {!this.state.mobileMod ?\r\n                <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n                : ''\r\n              }\r\n            </div>\r\n\r\n\r\n            <div className=\"right-section flex align-center\" style={{ marginTop: 2 }}>\r\n              <div className=\"board-page-nav-bar-filters-item fill-height\">\r\n                <button\r\n                  className={`nav-btn fill-height capitalize\r\n                  ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                  onClick={this.toggleBoardTeamMembers}>\r\n                  {!this.state.filterIconMod ? <Typography component=\"p\" className=\"flex align-center p-reset\">\r\n                    <GroupAddOutlinedIcon style={{ marginRight: 5 }} />\r\n                    add members\r\n                    </Typography> : <GroupAddOutlinedIcon />}\r\n                </button>\r\n              </div>\r\n\r\n              <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <div className=\"board-page-nav-bar-filters-item fill-height\">\r\n                <button\r\n                  className={`nav-btn fill-height capitalize\r\n                  ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                  onClick={(ev) => this.toggleSplashMenu(ev)}>\r\n                  {!this.state.filterIconMod ? <Typography component=\"p\" className=\"flex align-center p-reset\">\r\n                    <ImageSearchOutlinedIcon style={{ marginRight: 5 }} />\r\n                    change background\r\n                  </Typography> : <ImageSearchOutlinedIcon />}\r\n                </button>\r\n              </div>\r\n\r\n              <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <div className=\"board-page-nav-bar-filters-item flex fill-height\">\r\n                <button\r\n                  className={`nav-btn fill-height capitalize \r\n                  ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                  onClick={this.toggleBoardHistory}>\r\n                  {!this.state.filterIconMod ? <Typography component=\"p\" className=\"flex align-center p-reset\">\r\n                    <HistoryOutlinedIcon style={{ marginRight: 5 }} />\r\n                    show history\r\n                  </Typography> : <HistoryOutlinedIcon />}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <CSSTransition\r\n            in={this.state.toggleSplashMenu}\r\n            timeout={700}\r\n            classNames=\"modal\"\r\n            unmountOnExit\r\n          >\r\n            <SplashMenu\r\n              // toggleSplashMenu={this.state.toggleSplashMenu}\r\n              board={this.props.board}\r\n              updateBoard={this.props.updateBoard}\r\n              closeAllTabs={this.closeAllTabs}\r\n              onAddImg={this.onAddImg}\r\n              showUploadBgImg={this.state.closeAllTabs}\r\n              isDarkBackground={this.isDarkBackground}\r\n              user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'}\r\n            />\r\n          </CSSTransition>\r\n\r\n          <div className=\"board-page-columns-container\">\r\n            <div className=\"flex align-start fill-height\">\r\n              <CSSTransition\r\n                in={this.state.toggleLogin}\r\n                timeout={700}\r\n                classNames=\"modal\"\r\n                unmountOnExit\r\n              >\r\n                <Login\r\n                  variant=\"outlined\"\r\n                  className=\"home-page-login\"\r\n                  toggleLogin={this.toggleLogin}\r\n                  toggleState={this.state.toggleLogin} />\r\n              </CSSTransition>\r\n              <BoardColumns\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                toggleTaskDetails={this.toggleTaskDetails}\r\n                toggleMiniDetails={this.toggleMiniDetails}\r\n                user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'}\r\n                currColumnId={this.state.currColumnId}\r\n                openAddForm={this.openAddForm}\r\n                closeAddForm={this.closeAddForm}\r\n                openEditColumn={this.openEditColumn}\r\n                closeEditColumn={this.closeEditColumn}\r\n                showTopMenuOptions={this.state.showTopMenuOptions}\r\n                showAddForm={this.state.showAddForm}\r\n              />\r\n              <div className=\"flex column align-center\">\r\n                {this.state.showColAddForm ?\r\n                  <button className={`board-page-add-another-column-btn\r\n                  ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                    onClick={this.toggleAddColumn}>\r\n                    <span className=\"add-icon\">+</span>Add another list</button> : ''}\r\n                {!this.state.showColAddForm && <ColumnAddForm board={this.props.board} updateBoard={this.props.updateBoard}\r\n                  toggleAddForm={this.toggleAddColumn} user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'} />}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {this.state.showTaskDetails && <TaskDetails\r\n            taskId={this.state.currTask.id}\r\n            board={this.props.board}\r\n            column={this.state.currTask.column}\r\n            updateBoard={this.props.updateBoard}\r\n            toggleTaskDetails={this.toggleTaskDetails}\r\n            user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'} />}\r\n          {this.state.showMiniTaskDetails && <DynamicMiniComponent\r\n            miniTask={this.state.miniTaskDetails}\r\n            updateBoard={this.props.updateBoard}\r\n            onToggle={this.toggleMiniDetails}\r\n            board={this.props.board}\r\n            user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'}\r\n          />}\r\n          <CSSTransition\r\n            in={this.state.showHistory}\r\n            timeout={700}\r\n            classNames=\"modal\"\r\n            unmountOnExit\r\n          >\r\n            <BoardHistory variant=\"outlined\"\r\n              className=\"home-page-login\" history={this.props.board.history} />\r\n          </CSSTransition>\r\n          <CSSTransition\r\n            in={this.state.toggleBoardTeamMembers}\r\n            timeout={700}\r\n            classNames=\"modal\"\r\n            unmountOnExit\r\n          >\r\n            <BoardTeamMembers board={this.props.board}\r\n              users={this.props.users}\r\n              updateBoard={this.props.updateBoard} />\r\n          </CSSTransition>\r\n        </div>\r\n\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    board: state.boards.board,\r\n    loggedInUser: state.user.loggedInUser,\r\n    users: state.user.users\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  loadBoard,\r\n  updateBoard,\r\n  logout,\r\n  getLoggedInUser,\r\n  setBoard,\r\n  getUsers,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport '../src/styles/global.scss'\r\n\r\nimport Home from './pages/Home.js';\r\nimport Board from './pages/Board.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/\" component={Home} exact />\r\n        <Route path=\"/board/:id\" component={Board} exact />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  boards: [],\r\n  board: {},\r\n  filterBy: {title: '', teamMembers: ''}\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_BOARDS':\r\n      return { ...state, boards: action.boards };\r\n    case 'UPDATE_BOARD':\r\n      return { ...state, board: action.board };\r\n    case 'ADD_BOARD':\r\n      return { ...state, boards: [...state.boards, action.addedBoard] };\r\n    case 'UPDATE_FILTER':\r\n      return { ...state, filterBy: action.filterBy };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","let localLoggedinUser = null;\r\n// if (localStorage.user) localLoggedinUser = JSON.parse(localStorage.user);\r\n\r\nconst initialState = {\r\n  loggedInUser: localLoggedinUser,\r\n  users: []\r\n};\r\n\r\nexport default function(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_USER':\r\n      return { ...state, loggedInUser: action.user };\r\n    case 'SET_USERS':\r\n      return {...state, users: action.users};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport BoardReducer from './BoardReducer'\r\nimport UserReducer from './UserReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  boards: BoardReducer,\r\n  user: UserReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst Store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default Store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport ReactNotification from 'react-notifications-component';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'react-notifications-component/dist/theme.css';\r\n\r\nimport Store from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={Store}>\r\n    <ReactNotification />\r\n      <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}