{"version":3,"sources":["history.js","cmps/BoardPreview.js","cmps/BoardsList.js","services/HttpService.js","services/UserService.js","actions/UserActions.js","services/SocketService.js","cmps/Login.js","services/utils.js","services/BoardService.js","actions/BoardActions.js","pages/Home.js","cmps/LoadPage.js","cmps/TopMenuOptions.js","cmps/dynamics/mapDynamicComponents.js","cmps/dynamics/TaskPreview.js","cmps/dynamics/VideoPreview.js","cmps/dynamics/ImagePreview.js","cmps/dynamics/DynamicComponent.js","cmps/TasksList.js","cmps/TaskForm.js","cmps/BoardColumns.js","cmps/BoardHistory.js","cmps/BoardTeamMembers.js","cmps/ColumnAddForm.js","cmps/Filter.js","cmps/Sort.js","cmps/SplashMenu.js","cmps/DueDate.js","cmps/Labels.js","cmps/Members.js","cmps/Todos.js","cmps/TaskDetails.js","cmps/MiniDetailsButton.js","cmps/MiniDetailsEditor.js","cmps/ScreenFilter.js","cmps/dynamics/MiniTextDetails.js","cmps/dynamics/MiniImageDetails.js","cmps/dynamics/mapDynamicMiniComponents.js","cmps/dynamics/MiniVideoDetails.js","cmps/dynamics/DynamicMiniComponent.js","pages/Board.js","App.js","serviceWorker.js","reducers/BoardReducer.js","reducers/UserReducer.js","reducers/index.js","store.js","index.js"],"names":["history","createBrowserHistory","BoardPreview","state","textColor","isDarkBackground","a","async","fac","FastAverageColor","backgroundImage","Image","crossOrigin","src","props","board","boardBgThumbnail","getColorAsync","algorithm","isDark","setState","console","log","this","className","alt","title","Component","withRouter","boards","user","duplicateBoard","templateBoards","filter","isTemplate","myBoards","createdBy","username","map","key","_id","onClick","length","myBoard","to","axios","Axios","create","withCredentials","endpoint","data","ajax","method","url","res","dir","response","status","push","login","userCred","HttpService","logout","signup","getLoggedInUser","getUsers","users","dispatch","UserService","_setUser","type","_setUsers","socket","Login","msg","loginCred","email","password","signupCred","firstName","lastName","loginHandleChange","ev","target","name","value","prevState","signupHandleChange","doLogin","preventDefault","userCreds","doSignup","signupCreds","toggleLogin","doLogout","doStopPropagation","stopPropagation","signupSection","onSubmit","onChange","placeholder","loginSection","loggedInUser","style","mapDispatchToProps","connect","setup","io","terminate","on","eventName","cb","off","emit","getRandomId","letters","id","i","ind","Math","floor","random","createUserIcon","charAt","getRandomColor","color","uploadImg","file","UPLOAD_URL","formData","FormData","append","post","then","catch","err","error","getImagesFromUnsplash","filterName","URL","get","results","emitNotification","notification","message","insert","container","animationIn","animationOut","dismiss","duration","SocketService","add","query","boardId","filterBy","sortBy","sortOrder","Object","keys","join","_createQueryString","put","remove","_setBoards","loadBoard","BoardService","_boardUpdate","Home","teamMembers","tasks","columns","columnOrder","boardBgImage","closeLogin","createBoard","createdBoardMessage","newBoard","duplicatedBoard","utils","time","Date","now","loadBoards","button","Button","CSSTransition","in","timeout","classNames","unmountOnExit","Fab","variant","href","addedBoard","_addBoard","LoadPage","CircularProgress","TopMenuOptions","onDuplicateColumn","column","newColumn","newId","idx","findIndex","columnId","splice","taskIds","forEach","taskId","clonedTaskId","taskIdIdx","taskIdx","toggleTopMenuOptions","updateBoard","onDelete","text","toggleMiniDetails","miniTask","task","boundingClientRect","taskContainer","current","getBoundingClientRect","previewType","React","createRef","prevProps","toggleRender","provided","innerRef","isDragging","showEditBtn","onTaskId","ref","draggableProps","dragHandleProps","labels","label","e","description","todos","todosDone","taskTeamMembers","member","backgroundColor","video","videoContainer","width","height","allowFullScreen","security","image","imgContainer","DynamicComponent","componentType","mapDynamicComponents","Cmp","getComponent","Fragment","TasksList","showAddForm","currTaskId","showTaskDetails","toggleTaskDetails","canOpenTaskDetails","hideEditBtn","_","isDraggingOver","droppableProps","draggableId","index","snapshot","rotationMultiplier","onMouseEnter","onMouseLeave","TaskForm","createdAt","dueDate","importance","creator","edit","inputChange","fieldName","save","checkIfUrlAndSave","match","newUrl","replace","saveTask","includes","closeUpdateForm","toggleUpdateForm","textAreaAdjust","scrollHeight","nameInput","focus","setFormDataForEdit","onKeyUp","input","BoardColumns","timer","taskKey","onDragEnd","result","destination","source","droppableId","newColumnOrder","slice","columnTitle","start","finish","newTaskIds","taskTitle","startTaskIds","newStart","finishTaskIds","newFinish","setColumnName","emitChange","innerText","saveColumnName","updatedBoard","currColumnId","showTopMenuOptions","direction","columnKey","currId","contentEditable","spellCheck","onFocus","onInput","onBlur","suppressContentEditableWarning","openEditColumn","closeEditColumn","reRender","openAddForm","addCardText","closeAddForm","BoardHistory","item","moment","calendar","BoardTeamMembers","currentBoardMembers","componentDidMount","updateTeamMembers","notificationType","find","teamMember","onStopPropagation","boardMember","ColumnAddForm","saveColumn","toggleAddForm","Filter","onFilter","background","Sort","onSortBy","onSort","toggleButtonName","SplashMenu","splashImagesUrls","office","filterByName","onSave","splashImages","UrlIndx","currUrl","urls","setBoardBackground","imageUrl","full","small","display","onAddImg","htmlFor","DueDate","setDate","handleChange","date","newTask","getTime","onToggle","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","popperModifiers","flip","behavior","preventOverflow","enabled","Labels","choosenLabels","setNewState","updateChoosenLabels","classList","labelIdx","currLabel","updateStyle","left","top","toggleChooseLabels","Members","choosenMembers","availableMembers","setAvailableMembers","updateChoosenMembers","memberIdx","currMember","taskMember","pos","toggleChooseMembers","Todo","updateTodo","onSaveTodo","todo","isDone","updateProgressBar","toggleTodos","TaskDetails","choosenlabels","showActivity","showEditDescriptionForm","onToggleDueDate","toggleDeleteTodo","progressWidth","currTodoId","targetValue","openUpdateDescriptionForm","closeUpdateDescriptionForm","onStopPropagationAndCloseOptions","onSaveDescription","onDuplicateTask","onDeleteTask","toggleTodoDone","currTodo","doneTodosCounter","interval","round","setInterval","clearInterval","deleteTodo","todoId","deletedTodo","hideDeleteTodoButton","showDeleteTodoButton","setTaskName","changeDescription","saveTaskName","uploadImage","files","currTask","position","fontSize","fontWeight","letterSpacing","Avatar","margin","textAlign","right","checked","format","cols","MiniDetailsButton","MiniDetailsEditor","onToggleLabels","onToggleMembers","window","innerHeight","ScreenFilter","MiniTextDetails","handleFocus","select","textArea","labelLen","defaultValue","MiniImageDetails","imgHeight","videoDimensions","bottom","DynamicMiniComponent","mapDynamicMiniComponents","Board","showColAddForm","showMiniTaskDetails","toggleSplashMenu","showHistory","toggleBoardTeamMembers","miniTaskDetails","isBoardLoaded","filterIconMod","params","toggleAddColumn","goBack","closeAllTabs","undefined","toggleBoardHistory","colId","img","resize","innerWidth","addEventListener","setBoard","store","addNotification","removeEventListener","backgroundAttachment","Typography","component","marginRight","showUploadBgImg","toggleState","unshift","App","path","exact","Boolean","location","hostname","initialState","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","Store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bfafd8e0.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\r\nconst history = createBrowserHistory();\r\n\r\nexport default history;","import React, { Component } from \"react\";\r\nimport FastAverageColor from 'fast-average-color';\r\n\r\nexport default class BoardPreview extends Component {\r\n\r\n  state = {\r\n    textColor: ''\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.isDarkBackground();\r\n  }\r\n\r\n  isDarkBackground = async () => {\r\n    const fac = new FastAverageColor();\r\n    let backgroundImage = new Image();\r\n    backgroundImage.crossOrigin = 'anonymous';\r\n    backgroundImage.src = this.props.board.boardBgThumbnail;\r\n    try {\r\n      const color = await fac.getColorAsync(backgroundImage, { algorithm: 'dominant' });\r\n      (color.isDark) ? this.setState({ textColor: 'darkTitle' }) : this.setState({ textColor: 'lightTitle' });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board-preview card\">\r\n        <img src={this.props.board.boardBgThumbnail} alt=\"none\" />\r\n        <div className={`flex justify-center align-center title-container ${this.state.textColor}`}>\r\n          <h2 className={`capitalize ${this.state.textColor}`}>{this.props.board.title}</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport BoardPreview from './BoardPreview';\r\n\r\nfunction BoardsList({ boards, user, duplicateBoard }) {\r\n\r\n    const templateBoards = boards.filter(board => board.isTemplate);\r\n    const myBoards = (user) ? boards.filter(board => board.createdBy.username === user.username) : '';\r\n\r\n    return (\r\n        <section className=\"boards-list column\">\r\n            <h2 className=\"text-center uppercase\"> check our premade templates</h2>\r\n            <div className=\"boards-list-main-inner-container\">\r\n                {templateBoards.map(board => (\r\n                    <div className=\"boards-list-main-inner-container-item pointer\" key={board._id} onClick={() => duplicateBoard(board)}>\r\n                        <BoardPreview board={board} />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            {user && <div><h2 className=\"text-center uppercase\"> {`${user.username}'s`} Boards</h2>\r\n                {(myBoards.length === 0) ?\r\n                    <div className=\"capitalize flex justify-center noboards\">\r\n                        you haven't created a board yet! click on get started or try one of our premade templates!\r\n                    </div> :\r\n                    <div className=\"boards-list-main-inner-container\">\r\n                        {myBoards.map(myBoard => (\r\n                            <NavLink className=\"boards-list-main-inner-container-item\" key={myBoard._id} to={`/board/${myBoard._id}`}>\r\n                                <BoardPreview board={myBoard} />\r\n                            </NavLink>\r\n                        ))}\r\n                    </div>\r\n                }</div>}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default withRouter(BoardsList)","import history from '../history';\r\nimport Axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data){\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data){\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data){\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data){\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\n\r\nasync function ajax(endpoint, method='get', data=null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        if (err.response && err.response.status === 401) {\r\n          history.push('/');\r\n        }\r\n        throw err;\r\n    }\r\n}","import HttpService from './HttpService'\r\n\r\nexport default {\r\n    login,\r\n    logout,\r\n    signup,\r\n    getLoggedInUser,\r\n    getUsers\r\n}\r\n\r\nasync function login(userCred) {\r\n    try {\r\n        const user = await HttpService.post('auth/login', userCred);\r\n        return user;\r\n    } catch (err) {\r\n        console.log('UserService: err in login', err);\r\n    }\r\n}\r\n\r\nasync function signup(userCred) {\r\n    try {\r\n        const user = await HttpService.post('auth/signup', userCred);\r\n        return user;\r\n    } catch (err) {\r\n        console.log('UserService: err in signup', err);\r\n    }\r\n}\r\n\r\nasync function logout() {\r\n    try {\r\n        await HttpService.post('auth/logout');\r\n    } catch (err) {\r\n        console.log('UserService: err in logout', err);\r\n    }\r\n}\r\n\r\nasync function getLoggedInUser() {\r\n    try {\r\n        const user = await HttpService.get('auth/user');\r\n        return user;\r\n    } catch (err) {\r\n        console.log('UserService: err in getting loggedInUser', err);\r\n    }\r\n}\r\n\r\nasync function getUsers() {\r\n    try {\r\n        const users = await HttpService.get('user');\r\n        return users;\r\n    } catch (err) {\r\n        console.log('UserService: err in getting users', err);\r\n    }\r\n}\r\n","import UserService from '../services/UserService';\r\n\r\nexport function login(userCreds) {\r\n  return async dispatch => {\r\n    try {\r\n      const user = await UserService.login(userCreds);\r\n      dispatch(_setUser(user));\r\n    } catch (err) {\r\n      console.log('UserActions: err in login', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function signup(userCreds) {\r\n  return async dispatch => {\r\n    try {\r\n      const user = await UserService.signup(userCreds);\r\n      dispatch(_setUser(user));\r\n    } catch (err) {\r\n      console.log('UserActions: err in signup', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function logout() {\r\n  return async dispatch => {\r\n    try {\r\n      await UserService.logout();\r\n      dispatch(_setUser(null));\r\n    } catch (err) {\r\n      console.log('UserActions: err in logout', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function getLoggedInUser() {\r\n  return async dispatch => {\r\n    try {\r\n      const user = await UserService.getLoggedInUser();\r\n      dispatch(_setUser(user));\r\n    }  catch (err) {\r\n      console.log('UserActions: err in logout', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _setUser(user) {\r\n  return {\r\n    type: 'SET_USER',\r\n    user\r\n  };\r\n}\r\n\r\nexport function getUsers() {\r\n  return async dispatch => {\r\n    try {\r\n      const users = await UserService.getUsers();\r\n      dispatch(_setUsers(users));\r\n    } catch (err) {\r\n      console.log('UserActions: err in getUsers', err);\r\n    }\r\n  }\r\n}\r\n\r\nfunction _setUsers(users) {\r\n  return {\r\n    type: 'SET_USERS',\r\n    users\r\n  };\r\n}","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n  process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport default {\r\n  setup,\r\n  terminate,\r\n  on,\r\n  off,\r\n  emit\r\n};\r\n\r\nfunction setup() {\r\n  socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n  socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n  socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n  socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n  socket.emit(eventName, data);\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n  getLoggedInUser,\r\n  login,\r\n  logout,\r\n  signup\r\n} from '../actions/UserActions';\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    msg: '',\r\n    loginCred: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n    signupCred: {\r\n      firstName: '',\r\n      lastName: '',\r\n      username: '',\r\n      email: '',\r\n      password: '',\r\n    },\r\n  }\r\n\r\n  loginHandleChange = ev => {\r\n    const { name, value } = ev.target;\r\n    this.setState(prevState => ({\r\n      loginCred: {\r\n        ...prevState.loginCred,\r\n        [name]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  signupHandleChange = ev => {\r\n    const { name, value } = ev.target;\r\n    this.setState(prevState => ({\r\n      signupCred: {\r\n        ...prevState.signupCred,\r\n        [name]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  doLogin = async ev => {\r\n    ev.preventDefault();\r\n    const { email, password } = this.state.loginCred;\r\n    if (!email || !password) {\r\n      return this.setState({ msg: 'Please enter user/password' });\r\n    }\r\n    const userCreds = { email, password };\r\n    this.props.login(userCreds);\r\n    this.setState({ loginCred: { email: '', password: '' } });\r\n  };\r\n\r\n  doSignup = async ev => {\r\n    ev.preventDefault();\r\n    const { firstName, lastName, username, email, password } = this.state.signupCred;\r\n    if (!firstName || !lastName || !email || !password || !username) {\r\n      return this.setState({ msg: 'All inputs are required!' });\r\n    }\r\n    const signupCreds = { firstName, lastName, username, email, password };\r\n    this.props.signup(signupCreds);\r\n    this.setState({ signupCred: { firstName: '', lastName: '', username: '', email: '', password: '' } });\r\n    this.props.toggleLogin();\r\n  };\r\n\r\n  doLogout = () => {\r\n    this.props.logout();\r\n  }\r\n\r\n  doStopPropagation = (ev) => {\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    let signupSection = (\r\n      <form className=\"login-container-signup text-center\" onSubmit={this.doSignup}>\r\n        <p>Not a member yet? Sign up!</p>\r\n        <input\r\n          type=\"text\"\r\n          name=\"firstName\"\r\n          value={this.state.signupCred.firstName}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"First Name\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"lastName\"\r\n          value={this.state.signupCred.lastName}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Last Name\"\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          value={this.state.signupCred.email}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Email\"\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={this.state.signupCred.username}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Username\"\r\n        />\r\n        <br />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={this.state.signupCred.password}\r\n          onChange={this.signupHandleChange}\r\n          placeholder=\"Password\"\r\n        />\r\n        <br />\r\n        <button className=\"login-container-signup-btn\">Signup</button>\r\n      </form>\r\n    );\r\n    let loginSection = (\r\n      <form className=\"login-container-login text-center\" onSubmit={this.doLogin}>\r\n        <p> Login: </p>\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          value={this.state.loginCred.email}\r\n          onChange={this.loginHandleChange}\r\n          placeholder=\"Email\"\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={this.state.loginCred.password}\r\n          onChange={this.loginHandleChange}\r\n          placeholder=\"Password\"\r\n        />\r\n        <br />\r\n        <button className=\"login-container-login-btn\">Login</button>\r\n      </form>\r\n    );\r\n\r\n    const { loggedInUser } = this.props;\r\n\r\n    return (\r\n\r\n      <div className=\"login-container flex column align-center\"\r\n        style={this.props.style}\r\n        onClick={this.doStopPropagation}>\r\n\r\n\r\n        <div className=\"login-container-logo\">\r\n        </div>\r\n        <h2>{this.state.msg}</h2>\r\n        <div className={\"login-container-form-container\"}>\r\n          {loggedInUser && (\r\n            <div>\r\n              <h2 className=\"login-container-loggedin-username\"> <p>Welcome!</p> {loggedInUser.username} </h2>\r\n              <div className=\"fill-width flex\">\r\n                <button className=\"login-container-form-container-logout\" onClick={this.doLogout}>Logout</button>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {!this.props.loggedInUser && loginSection}\r\n          <hr />\r\n          {!this.props.loggedInUser && signupSection}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    users: state.user.users,\r\n    loggedInUser: state.user.loggedInUser,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  login,\r\n  logout,\r\n  signup,\r\n  getLoggedInUser\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import axios from 'axios'\r\n\r\nimport SocketService from './SocketService';\r\n\r\nexport default {\r\n  getRandomId,\r\n  createUserIcon,\r\n  getRandomColor,\r\n  uploadImg,\r\n  getImagesFromUnsplash,\r\n  emitNotification\r\n}\r\n\r\nfunction getRandomId() {\r\n  let letters = '1234567890poiiytreqwasdfghjklmnbvcxxssersgyushquiz';\r\n  let id = '';\r\n  for (let i = 0; i < 10; i++) {\r\n    let ind = Math.floor(Math.random() * letters.length)\r\n    id += letters[ind];\r\n  }\r\n  return id;\r\n}\r\n\r\nfunction createUserIcon(firstName, lastName) {\r\n  let newIcon = firstName.charAt(0) + lastName.charAt(0)\r\n  return (newIcon)\r\n}\r\n\r\nfunction getRandomColor() {\r\n  var letters = '0123456789ABCDEF';\r\n  var color = '#';\r\n  for (var i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n}\r\n\r\nfunction uploadImg(file) {\r\n  const CLOUD_NAME = 'dujlxvxxv'\r\n  const PRESET_NAME = 'xi62wuas'\r\n  const UPLOAD_URL = `https://api.cloudinary.com/v1_1/${CLOUD_NAME}/image/upload`\r\n\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  formData.append('upload_preset', PRESET_NAME);\r\n\r\n  return axios.post(UPLOAD_URL, formData)\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      return res.url\r\n    })\r\n    .catch(err => console.error(err))\r\n}\r\n\r\nfunction getImagesFromUnsplash(filterName) {\r\n  const client_id = '9a992bf0a58ef7c4735758c98ec044dcdb524c2178db25d55cd773d7436f15d1'\r\n  const URL = `https://api.unsplash.com/search/photos?per_page=20&query=${filterName}&client_id=${client_id}`\r\n  return axios.get(URL)\r\n    .then(res => res.data)\r\n    .then(res => {\r\n      return res.results\r\n    })\r\n    .catch(err => console.error(err))\r\n}\r\n\r\nfunction emitNotification(msg, type) {\r\n  const notification = {\r\n    message: msg,\r\n    type: type,\r\n    insert: \"top\",\r\n    container: \"bottom-right\",\r\n    animationIn: [\"animated\", \"zoomIn\"],\r\n    animationOut: [\"animated\", \"fadeOut\"],\r\n    dismiss: {\r\n      duration: 5000,\r\n    }\r\n  };\r\n  SocketService.emit('sendNotification', notification);\r\n}","import HttpService from './HttpService';\r\n\r\nexport default {\r\n  add,\r\n  query,\r\n  get,\r\n  put,\r\n  remove\r\n};\r\n\r\nfunction query() {\r\n  return HttpService.get('board');\r\n}\r\n\r\nfunction get(boardId, filterBy, sortBy, sortOrder) {\r\n  return HttpService.get(`board/${boardId}?${_createQueryString(filterBy)}&sortby=${sortBy}&sortorder=${sortOrder}`);\r\n}\r\n\r\nfunction _createQueryString(filterBy) {\r\n  return Object.keys(filterBy).map(filter => filter + '=' + filterBy[filter]).join('&');\r\n}\r\n\r\nfunction put(board) {\r\n  return HttpService.put(`board/${board._id}`, board);\r\n}\r\n\r\nfunction remove(boardId) {\r\n  return HttpService.delete(`board/${boardId}`);\r\n}\r\n\r\nfunction add(board) {\r\n  return HttpService.post('board', board);\r\n}","import BoardService from '../services/BoardService';\r\nimport SocketService from '../services/SocketService';\r\nimport utils from '../services/utils';\r\n\r\nexport function loadBoards() {\r\n  return async dispatch => {\r\n    try {\r\n      const boards = await BoardService.query();\r\n      dispatch(_setBoards(boards));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoards', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _setBoards(boards) {\r\n  return {\r\n    type: 'SET_BOARDS',\r\n    boards\r\n  };\r\n}\r\n\r\nexport function loadBoard(boardId, filterBy, sortBy, sortOrder) {\r\n  return async dispatch => {\r\n    try {\r\n      const board = await BoardService.get(boardId, filterBy, sortBy, sortOrder);\r\n      dispatch(_boardUpdate(board));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoard', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function setBoard(board) {\r\n  return async dispatch => {\r\n    try {\r\n      dispatch(_boardUpdate(board));\r\n    } catch (err) {\r\n      console.log('BoardActions: err in setBoard', err);\r\n    }\r\n  }\r\n}\r\n\r\nexport function updateBoard(board, msg, notificationType) {\r\n  return async dispatch => {\r\n    try {\r\n      board.history.unshift({ id: utils.getRandomId(), msg: msg, time: Date.now() })\r\n      dispatch(_boardUpdate(board));\r\n      await BoardService.put(board);\r\n      SocketService.emit('boardUpdate', board);\r\n      utils.emitNotification(msg, notificationType);\r\n    } catch (err) {\r\n      console.log('BoardActions: err in loadBoard', err);\r\n    }\r\n  };\r\n}\r\n\r\nfunction _boardUpdate(board) {\r\n  return {\r\n    type: 'UPDATE_BOARD',\r\n    board\r\n  }\r\n}\r\n\r\nexport function createBoard(board) {\r\n  return async dispatch => {\r\n    try {\r\n      const addedBoard = await BoardService.add(board);\r\n      dispatch(_addBoard(addedBoard));\r\n      return addedBoard;\r\n    } catch (err) {\r\n      console.log('BoardActions: err in createBoard', err);\r\n    }\r\n  }\r\n\r\n  function _addBoard(addedBoard) {\r\n    return {\r\n      type: 'ADD_BOARD',\r\n      addedBoard\r\n    };\r\n  }\r\n}\r\n\r\n// export function updateFilter(filterBy) {\r\n//   return async dispatch => {\r\n//     try {\r\n//       dispatch(_updateFilter(filterBy));\r\n//     } catch (err) {\r\n//       console.log('BoardActions: err in loadBoard', err);\r\n//     }\r\n//   };\r\n// }\r\n\r\n// function _updateFilter(filterBy) {\r\n//   return {\r\n//     type: 'UPDATE_FILTER',\r\n//     filterBy\r\n//   }\r\n// }","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\n\r\nimport BoardsList from '../cmps/BoardsList';\r\nimport Login from '../cmps/Login';\r\n\r\nimport utils from '../services/utils';\r\n\r\nimport { loadBoards, loadBoard, createBoard } from '../actions/BoardActions'\r\nimport { logout, getLoggedInUser } from '../actions/UserActions'\r\n\r\nclass Home extends Component {\r\n\r\n  state = {\r\n    toggleLogin: false,\r\n    board: {\r\n      teamMembers: [],\r\n      tasks: {},\r\n      columns: {},\r\n      columnOrder: [],\r\n      style: {},\r\n      boardBgImage: 'https://images.unsplash.com/photo-1511649475669-e288648b2339?ixlib=rb-1.2.1&q=85&fm=jpg&crop=entropy&cs=srgb&ixid=eyJhcHBfaWQiOjExMTc0M30',\r\n      history: [],\r\n      boardBgThumbnail: 'https://images.unsplash.com/photo-1511649475669-e288648b2339?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjExMTc0M30'\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.loadBoards();\r\n    this.props.getLoggedInUser();\r\n  }\r\n\r\n  toggleLogin = (ev) => {\r\n    if (ev) ev.stopPropagation();\r\n    this.setState((prevState) => ({ toggleLogin: !prevState.toggleLogin }))\r\n  }\r\n\r\n  closeLogin = (ev) => {\r\n    ev.stopPropagation()\r\n    this.setState({ toggleLogin: false })\r\n  }\r\n\r\n  createBoard = async () => {\r\n    let board = this.state.board;\r\n    board.createdBy = this.props.loggedInUser || 'Guest';\r\n    this.createdBoardMessage(board);\r\n    const newBoard = await this.props.createBoard(board);\r\n    this.props.history.push(`/board/${newBoard._id}`);\r\n  }\r\n\r\n  duplicateBoard = async (board) => {\r\n    let duplicatedBoard = { ...board };\r\n    delete duplicatedBoard._id;\r\n    duplicatedBoard.history = [];\r\n    duplicatedBoard.title = '';\r\n    duplicatedBoard.isTemplate = false;\r\n    duplicatedBoard.createdBy = this.props.loggedInUser;\r\n    this.createdBoardMessage(duplicatedBoard);\r\n    const newBoard = await this.props.createBoard(duplicatedBoard);\r\n    this.props.history.push(`/board/${newBoard._id}`);\r\n  }\r\n\r\n  createdBoardMessage = (board) => {\r\n    const username = (this.props.loggedInUser) ? this.props.loggedInUser.username : 'Guest';\r\n    let msg = `The Board was created by ${username}`;\r\n    board.history.push({ id: utils.getRandomId(), msg: msg, time: Date.now() });\r\n  }\r\n\r\n  render() {\r\n    let button;\r\n    if (this.props.loggedInUser) {\r\n      button = <Button className=\"home-page-login-btn\" onClick={this.props.logout}>\r\n        <div>logout</div>\r\n      </Button>\r\n    } else {\r\n      button = <Button className=\"home-page-login-btn\" onClick={this.toggleLogin}>\r\n        <div>login</div>\r\n      </Button>\r\n    }\r\n\r\n    return (\r\n      <div className=\"home-page\" onClick={this.closeLogin}>\r\n        <section className=\"home-page-header\">\r\n          <div className=\"home-page-login flex justify-end align-center\">\r\n            {(this.props.loggedInUser) &&\r\n              <p className=\"flex column\">\r\n                <small>welcome!</small>\r\n                {this.props.loggedInUser.username}\r\n              </p>\r\n            }\r\n            {button}\r\n          </div>\r\n          <CSSTransition\r\n            in={this.state.toggleLogin}\r\n            timeout={700}\r\n            classNames=\"modal\"\r\n            unmountOnExit>\r\n            <Login\r\n              className=\"home-page-login\"\r\n              toggleLogin={this.toggleLogin} />\r\n          </CSSTransition>\r\n          <div className=\"home-page-header-container flex\">\r\n            <div className=\"header-image flex align-center justify-center fill-width fill-height\">\r\n              <div className=\"login-get-started-container flex align-center justify-center align-center\">\r\n                <div className=\"home-page-logo-get-started flex column align-center\">\r\n                  <div className=\"home-page-header-container-logo-img fill-width fill-height\"></div>\r\n                  <div className=\"text-center\">\r\n                    <h2>Manage your tasks in a fun and easy way</h2>\r\n                  </div>\r\n                  <div className=\"get-started-btn\">\r\n                    <Fab variant=\"extended\">\r\n                      <p className=\"uppercase\" onClick={this.createBoard}>\r\n                        get started\r\n                    </p>\r\n                    </Fab>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        <section className=\"home-page-boards-list flex wrap colum justify-center\">\r\n          <div className=\"home-page-boards-list-img\"></div>\r\n          <p className=\"home-page-boards-list-start-new-board-right-text flex\">\r\n            We, in Trebello, believe that simplicity and style must go together,\r\n            that's why we made our brand simple and easy to use for everyone.<br /> <br />\r\n            Maximize your team workflow and take them one step ahead.</p>\r\n        </section>\r\n\r\n        <BoardsList boards={this.props.boards} user={this.props.loggedInUser} duplicateBoard={this.duplicateBoard} />\r\n\r\n        <section className=\"home-page-footer flex column align-center justify-center\">\r\n          <h2 className=\"uppercase\"> our team </h2>\r\n          <div className=\"home-pagge-footer-team-members-cards-container flex wrap justify-center\">\r\n\r\n            <div className=\"home-page-footer-team-member-card flex column align-center justify-center\">\r\n              <div className=\"home-page-footer-team-member-card-member-img vlad\"></div>\r\n              <p>Vlad Batalin</p>\r\n              <small>Front-End development and Design</small>\r\n              <div className=\"flex\">\r\n                <LinkedInIcon className=\"linkedInIcon\"></LinkedInIcon>\r\n                <FacebookIcon className=\"faceBookIcon\"></FacebookIcon>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"home-page-footer-team-member-card flex column align-center justify-center\">\r\n              <div className=\"home-page-footer-team-member-card-member-img margad\"></div>\r\n              <p>Margad Taikhir</p>\r\n              <small>Front-End development with Back-End support</small>\r\n              <div className=\"flex\">\r\n                <LinkedInIcon className=\"linkedInIcon\"></LinkedInIcon>\r\n                <FacebookIcon className=\"faceBookIcon\"></FacebookIcon>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"home-page-footer-team-member-card flex column align-center justify-center\">\r\n              <div className=\"home-page-footer-team-member-card-member-img paolo\"></div>\r\n              <p>Paolo Groppi</p>\r\n              <small>Full-Stack development</small>\r\n              <div className=\"flex\">\r\n                <a href=\"https://www.linkedin.com/in/paolo-groppi-6ba84117b\" target=\"blank\"><LinkedInIcon className=\"linkedInIcon\"></LinkedInIcon></a>\r\n                <a href=\"https://www.facebook.com/karma.tova\" target=\"blank\"><FacebookIcon className=\"faceBookIcon\"></FacebookIcon></a>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </section>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    boards: state.boards.boards,\r\n    board: state.boards.board,\r\n    loggedInUser: state.user.loggedInUser\r\n  };\r\n};\r\nconst mapDispatchToProps = {\r\n  loadBoards,\r\n  loadBoard,\r\n  createBoard,\r\n  getLoggedInUser,\r\n  logout\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nexport default function LoadPage() {\r\n  return (\r\n    <div className=\"loading-page flex column align-center justify-center\">\r\n      <h2 className=\"uppercase\"> just a moment :)</h2>\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class TopMenuOptions extends Component {\r\n\r\n    onDuplicateColumn = () => {\r\n\r\n        let column = this.props.column;\r\n        let board = this.props.board;\r\n        let newColumn = { ...this.props.column }\r\n        const newId = utils.getRandomId();\r\n        const idx = board.columnOrder.findIndex(columnId => columnId === column.id);\r\n\r\n        newColumn.id = newId;\r\n        board.columnOrder.splice(idx + 1, 0, newColumn.id);\r\n\r\n        newColumn.taskIds.forEach(taskId => {\r\n\r\n            const clonedTaskId = utils.getRandomId();\r\n            const taskIdIdx = column.taskIds.findIndex(taskIdx => taskIdx === taskId);\r\n\r\n            board.tasks[clonedTaskId] = { ...board.tasks[taskId], id: clonedTaskId }\r\n            newColumn.taskIds = [...newColumn.taskIds];\r\n            newColumn.taskIds.splice(taskIdIdx, 1, clonedTaskId);\r\n        });\r\n\r\n        board.columns[newId] = newColumn;\r\n        this.props.toggleTopMenuOptions(column.id);\r\n        const msg = `'${column.title}' was duplicated by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(board, msg, notificationType);\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"top-menu-options\">\r\n            <h2 className=\"text-center capitalize\">options menu</h2>\r\n            <div className=\"options-container flex column\">\r\n                <p className=\"capitalize\" onClick={this.onDuplicateColumn}>duplicate list</p>\r\n                <p className=\"capitalize\" onClick={() => this.props.onDelete(this.props.column.id)}>delete list</p>\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n}","import TaskPreview from './TaskPreview';\r\nimport VideoPreview from './VideoPreview';\r\nimport ImagePreview from './ImagePreview';\r\n\r\nexport default {\r\n    text: TaskPreview,\r\n    video: VideoPreview,\r\n    image: ImagePreview\r\n}","import React, { Component } from \"react\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport utils from '../../services/utils'\r\n\r\nexport default class TaskPreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.taskContainer = React.createRef();\r\n    }\r\n\r\n    // need to see why it doesn't re-render tasklist\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.task.type !== this.props.task.type) {\r\n            console.log('inside')\r\n            this.props.toggleRender();\r\n        }\r\n    }\r\n\r\n    toggleMiniDetails = ev => {\r\n        ev.stopPropagation();\r\n        const miniTask = {\r\n            task: this.props.task,\r\n            boundingClientRect: this.taskContainer.current.getBoundingClientRect(),\r\n            previewType: this.props.task.type,\r\n            column: this.props.column\r\n        };\r\n        this.props.toggleMiniDetails(miniTask);\r\n    }\r\n\r\n    render() {\r\n        const { task, provided, innerRef, isDragging, style, showEditBtn, onTaskId } = this.props;\r\n        return (\r\n            <section ref={this.taskContainer}>\r\n                <div\r\n                    className={\"task-container\" + (isDragging ? \" isDragging\" : \"\")}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={innerRef}\r\n                    style={style}\r\n                >\r\n                    {task.url && <img title={task.id} alt=\"task\" src={task.url} />}\r\n\r\n                    <div className=\"task-container-labels flex wrap\">\r\n                        {task.labels.map(label => {\r\n                            return <div key={label} className={label + ' small-label'}>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                    <p className=\"task-container-title\">{task.title}</p>\r\n                    {(showEditBtn && (onTaskId === task.id)) ?\r\n                        <CreateIcon className=\"task-container-open-menu\"\r\n                            onClick={e => this.toggleMiniDetails(e)} />\r\n                        : ''}\r\n\r\n                    <div className={\"bottom-container grid-container flex\" + (task.description === '' ? ' row-reverse' : '')}>\r\n                        {(task.description !== '') ?\r\n                            <div className=\"grid-item justify-self-center align-self-center\">\r\n                                <SubjectIcon />\r\n                            </div>\r\n                            : <div className=\"grid-item\"></div>\r\n                        }\r\n\r\n                        {(task.todos.length > 0) ?\r\n                            <div className=\"grid-item align-center flex\">\r\n                                <div className=\"flex align-center\">\r\n                                    <CheckBoxIcon />\r\n                                    <p>{task.todosDone + '/' + task.todos.length}</p>\r\n                                </div>\r\n                            </div>\r\n                            : <div className=\"grid-item\"></div>\r\n                        }\r\n                        <div className=\"team-members-container grid-item\">\r\n                            <div className=\"flex justify-end\">\r\n                                {(task.taskTeamMembers.map(member => {\r\n                                    return <div key={member._id} className=\"team-member-icon-wrapper flex align-center\" style={{ backgroundColor: '#dfe1e6' }} >\r\n                                        <div className=\"team-member-icon\">\r\n                                            <p className=\"flex align-center\" style={{ color: '#172b4d' }}>\r\n                                                {utils.createUserIcon(member.firstName,\r\n                                                    member.lastName)}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n                                }))\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport utils from '../../services/utils'\r\n\r\n\r\nexport default class VideoPreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.videoContainer = React.createRef();\r\n    }\r\n\r\n    toggleMiniDetails = ev => {\r\n        ev.stopPropagation();\r\n        const miniTask = {\r\n            task: this.props.task,\r\n            boundingClientRect: this.videoContainer.current.getBoundingClientRect(),\r\n            previewType: this.props.task.type,\r\n            column: this.props.column\r\n        };\r\n        this.props.toggleMiniDetails(miniTask);\r\n    }\r\n\r\n    render() {\r\n        const { task, provided, innerRef, isDragging, style, showEditBtn, onTaskId } = this.props;\r\n        return (\r\n            <section ref={this.videoContainer}>\r\n                <div\r\n                    className={\"task-container without-padding flex column\" + (isDragging ? \" isDragging\" : \"\")}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={innerRef}\r\n                    style={style}\r\n                >\r\n                    {task.type === 'video' ?\r\n                        <iframe title={task.id} type='text/html' width=\"252\" height=\"142\" allowFullScreen=\"allowfullscreen\" src={task.url} security=\"restricted\"></iframe> :\r\n                        <img title={task.id} alt=\"task\" src={task.url} />\r\n                    }\r\n                    <div className=\"task-container-labels flex\">\r\n                        {task.labels.map(label => {\r\n                            return <div key={label} className={label + ' small-label'}>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                    <p className=\"task-container-title\">{task.title}</p>\r\n                    {(showEditBtn && (onTaskId === task.id)) ?\r\n                        <CreateIcon className=\"task-container-open-menu\"\r\n                            onClick={e => this.toggleMiniDetails(e)} />\r\n                        : ''}\r\n                    {(task.description !== '') ?\r\n                        <div className=\"grid-item justify-self-center align-self-center\">\r\n                            <SubjectIcon />\r\n                        </div>\r\n                        : <div className=\"grid-item\"></div>\r\n                    }\r\n                    {(task.todos.length > 0) ?\r\n                        <div className=\"grid-item align-center flex\">\r\n                            <div className=\"flex\">\r\n                                <CheckBoxIcon />\r\n                                <p>{task.todosDone + '/' + task.todos.length}</p>\r\n                            </div>\r\n                        </div>\r\n                        : <div className=\"grid-item\"></div>\r\n                    }\r\n                    <div className=\"team-members-container grid-item\">\r\n                        <div className=\"flex justify-end\">\r\n                            {(task.taskTeamMembers.map(member => {\r\n                                return <div key={member._id} className=\"team-member-icon-wrapper flex align-center\" style={{ backgroundColor: '#dfe1e6' }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"flex align-center\" style={{ color: '#172b4d' }}>\r\n                                            {utils.createUserIcon(member.firstName,\r\n                                                member.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            }))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport utils from '../../services/utils'\r\n\r\n\r\nexport default class ImagePreview extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.imgContainer = React.createRef();\r\n    }\r\n\r\n    toggleMiniDetails = ev => {\r\n        ev.stopPropagation();\r\n        const miniTask = {\r\n            task: this.props.task,\r\n            boundingClientRect: this.imgContainer.current.getBoundingClientRect(),\r\n            previewType: this.props.task.type,\r\n            column: this.props.column,\r\n        };\r\n        this.props.toggleMiniDetails(miniTask);\r\n    }\r\n\r\n    render() {\r\n        const { task, provided, innerRef, isDragging, style, showEditBtn, onTaskId } = this.props;\r\n        return (\r\n            <section ref={this.imgContainer}>\r\n                <div\r\n                    className={\"task-container without-padding flex column align center\" + (isDragging ? \" isDragging\" : \"\")}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={innerRef}\r\n                    style={style}\r\n                >\r\n                    <img title={task.id} alt=\"task\" src={task.url} />\r\n                    <div className=\"task-container-labels flex wrap\">\r\n                        {task.labels.map(label => {\r\n                            return <div key={label} className={label + ' small-label'}>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                    <p className=\"task-container-title\">{task.title}</p>\r\n                    {(showEditBtn && (onTaskId === task.id)) ?\r\n                        <CreateIcon className=\"task-container-open-menu\"\r\n                            onClick={e => this.toggleMiniDetails(e)} />\r\n                        : ''}\r\n                    <div className={\"bottom-container grid-container flex\" + (task.description === '' ? ' row-reverse' : '')}>\r\n                        {(task.description !== '') ?\r\n                            <div className=\"grid-item justify-self-center align-self-center\">\r\n                                <SubjectIcon />\r\n                            </div>\r\n                            : <div className=\"grid-item\"></div>\r\n                        }\r\n                        {(task.todos.length > 0) ?\r\n                            <div className=\"grid-item align-center flex\">\r\n                                <div className=\"flex\">\r\n                                    <CheckBoxIcon />\r\n                                    <p>{task.todosDone + '/' + task.todos.length}</p>\r\n                                </div>\r\n                            </div>\r\n                            : <div className=\"grid-item\"></div>\r\n                        }\r\n                        <div className=\"team-members-container grid-item\">\r\n                            <div className=\"flex justify-end\">\r\n                                {(task.taskTeamMembers.map(member => {\r\n                                    return <div key={member._id} className=\"team-member-icon-wrapper flex align-center\" style={{ backgroundColor: '#dfe1e6' }} >\r\n                                        <div className=\"team-member-icon\">\r\n                                            <p className=\"flex align-center\" style={{ color: '#172b4d' }}>\r\n                                                {utils.createUserIcon(member.firstName,\r\n                                                    member.lastName)}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n                                }))\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport mapDynamicComponents from \"./mapDynamicComponents\"\r\n\r\nexport default class DynamicComponent extends Component {\r\n    state = {\r\n        componentType: 'text',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ componentType: this.props.task.type });\r\n    }\r\n\r\n    getComponent() {\r\n        return mapDynamicComponents[this.state.componentType];\r\n    }\r\n\r\n    render() {\r\n        const Cmp = this.getComponent();\r\n        return <React.Fragment>\r\n            <Cmp\r\n                toggleRender={this.props.toggleRender}\r\n                column={this.props.column}\r\n                provided={this.props.provided}\r\n                innerRef={this.props.innerRef}\r\n                task={this.props.task}\r\n                isDragging={this.props.isDragging}\r\n                style={this.props.style}\r\n                onTaskId={this.props.onTaskId}\r\n                showEditBtn={this.props.showEditBtn}\r\n                toggleMiniDetails={this.props.toggleMiniDetails}\r\n                user={this.props.user}\r\n            >\r\n            </Cmp>\r\n        </React.Fragment>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\n\r\nimport DynamicComponent from './dynamics/DynamicComponent';\r\n\r\nexport default class TasksList extends Component {\r\n\r\n    state = {\r\n        showAddForm: false,\r\n        currTaskId: '',\r\n        onTaskId: '',\r\n        showTaskDetails: false,\r\n    }\r\n\r\n    toggleTaskDetails = id => {\r\n        this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails, currTaskId: id || prevState.currTaskId }));\r\n    }\r\n\r\n    canOpenTaskDetails = taskId => {\r\n        return (this.state.showTaskDetails && this.state.currTaskId === taskId)\r\n    }\r\n\r\n    showEditBtn = (id) => {\r\n        this.setState({ showEditBtn: true, onTaskId: id })\r\n    }\r\n\r\n    hideEditBtn = () => {\r\n        this.setState({ showEditBtn: false })\r\n    }\r\n\r\n    //is it re-rendering at all???\r\n    toggleRender = _ => {\r\n        console.log('tasklist');\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const { tasks, provided, innerRef, isDraggingOver } = this.props;\r\n\r\n        return (\r\n            <section\r\n                className={\"task-list\" + (isDraggingOver ? \" isDraggingOver\" : \"\")}\r\n                {...provided.droppableProps}\r\n                ref={innerRef}\r\n            >\r\n                {tasks.map((task, idx) => (\r\n                    <div key={task.id} className=\"task-list-container\">\r\n                        <Draggable draggableId={task.id} index={idx}>\r\n                            {(provided, snapshot) => (\r\n                                <NaturalDragAnimation\r\n                                    style={provided.draggableProps.style}\r\n                                    snapshot={snapshot}\r\n                                    rotationMultiplier={1.3}\r\n                                >\r\n                                    {style => (\r\n                                        <div onClick={_ => this.props.toggleTaskDetails({ id: task.id, column: this.props.column })}\r\n                                            onMouseEnter={() => this.showEditBtn(task.id)}\r\n                                            onMouseLeave={() => this.hideEditBtn()}\r\n                                        >\r\n                                            <DynamicComponent\r\n                                                toggleRender={this.toggleRender}\r\n                                                provided={provided}\r\n                                                innerRef={provided.innerRef}\r\n                                                task={task}\r\n                                                column={this.props.column}\r\n                                                isDragging={snapshot.isDragging}\r\n                                                style={style}\r\n                                                onTaskId={this.state.onTaskId}\r\n                                                showEditBtn={this.state.showEditBtn}\r\n                                                toggleMiniDetails={this.props.toggleMiniDetails}\r\n                                                user={this.props.user}\r\n                                            >\r\n                                            </DynamicComponent>\r\n                                        </div>\r\n                                    )}\r\n                                </NaturalDragAnimation>\r\n                            )}\r\n                        </Draggable>\r\n                    </div>\r\n                ))}\r\n                {provided.placeholder}\r\n            </section>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport utils from '../services/utils'\r\n\r\nexport default class TaskForm extends Component {\r\n\r\n    state = {\r\n        task: {\r\n            id: utils.getRandomId(),\r\n            title: '',\r\n            createdAt: Date.now(),\r\n            dueDate: '',\r\n            importance: '',\r\n            description: '',\r\n            type: 'text',\r\n            labels: [],\r\n            todos: [],\r\n            creator: {},\r\n            taskTeamMembers: []\r\n        },\r\n        edit: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nameInput.focus();\r\n        this.setFormDataForEdit();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.task !== this.props.task) {\r\n            this.setFormDataForEdit();\r\n        }\r\n    }\r\n\r\n    setFormDataForEdit() {\r\n        if (this.props.task) {\r\n            const task = this.props.task;\r\n            this.setState({\r\n                task: {\r\n                    id: task.id,\r\n                    title: task.title,\r\n                    createdAt: task.createdAt,\r\n                    dueDate: task.dueDate,\r\n                    importance: task.importance,\r\n                    description: this.props.description,\r\n                    type: task.type,\r\n                    labels: task.labels,\r\n                    todos: task.todos,\r\n                    creator: task.creator,\r\n                    taskTeamMembers: task.taskTeamMembers\r\n                },\r\n                edit: true\r\n            })\r\n        }\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        const fieldName = ev.target.name;\r\n        const value = ev.target.value;\r\n        this.setState({ task: { ...this.state.task, [fieldName]: value } })\r\n    }\r\n\r\n    save = (ev) => {\r\n        ev.preventDefault();\r\n        this.checkIfUrlAndSave(this.state.task.title);\r\n    }\r\n\r\n    checkIfUrlAndSave = (url) => {\r\n        const youtubeREGEX = /^(?:https?:\\/\\/)?(?:m\\.|www\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))((\\w|-){11})(?:\\S+)?$/;\r\n        const imgREGEX = /.(jpg|jpeg|png|gif)\\/?$/;\r\n        if (url.match(youtubeREGEX)) {\r\n            const newUrl = url.replace('watch?v=', 'embed/');\r\n            return this.setState(prevState => ({ task: { ...prevState.task, title: '', type: 'video', url: newUrl } }), _ => {\r\n                this.saveTask();\r\n            });\r\n        } else if (url.match(imgREGEX)) {\r\n            return this.setState(prevState => ({ task: { ...prevState.task, title: '', type: 'image', url } }), _ => {\r\n                this.saveTask();\r\n            });\r\n        }\r\n        this.saveTask();\r\n    }\r\n\r\n    saveTask = _ => {\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [this.state.task.id]: this.state.task\r\n            }\r\n        };\r\n        const column = this.props.column;\r\n        const id = this.state.task.id;\r\n        if (!column.taskIds.includes(id)) column.taskIds.push(id);\r\n        const msg = (!this.state.edit) ?\r\n            `The task '${this.state.task.title}' was added by ${this.props.user}` :\r\n            `${this.props.user} edited the task '${this.state.task.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.closeUpdateForm();\r\n        if (this.props.toggleUpdateForm) this.props.toggleUpdateForm();\r\n        if (this.props.toggleTaskDetails) this.props.toggleTaskDetails();\r\n    }\r\n\r\n    textAreaAdjust = ev => {\r\n        ev.target.style.height = \"1px\"\r\n        ev.target.style.height = (25 + ev.target.scrollHeight) + \"px\";\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"task-form\" >\r\n            <form onSubmit={this.save} onClick={ev => ev.stopPropagation()}>\r\n                <div className=\"flex column\" >\r\n\r\n                    <textarea type=\"text\"\r\n                        onKeyUp={this.textAreaAdjust}\r\n                        placeholder=\"Enter a title for this card...\"\r\n                        name=\"title\"\r\n                        ref={(input) => { this.nameInput = input; }}\r\n                        onChange={this.inputChange} value={this.state.task.title} />\r\n                    <div className=\"save-btn-container flex align-center\">\r\n                        <button className=\"task-form-save-btn save capitalize\">add card</button>\r\n                        <CloseIcon className=\"task-form-back-btn\" onClick={(ev) => { ev.stopPropagation(); this.props.closeUpdateForm() }} />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport NaturalDragAnimation from 'natural-drag-animation-rbdnd';\r\n\r\n// import AddIcon from '@material-ui/icons/Add';\r\n\r\nimport TopMenuOptions from './TopMenuOptions'\r\nimport TasksList from './TasksList';\r\nimport TaskForm from '../cmps/TaskForm'\r\n\r\nexport default class BoardColumns extends Component {\r\n    state = {\r\n        timer: null,\r\n        title: ''\r\n    }\r\n\r\n    onDelete = (id) => {\r\n        const board = { ...this.props.board };\r\n        const columnOrder = board.columnOrder;\r\n        const column = board.columns[id];\r\n        for (const taskId of column.taskIds) {\r\n            for (const taskKey in board.tasks) {\r\n                if (taskId === taskKey) {\r\n                    delete board.tasks[taskKey];\r\n                }\r\n            }\r\n        }\r\n        delete board.columns[id];\r\n        const idx = columnOrder.findIndex(column => column === id);\r\n        columnOrder.splice(idx, 1);\r\n        const msg = `'${column.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger';\r\n        this.props.updateBoard(board, msg, notificationType);\r\n    }\r\n\r\n    onDragEnd = result => {\r\n        const { destination, source, draggableId, type } = result;\r\n\r\n        if (!destination) {\r\n            return;\r\n        };\r\n\r\n        if (destination.droppableId === source.droppableId &&\r\n            destination.index === source.index) {\r\n            return;\r\n        };\r\n\r\n        if (type === 'column') {\r\n            const newColumnOrder = this.props.board.columnOrder.slice();\r\n            newColumnOrder.splice(source.index, 1);\r\n            newColumnOrder.splice(destination.index, 0, draggableId);\r\n            const columnTitle = this.props.board.columns[draggableId].title;\r\n            const newBoard = {\r\n                ...this.props.board,\r\n                columnOrder: newColumnOrder\r\n            }\r\n            const msg = `'${columnTitle}' was moved by ${this.props.user}`;\r\n            const notificationType = 'success';\r\n            return this.props.updateBoard(newBoard, msg, notificationType);\r\n        };\r\n\r\n        const start = this.props.board.columns[source.droppableId];\r\n        const finish = this.props.board.columns[destination.droppableId];\r\n\r\n        if (start === finish) {\r\n            const newTaskIds = start.taskIds.slice();\r\n            newTaskIds.splice(source.index, 1);\r\n            newTaskIds.splice(destination.index, 0, draggableId);\r\n            const newColumn = {\r\n                ...start,\r\n                taskIds: newTaskIds\r\n            };\r\n            const newBoard = {\r\n                ...this.props.board,\r\n                columns: {\r\n                    ...this.props.board.columns,\r\n                    [newColumn.id]: newColumn\r\n                }\r\n            };\r\n            const taskTitle = this.props.board.tasks[draggableId].title;\r\n            const msg = `${this.props.user} changed the position of the task '${taskTitle}'`;\r\n            const notificationType = 'success';\r\n            return this.props.updateBoard(newBoard, msg, notificationType);\r\n        };\r\n\r\n        const startTaskIds = start.taskIds.slice();\r\n        startTaskIds.splice(source.index, 1);\r\n        const newStart = {\r\n            ...start,\r\n            taskIds: startTaskIds\r\n        };\r\n\r\n        const finishTaskIds = finish.taskIds.slice();\r\n        finishTaskIds.splice(destination.index, 0, draggableId);\r\n        const newFinish = {\r\n            ...finish,\r\n            taskIds: finishTaskIds\r\n        };\r\n\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            columns: {\r\n                ...this.props.board.columns,\r\n                [newStart.id]: newStart,\r\n                [newFinish.id]: newFinish\r\n            }\r\n        };\r\n        const taskTitle = this.props.board.tasks[draggableId].title;\r\n        const msg = `${this.props.user} moved the task '${taskTitle}' from '${newStart.title}' to '${newFinish.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    setColumnName = (columnId) => {\r\n        const columnTitle = this.props.board.columns[columnId].title;\r\n        this.setState({ title: columnTitle });\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        this.setState({ title: ev.target.innerText });\r\n    }\r\n\r\n    saveColumnName = (columnId, title) => {\r\n        const columnTitle = this.props.board.columns[columnId].title;\r\n        if (columnTitle === title) return;\r\n\r\n        const updatedBoard = { ...this.props.board };\r\n        updatedBoard.columns[columnId].title = title;\r\n\r\n        const msg = `${this.props.user} changed the name of '${columnTitle}' to '${title}'`;\r\n        const notificationType = 'success';\r\n\r\n        this.props.updateBoard(updatedBoard, msg, notificationType);\r\n    }\r\n\r\n    addCardText(column) {\r\n        return (column.taskIds.length === 0) ? 'Add a card' : 'Add another card';\r\n    }\r\n\r\n    render() {\r\n        const { currColumnId, showTopMenuOptions, showAddForm } = this.props;\r\n        return (\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"all-columns\" direction=\"horizontal\" type=\"column\">\r\n                    {provided => (\r\n                        <div\r\n                            className=\"board-columns flex\"\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}>\r\n                            {this.props.board.columnOrder.map((columnKey, idx) => {\r\n\r\n                                const column = this.props.board.columns[columnKey];\r\n                                const tasks = column.taskIds.map(currId => this.props.board.tasks[currId]);\r\n\r\n                                return (\r\n                                    <Draggable draggableId={columnKey} key={column.id} index={idx}>\r\n\r\n                                        {(provided, snapshot) => (\r\n                                            <NaturalDragAnimation\r\n                                                style={provided.draggableProps.style}\r\n                                                snapshot={snapshot}\r\n                                                rotationMultiplier={1.3}\r\n                                            >\r\n                                                {style => (\r\n\r\n                                                    <div\r\n                                                        className=\"board-columns-item\"\r\n                                                        {...provided.draggableProps}\r\n                                                        ref={provided.innerRef}\r\n                                                        style={style}\r\n                                                    >\r\n                                                        <div\r\n                                                            className=\"board-columns-item-header flex align-center space-between\"\r\n                                                            {...provided.dragHandleProps}\r\n                                                        >\r\n                                                            <div className=\"board-columns-item-header-h2-wrapper\">\r\n                                                                <h2\r\n                                                                    contentEditable='true'\r\n                                                                    spellCheck=\"false\"\r\n                                                                    onFocus={() => this.setColumnName(column.id)}\r\n                                                                    onInput={(ev) => this.emitChange(ev)}\r\n                                                                    onBlur={() => this.saveColumnName(column.id, this.state.title)}\r\n                                                                    suppressContentEditableWarning={true}\r\n                                                                >\r\n                                                                    {column.title}\r\n                                                                </h2>\r\n                                                            </div>\r\n\r\n\r\n\r\n                                                            <div className=\"board-columns-item-header-menu-btn-icon\"\r\n                                                                onClick={(ev) => { ev.stopPropagation(); this.props.openEditColumn(column.id) }}> ... </div>\r\n                                                        </div>\r\n\r\n\r\n\r\n                                                        {showTopMenuOptions && (currColumnId === column.id) ?\r\n                                                            <TopMenuOptions\r\n                                                                onDelete={this.onDelete}\r\n                                                                column={column}\r\n                                                                board={this.props.board}\r\n                                                                updateBoard={this.props.updateBoard}\r\n                                                                toggleTopMenuOptions={this.props.closeEditColumn}\r\n                                                                user={this.props.user}\r\n                                                            />\r\n                                                            : ''}\r\n                                                        <Droppable droppableId={column.id} type=\"task\">\r\n                                                            {(provided, snapshot) => {\r\n                                                                return <TasksList\r\n                                                                reRender={this.reRender}\r\n                                                                    board={this.props.board}\r\n                                                                    innerRef={provided.innerRef}\r\n                                                                    provided={provided}\r\n                                                                    tasks={tasks}\r\n                                                                    isDraggingOver={snapshot.isDraggingOver}\r\n                                                                    column={column}\r\n                                                                    toggleTaskDetails={this.props.toggleTaskDetails}\r\n                                                                    updateBoard={this.props.updateBoard}\r\n                                                                    toggleMiniDetails={this.props.toggleMiniDetails}\r\n                                                                    user={this.props.user}\r\n                                                                >\r\n                                                                </TasksList>\r\n                                                            }}\r\n                                                        </Droppable>\r\n                                                        {(!showAddForm || currColumnId !== column.id) &&\r\n                                                            <div className=\"task-list-footer flex align-center\">\r\n                                                                <div className=\"task-list-footer-add-task fill-width\"\r\n                                                                    onClick={(ev) => { ev.stopPropagation(); this.props.openAddForm(column.id) }}>\r\n                                                                    <span className=\"add-icon\">+</span>{this.addCardText(column)}</div>\r\n                                                            </div>\r\n                                                        }\r\n                                                        {showAddForm && (currColumnId === column.id) ?\r\n                                                            <TaskForm\r\n                                                                user={this.props.user}\r\n                                                                board={this.props.board}\r\n                                                                column={column}\r\n                                                                closeUpdateForm={this.props.closeAddForm}\r\n                                                                updateBoard={this.props.updateBoard}\r\n                                                            />\r\n                                                            : ''\r\n                                                        }\r\n                                                    </div>\r\n                                                )}\r\n                                            </NaturalDragAnimation>\r\n                                        )}\r\n                                    </Draggable>\r\n                                )\r\n                            })}\r\n                            {provided.placeholder}\r\n                        </div >)}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nexport default class BoardHistory extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"boardhistory-container column\">\r\n                <div className=\"flex column\">\r\n                    <div className=\"uppercase text-center\">\r\n                        <h2>board history :</h2>\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n                <ul className=\"clean-list\">\r\n                    {this.props.history.map(item => (\r\n                        <li key={item.id}><div className=\"msg\">{item.msg}<br />{moment(item.time).calendar()}</div><hr /></li>\r\n\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport utils from '../services/utils'\r\n\r\nexport default class BoardTeamMembers extends Component {\r\n    state = {\r\n        currentBoardMembers: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({ currentBoardMembers: this.props.board.teamMembers });\r\n    }\r\n\r\n    updateTeamMembers = (user) => {\r\n        const board = this.props.board;\r\n        const teamMembers = board.teamMembers;\r\n        let msg = '';\r\n        let notificationType = '';\r\n        if (teamMembers.find(teamMember => teamMember._id === user._id)) {\r\n            const idx = teamMembers.findIndex(teamMember => teamMember._id === user._id);\r\n            teamMembers.splice(idx, 1);\r\n            msg = `${user.username} was removed from this board`;\r\n            notificationType = 'danger';\r\n        } else {\r\n            teamMembers.push(user);\r\n            msg = `${user.username} was added to this board`;\r\n            notificationType = 'success';\r\n        }\r\n        this.setState({ currentBoardMembers: teamMembers });\r\n        this.props.updateBoard(board, msg, notificationType);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        const currentBoardMembers = this.state.currentBoardMembers;\r\n        const users = this.props.users.filter(user => !currentBoardMembers.find(boardMember => user._id === boardMember._id));\r\n        return (\r\n            <div className=\"board-team-members-container text-center column\"\r\n               onClick={(ev) => this.onStopPropagation(ev)}>\r\n\r\n                <div className=\"members-container-colors-container flex column\">\r\n                    <div className=\"pointer uppercase\"><h2>board members :</h2></div>\r\n                    <hr />\r\n                    {this.state.currentBoardMembers.map(teamMember => {\r\n                        return (\r\n                            <div key={teamMember._id} className=\"team-member flex align-center\"\r\n                                onClick={() => this.updateTeamMembers(teamMember)}>\r\n                                <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"capitalize\" style={{ color: '#172b4d' }}>\r\n                                            {utils.createUserIcon(teamMember.firstName, teamMember.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"capitalize\">{teamMember.firstName} {teamMember.lastName}</span>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n                <div className=\"add-team-members flex column\">\r\n                    <p className=\"pointer uppercase\">add / remove users</p>\r\n                    {users.map(user => {\r\n                        return (\r\n                            <div key={user._id} className=\"team-member flex align-center\"\r\n                                onClick={() => this.updateTeamMembers(user)}>\r\n                                <div className=\"team-member-icon-wrapper flex align-center justify-center\"\r\n                                    style={{ backgroundColor: '#dfe1e6' }}>\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p className=\"capitalize\" style={{ color: '#172b4d' }}>\r\n                                            {utils.createUserIcon(user.firstName, user.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"capitalize\">{user.firstName} {user.lastName}</span>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class ColumnAddForm extends Component {\r\n\r\n    state = {\r\n        column: {\r\n            id: utils.getRandomId(),\r\n            title: '',\r\n            taskIds: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.nameInput.focus();\r\n        this.setFormDataForEdit();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.column !== this.props.column) {\r\n            this.setFormDataForEdit();\r\n        }\r\n    }\r\n\r\n    setFormDataForEdit() {\r\n        if (this.props.column) {\r\n            const column = this.props.column;\r\n            this.setState({\r\n                column: {\r\n                    id: column.id,\r\n                    title: column.title,\r\n                    taskIds: column.taskIds\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let value = ev.target.value;\r\n        this.setState({ column: { ...this.state.column, [fieldName]: value } })\r\n    }\r\n\r\n    saveColumn = (ev) => {\r\n        ev.preventDefault();\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            columns: {\r\n                ...this.props.board.columns,\r\n                [this.state.column.id]: this.state.column\r\n            }\r\n        };\r\n        const id = this.state.column.id;\r\n        const columnOrder = newBoard.columnOrder;\r\n        if (!columnOrder.includes(id)) columnOrder.push(id);\r\n        const msg = `'${this.state.column.title}' was added by ` + this.props.user;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.toggleAddForm();\r\n    }\r\n\r\n    render() {\r\n        return <form className=\"add-column-form-container flex column space-between\" onSubmit={this.saveColumn}>\r\n            <input\r\n                ref={(input) => { this.nameInput = input; }}\r\n                type='text'\r\n                placeholder='Enter list title...'\r\n                name='title'\r\n                onChange={this.inputChange}\r\n                value={this.state.column.title} />\r\n            <div className=\"save-btn-container flex\">\r\n                <button className=\"add-column-save-btn capitalize\"\r\n                    variant=\"contained\">add list</button>\r\n\r\n                <CloseIcon className=\"add-column-back-to-board flex align-center\"\r\n                    onClick={this.props.toggleAddForm} />\r\n\r\n            </div>\r\n        </form>\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Filter extends Component {\r\n\r\n    state = {\r\n        filterBy: {\r\n            title: '',\r\n            teamMembers: ''\r\n        }\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let value = ev.target.value;\r\n        this.setState(prevState => ({ filterBy: { ...prevState.filterBy, [fieldName]: value } }), () => this.props.onFilter(this.state.filterBy));\r\n    }\r\n\r\n    render() {\r\n        const teamMembers = this.props.teamMembers;\r\n        return <div className=\"board-page-nav-bar-filters-item flex\">\r\n\r\n            <input type=\"text\" placeholder=\"Search card by name\"\r\n                value={this.state.filterBy.title}\r\n                onChange={this.inputChange} name=\"title\">\r\n            </input>\r\n\r\n            <div style={{ background: (this.props.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n            <select name=\"teamMembers\" style={{\r\n                color: (this.props.isDarkBackground) ? 'white' : 'black',\r\n                background: (this.props.isDarkBackground) ? '#0000006b' : '#ffffff8e'\r\n            }} onChange={this.inputChange}>\r\n                <option value=''>All Team Members</option>\r\n                {teamMembers.map(teamMember => (\r\n                    <option className=\"capitalize\" key={teamMember._id} value={`${teamMember.username}`}>{teamMember.firstName} {teamMember.lastName}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    }\r\n\r\n}","import React, { Component } from 'react'\r\n\r\nexport default class Sort extends Component {\r\n\r\n    state = {\r\n        sortBy: '',\r\n        sortOrder: 'asc'\r\n    }\r\n\r\n    inputChange = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let value = ev.target.value;\r\n        this.setState(prevState => ({ filterBy: { ...prevState.filterBy, [fieldName]: value } }));\r\n    }\r\n\r\n    onSortBy = (ev) => {\r\n        let fieldName = ev.target.name;\r\n        let sortOrder = (this.state.sortOrder === 'asc') ? 'desc' : 'asc';\r\n        this.setState({ sortBy: fieldName, sortOrder: sortOrder }, () => this.props.onSort(this.state.sortBy, this.state.sortOrder));\r\n    }\r\n\r\n    toggleButtonName = () => {\r\n        return (this.state.sortOrder === 'asc') ? 'Newest Cards' : 'Oldest Cards';\r\n    }\r\n\r\n    render() {\r\n        return <div  className=\"board-page-nav-bar-filters-item fill-height\">\r\n            <button className={`nav-btn fill-height\r\n            ${(this.props.isDarkBackground) ? 'dark' : 'light'}`}\r\n                onClick={this.onSortBy}\r\n                name='createdAt'>{this.toggleButtonName()}</button>\r\n\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nimport utils from '../services/utils';\r\n\r\nimport office from '../unsplashdefaultdata/officequery';\r\n\r\nexport default class SplashMenu extends Component {\r\n\r\n    state = {\r\n        splashImagesUrls: office,\r\n        filterByName: ''\r\n    }\r\n\r\n    inputChange = ev => {\r\n        this.setState({ filterByName: ev.target.value });\r\n    }\r\n\r\n    onSave = async () => {\r\n        try {\r\n            const splashImages = await utils.getImagesFromUnsplash(this.state.filterByName)\r\n            let splashImagesUrls = [];\r\n            splashImages.forEach(image => {\r\n                const UrlIndx = splashImagesUrls.findIndex(currUrl => currUrl === image.urls);\r\n                if (UrlIndx >= 0) {\r\n                    splashImagesUrls.splice(UrlIndx, 1)\r\n                } else {\r\n                    splashImagesUrls.push(image.urls);\r\n                }\r\n            })\r\n            this.setState({ splashImagesUrls });\r\n        } catch (err) {\r\n            // console.err(401).send({ error: err });\r\n        }\r\n    }\r\n\r\n    setBoardBackground = (imageUrl) => {\r\n        const newBoard = { ...this.props.board }\r\n        newBoard.boardBgImage = imageUrl.full;\r\n        newBoard.boardBgThumbnail = imageUrl.small;\r\n        const msg = `${this.props.user} changed background image`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    stopPropagation = (ev) => {\r\n        ev.stopPropagation()\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"splash-menu flex column align-center translateLeft\"\r\n            onClick={(ev) => this.stopPropagation(ev)}>\r\n            <div className=\"flex column fill-width filter-container\">\r\n                <div className=\"splash-menu-search-bar fill-width flex justify-center\">\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Search by name...'\r\n                        onChange={this.inputChange}\r\n                    />\r\n                    <button className=\"splash-menu-search-bar-save-btn\" onClick={this.onSave}>\r\n                        <SearchIcon />\r\n                    </button>\r\n                </div>\r\n                <button className=\"splash-menu-search-bar-save-btn upload-btn capitalize\">\r\n                    <input style={{ display: \"none\" }} type=\"file\" id=\"upload-img\" onChange={this.props.onAddImg}></input>\r\n                    <label htmlFor=\"upload-img\">upload image</label>\r\n                </button>\r\n            </div>\r\n\r\n            <div className=\"splash-images-container-wrapper\">\r\n                <div className=\"splash-images-container flex wrap fill-width\" >\r\n                    {this.state.splashImagesUrls.map(imageUrl => {\r\n                        return <div key={imageUrl.small} className=\"splash-images-container-item flex wrap\">\r\n                            <img src={imageUrl.small} alt=\"oops.. didn't found it\" onClick={() => this.setBoardBackground(imageUrl)}></img>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DatePicker from 'react-datepicker';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default class DueDate extends React.Component {\r\n    state = {\r\n        dueDate: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setDate();\r\n    }\r\n\r\n    setDate = _ => {\r\n        this.setState({ dueDate: this.props.task.dueDate ? new Date(this.props.task.dueDate) : new Date() })\r\n    }\r\n\r\n    // componentWillUnmount() {\r\n    //     this.saveTask();\r\n    // }\r\n\r\n    handleChange = date => {\r\n        this.setState({ dueDate: date });\r\n        this.saveTask();\r\n    }\r\n\r\n    saveTask = _ => {\r\n        const newTask = { ...this.props.task, dueDate: this.state.dueDate.getTime() };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} changed the due date for task '${this.props.task.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"duedate-edit flex column\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}>\r\n                <div className=\"close-btn-container\">\r\n                    <CloseIcon className=\"duedate-edit-close-btn\" onClick={this.props.onToggle} />\r\n                </div>\r\n\r\n                <div className=\"flex column align-center justify-center datepicker-container\">\r\n                    <DatePicker\r\n                        selected={this.state.dueDate}\r\n                        onChange={this.handleChange}\r\n                        showTimeSelect\r\n                        timeFormat=\"HH:mm\"\r\n                        timeIntervals={15}\r\n                        timeCaption=\"Time\"\r\n                        dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n                        popperModifiers={{\r\n                            flip: {behavior: ['bottom']},\r\n                            preventOverflow: { enabled: false }\r\n                        }}\r\n                    />\r\n                    <button className=\"add-duedate-btn capitalize\" onClick={this.saveTask}>add</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default class Labels extends Component {\r\n    state = {\r\n        choosenLabels: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setNewState();\r\n    }\r\n\r\n    setNewState = () => {\r\n        this.setState({ choosenLabels: this.props.task.labels })\r\n    }\r\n\r\n    updateChoosenLabels = (ev) => {\r\n        const label = ev.target.classList[0];\r\n        const choosenLabels = this.state.choosenLabels;\r\n        const labelIdx = choosenLabels.findIndex(currLabel => currLabel === label);\r\n        let msg = '';\r\n        let notificationType = '';\r\n        if (labelIdx >= 0) {\r\n            choosenLabels.splice(labelIdx, 1)\r\n            msg = `A label was removed from the task '${this.props.task.title}'`;\r\n            notificationType = 'danger';\r\n        } else {\r\n            choosenLabels.push(label);\r\n            msg = `A label was added to the task '${this.props.task.title}'`;\r\n            notificationType = 'success';\r\n        }\r\n        this.setState({ choosenLabels },() => this.onSave(msg, notificationType));\r\n    }\r\n\r\n    onSave = (msg, notificationType) => {\r\n        const newTask = { ...this.props.task, labels: this.state.choosenLabels };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        let updateStyle = null;\r\n        if (this.props.miniTask) {\r\n            updateStyle = {\r\n                left: 12 + 'px',\r\n                top: 36 + 'px',\r\n            }\r\n\r\n        }\r\n\r\n        return (\r\n            <div className=\"labels-container text-center\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}\r\n                style={{ ...updateStyle }}\r\n            >\r\n                <CloseIcon className=\"labels-container-close-btn\" onClick={this.props.toggleChooseLabels} />\r\n                <p className=\"uppercase\">choose labels</p>\r\n                <hr />\r\n                <div className=\"labels-container-colors-container flex column align-center \">\r\n                    <div className=\"label-color-1 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-2 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-3 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-4 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-5 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                    <div className=\"label-color-6 large-label\" onClick={(ev) => this.updateChoosenLabels(ev)}></div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class Members extends Component {\r\n    state = {\r\n        choosenMembers: [],\r\n        availableMembers: []\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setNewState();\r\n    }\r\n\r\n    setNewState = () => {\r\n        this.setState({ choosenMembers: this.props.task.taskTeamMembers }, this.setAvailableMembers);\r\n    }\r\n\r\n    updateChoosenMembers = (teamMember) => {\r\n        const choosenMembers = this.state.choosenMembers;\r\n        const memberIdx = choosenMembers.findIndex(currMember => currMember._id === teamMember._id);\r\n        let msg = '';\r\n        let notificationType = '';\r\n        if (memberIdx >= 0) {\r\n            choosenMembers.splice(memberIdx, 1);\r\n            msg = `${teamMember.username} was released from the task '${this.props.task.title}'`;\r\n            notificationType = 'danger';\r\n        } else {\r\n            choosenMembers.push(teamMember);\r\n            msg = `${teamMember.username} was asigned to the task '${this.props.task.title}'`;\r\n            notificationType = 'success';\r\n        }\r\n        this.setState({ choosenMembers }, this.setAvailableMembers(msg, notificationType));\r\n    }\r\n\r\n    setAvailableMembers = (msg, notificationType) => {\r\n        const availableMembers = this.props.board.teamMembers.filter(currMember => !this.state.choosenMembers.find(taskMember => taskMember._id === currMember._id));\r\n        this.setState({ availableMembers }, this.onSave(msg, notificationType));\r\n    }\r\n\r\n    onSave = (msg, notificationType) => {\r\n        const newTask = { ...this.props.task, taskTeamMembers: this.state.choosenMembers };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        let updateStyle = null;\r\n        if (this.props.pos) {\r\n            updateStyle = {\r\n                left: 10 + 'px',\r\n                top: 72 + 'px',\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"members-container text-center column\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}\r\n                style={{ ...updateStyle }}>\r\n                <CloseIcon className=\"members-container-close-btn\" onClick={this.props.toggleChooseMembers} />\r\n                <p className=\"uppercase\">assigned members</p>\r\n                <hr />\r\n\r\n                <div className=\"members-container-asign-members-wrapper flex\">\r\n                    <div className=\"members-container-asign-members flex column fill-width\">\r\n\r\n                        {this.props.task.taskTeamMembers.map(member => {\r\n                            return <div key={member._id} className=\"team-member flex\"\r\n                                onClick={() => this.updateChoosenMembers(member)}>\r\n                                <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                                    <div className=\"team-member-icon\">\r\n                                        <p>\r\n                                            {utils.createUserIcon(member.firstName,\r\n                                                member.lastName)}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <p>{member.firstName} {member.lastName}</p>\r\n                            </div>\r\n                        })\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"add-team-members-wrapper flex column\">\r\n                    <p className=\"uppercase\"> add a team member </p>\r\n                    <div className=\"add-team-members flex column\">\r\n                        {this.state.availableMembers.map(teamMember => {\r\n                            return (\r\n                                <div key={teamMember._id}\r\n                                    className=\"team-member flex align-center\"\r\n                                    onClick={() => this.updateChoosenMembers(teamMember)}>\r\n                                    <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                                        <div className=\"team-member-icon\">\r\n                                            <p>\r\n                                                {utils.createUserIcon(teamMember.firstName,\r\n                                                    teamMember.lastName)}\r\n                                            </p>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <p>{teamMember.firstName} {teamMember.lastName}</p>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div >\r\n                </div>\r\n            </div >\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport utils from '../services/utils'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport default class Todo extends Component {\r\n    state = {\r\n        todos: [],\r\n        text: '',\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setNewState();\r\n    }\r\n\r\n    setNewState = () => {\r\n        this.setState({ todos: this.props.task.todos })\r\n    }\r\n\r\n    updateTodo = (ev) => {\r\n        this.setState({ text: ev.target.value })\r\n    }\r\n\r\n\r\n    onSaveTodo = async () => {\r\n        const todo = {\r\n            text: this.state.text,\r\n            isDone: false,\r\n            id: utils.getRandomId()\r\n        }\r\n\r\n        const todos = this.state.todos;\r\n        todos.push(todo);\r\n        this.setState({ todos });\r\n        const newTask = { ...this.props.task, todos: this.state.todos };\r\n        const newBoard = { ...this.props.board, tasks: { ...this.props.board.tasks, [newTask.id]: newTask } }\r\n        const taskTitle = this.props.task.title;\r\n        const msg = `${this.props.user} added a new todo to the task '${taskTitle}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.updateProgressBar();\r\n    }\r\n\r\n    onStopPropagation = (ev) => {\r\n        ev.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"check-list-item-container text-center\"\r\n                onClick={(ev) => this.onStopPropagation(ev)}\r\n            >\r\n                <div className=\"checklist-closebtn-container\">\r\n                    <CloseIcon className=\"check-list-item-container-close-btn pointer\" onClick={this.props.toggleTodos} />\r\n                </div>\r\n\r\n                <div className=\"input-container flex column justify-center align-center\">\r\n                    <input className=\"text-center\" type=\"text\" placeholder=\"add new todo\"\r\n                        value={this.state.text}\r\n                        onChange={this.updateTodo} name=\"text\">\r\n                    </input>\r\n                    <button className=\"save-todo-btn capitalize\" onClick={this.onSaveTodo}>add</button>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\n//icons :\r\n\r\nimport NotesIcon from '@material-ui/icons/Notes';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport PersonAddOutlinedIcon from '@material-ui/icons/PersonAddOutlined';\r\nimport LabelOutlinedIcon from '@material-ui/icons/LabelOutlined';\r\nimport AssignmentTurnedInOutlinedIcon from '@material-ui/icons/AssignmentTurnedInOutlined';\r\nimport EventOutlinedIcon from '@material-ui/icons/EventOutlined';\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\r\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined';\r\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\r\nimport ImageOutlinedIcon from '@material-ui/icons/ImageOutlined';\r\n\r\nimport DueDate from './DueDate';\r\nimport Labels from './Labels';\r\nimport Members from './Members';\r\nimport Todos from './Todos';\r\n\r\nimport utils from '../services/utils'\r\n\r\nexport default class TaskDetails extends Component {\r\n    state = {\r\n        description: '',\r\n        teamMembers: [],\r\n        choosenMembers: [],\r\n        choosenlabels: [],\r\n        showActivity: false,\r\n        showEditDescriptionForm: false,\r\n        toggleChooseLabels: false,\r\n        toggleChooseMembers: false,\r\n        toggleTodos: false,\r\n        onToggleDueDate: false,\r\n        toggleDeleteTodo: false,\r\n        progressWidth: 0,\r\n        currTodoId: '',\r\n        taskTitle: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        const currTask = this.props.board.tasks[this.props.taskId]\r\n        this.setState({ description: currTask.description }, this.updateProgressBar);\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ description: targetValue });\r\n    }\r\n\r\n    openUpdateDescriptionForm = () => {\r\n        this.setState(prevState => ({ showEditDescriptionForm: true }))\r\n    }\r\n\r\n    onToggleDueDate = ev => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ onToggleDueDate: !prevState.onToggleDueDate }));\r\n    }\r\n\r\n\r\n    closeUpdateDescriptionForm = () => {\r\n        this.setState({ showEditDescriptionForm: false })\r\n    }\r\n\r\n    onStopPropagationAndCloseOptions = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState({\r\n            toggleChooseLabels: false,\r\n            toggleChooseMembers: false\r\n        })\r\n    }\r\n\r\n    toggleChooseLabels = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ toggleChooseLabels: !prevState.toggleChooseLabels }))\r\n    }\r\n\r\n    onSaveDescription = (ev, task) => {\r\n        ev.stopPropagation();\r\n        const newTask = { ...task, description: this.state.description };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `The description of '${task.title}' was changed by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.closeUpdateDescriptionForm();\r\n    }\r\n\r\n    toggleChooseMembers = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ toggleChooseMembers: !prevState.toggleChooseMembers }))\r\n    }\r\n\r\n    toggleTodos = (ev) => {\r\n        ev.stopPropagation();\r\n        this.setState(prevState => ({ toggleTodos: !prevState.toggleTodos }))\r\n    }\r\n\r\n    onDuplicateTask = (column, task) => {\r\n        debugger\r\n        const newTask = { ...task, id: utils.getRandomId(), labels: [...task.labels], todos: [...task.todos], taskTeamMembers: [...task.taskTeamMembers]};\r\n        column.taskIds.push(newTask.id);\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `The task '${task.title}' was duplicated by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.toggleTaskDetails();\r\n    }\r\n\r\n    onDeleteTask = (column, task) => {\r\n        const board = { ...this.props.board };\r\n        const taskIds = column.taskIds;\r\n        const idx = taskIds.findIndex(taskId => taskId === task.id);\r\n        taskIds.splice(idx, 1);\r\n        delete board.tasks[task.id];\r\n        const msg = `'${task.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger';\r\n        this.props.updateBoard(board, msg, notificationType);\r\n        this.props.toggleTaskDetails();\r\n    }\r\n\r\n    toggleTodoDone = async (todo) => {\r\n        todo.isDone = !todo.isDone;\r\n        let newTask = { ...this.props.board.tasks[this.props.taskId] };\r\n        const todos = newTask.todos;\r\n        const idx = todos.findIndex(currTodo => (currTodo.id === todo.id));\r\n        todos[idx].isDone = todo.isDone;\r\n        let doneTodosCounter = newTask.todos.filter(todo => (todo.isDone)).length;\r\n        newTask.todosDone = doneTodosCounter;\r\n        let msg = '';\r\n        let notificationType = '';\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        if (todo.isDone) {\r\n            msg = `The subtask '${todo.text}' in '${newTask.title}' was completed by ${this.props.user}`;\r\n            notificationType = 'success';\r\n        } else {\r\n            msg = `The subtask '${todo.text}' in '${newTask.title}' was remarked as uncompleted by ${this.props.user}`;\r\n            notificationType = 'danger';\r\n        }\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.updateProgressBar()\r\n    }\r\n\r\n    updateProgressBar = () => {\r\n        let start = this.state.progressWidth;\r\n        let task = this.props.board.tasks[this.props.taskId];\r\n        let doneTodosCounter = task.todos.filter(todo => (todo.isDone)).length;\r\n        task.todosDone = doneTodosCounter;\r\n\r\n        let interval;\r\n        let progressWidth = Math.round((doneTodosCounter / task.todos.length) * 100);\r\n        if (!progressWidth && !start) return;\r\n        if (start < progressWidth) {\r\n            interval = setInterval(() => {\r\n                if (start >= progressWidth) {\r\n                    clearInterval(interval);\r\n                } else {\r\n                    start++;\r\n                    this.setState({ progressWidth: start })\r\n                }\r\n            }, 10);\r\n        } else {\r\n            interval = setInterval(() => {\r\n                if (start <= progressWidth) {\r\n                    clearInterval(interval);\r\n                } else {\r\n                    start--;\r\n                    this.setState({ progressWidth: start })\r\n                }\r\n            }, 10);\r\n        }\r\n    }\r\n\r\n    deleteTodo = (todoId) => {\r\n        const task = this.props.board.tasks[this.props.taskId];\r\n        let todos = task.todos;\r\n        const idx = todos.findIndex(currTodo => (currTodo.id === todoId));\r\n        const deletedTodo = todos[idx];\r\n        todos.splice(idx, 1);\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [task.id]: task\r\n            }\r\n        }\r\n        const msg = `The subtask '${deletedTodo.text}' in '${task.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.updateProgressBar();\r\n        this.hideDeleteTodoButton(todoId);\r\n    }\r\n\r\n    showDeleteTodoButton = (todoId) => {\r\n        this.setState({ toggleDeleteTodo: true, currTodoId: todoId });\r\n    }\r\n\r\n    hideDeleteTodoButton = (todoId) => {\r\n        this.setState({ toggleDeleteTodo: false, currTodoId: todoId });\r\n    }\r\n\r\n    setTaskName = (taskId) => {\r\n        const taskTitle = this.props.board.tasks[taskId].title;\r\n        this.setState({ taskTitle: taskTitle });\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        this.setState({ taskTitle: ev.target.innerText });\r\n    }\r\n\r\n    changeDescription = (ev) => {\r\n        this.setState({ description: ev.target.value });\r\n    }\r\n\r\n    saveTaskName = (taskId, title) => {\r\n        const taskTitle = this.props.board.tasks[taskId].title;\r\n        if (taskTitle === title) return;\r\n\r\n        const updatedBoard = { ...this.props.board };\r\n        updatedBoard.tasks[taskId].title = title;\r\n\r\n        const msg = `${this.props.user} changed the title of the task '${taskTitle}' to '${title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(updatedBoard, msg, notificationType);\r\n    }\r\n\r\n\r\n\r\n    uploadImage = async (ev) => {\r\n        const task = this.props.board.tasks[this.props.taskId];\r\n        const newColumn = { ...this.props.column }\r\n        newColumn.taskIds = this.props.column.taskIds.slice();\r\n        const file = ev.target.files[0];\r\n        const imageUrl = await utils.uploadImg(file)\r\n        const newTask = { ...task }\r\n        newTask.type = 'image';\r\n        newTask.url = imageUrl;\r\n        newTask.taskTeamMembers = [...task.taskTeamMembers];\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            columns: {\r\n                ...this.props.board.columns,\r\n                [newColumn.id]: newColumn\r\n            },\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n\r\n        const msg = `${this.props.user} changed task ${this.props.board.tasks[this.props.taskId]}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.toggleTaskDetails();\r\n    }\r\n\r\n\r\n    render() {\r\n        const task = this.props.board.tasks[this.props.taskId];\r\n        const { column } = this.props;\r\n        return (\r\n            <div className=\"screen flex align-center justify-center\" onClick={() => this.props.toggleTaskDetails()}>\r\n                <div className=\"task-details-container-wrapper flex\" onClick={(ev) => this.onStopPropagationAndCloseOptions(ev)}>\r\n                    <div className=\"task-details-container flex\">\r\n                        <CloseIcon className=\"add-column-back-to-board   flex align-center\"\r\n                            onClick={() => this.props.toggleTaskDetails()} />\r\n                        <div className=\"task-details-container-main full\">\r\n                            <header className=\"task-details-container-header\">\r\n                                <DescriptionOutlinedIcon style={{\r\n                                    color: '#42526e', position: 'absolute',\r\n                                    top: '10px',\r\n                                    left: '12px'\r\n                                }} />\r\n                                <h2\r\n                                    contentEditable='true'\r\n                                    spellCheck=\"false\"\r\n                                    onFocus={() => this.setTaskName(task.id)}\r\n                                    onInput={(ev) => this.emitChange(ev)}\r\n                                    onBlur={() => this.saveTaskName(task.id, this.state.taskTitle)}\r\n                                    suppressContentEditableWarning={true}\r\n                                >{task.title}</h2>\r\n                                <div className=\"task-details-container-in-list flex\">\r\n                                    <p>in list <span>{column.title}</span></p>\r\n                                </div>\r\n                            </header>\r\n\r\n                            <div className=\"chosen-labels-container\">\r\n                                {this.state.toggleChooseLabels ?\r\n                                    <Labels\r\n                                        toggleChooseLabels={this.toggleChooseLabels}\r\n                                        board={this.props.board}\r\n                                        task={task}\r\n                                        updateBoard={this.props.updateBoard}\r\n                                    /> : ''\r\n                                }\r\n                                {task.labels.length !== 0 && <h3 className=\"uppercase\" style={{\r\n                                    fontSize: '.75rem',\r\n                                    fontWeight: 500,\r\n                                    letterSpacing: '.04em',\r\n                                }}>Labels</h3>}\r\n                                <div className=\"labels-choosen-container flex\">\r\n                                    {\r\n                                        task.labels.map(label => {\r\n                                            return <div key={label} className={label + ' medium-label'}>\r\n                                            </div>\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"task-details-container-members-container\">\r\n                                {this.state.toggleChooseMembers ?\r\n                                    <Members\r\n                                        toggleChooseMembers={this.toggleChooseMembers}\r\n                                        board={this.props.board}\r\n                                        task={task}\r\n                                        updateBoard={this.props.updateBoard}\r\n                                        users={this.props.users}\r\n                                    /> : ''\r\n                                }\r\n                                {task.taskTeamMembers.length !== 0 && <h3 className=\"uppercase\" style={{\r\n                                    fontSize: '.75rem',\r\n                                    fontWeight: 500,\r\n                                    letterSpacing: '.04em'\r\n                                }}>members</h3>}\r\n                                <div className=\"flex\">\r\n                                    {\r\n                                        task.taskTeamMembers.map(member => {\r\n                                            return <Avatar key={member._id} style={{\r\n                                                backgroundColor: '#dfe1e6',\r\n                                                height: 28,\r\n                                                width: 28,\r\n                                                fontSize: '0.85rem',\r\n                                                margin: '4px 4px 4px 0',\r\n                                                color: '#172b4d',\r\n                                                fontWeight: 600,\r\n                                                textAlign: 'center'\r\n                                            }}>\r\n                                                {utils.createUserIcon(member.firstName,\r\n                                                    member.lastName)}\r\n                                            </Avatar>\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"task-details-container-check-list-container\">\r\n                                {this.state.toggleTodos ?\r\n                                    <Todos\r\n                                        toggleTodos={this.toggleTodos}\r\n                                        board={this.props.board}\r\n                                        user={this.props.user}\r\n                                        task={task}\r\n                                        updateBoard={this.props.updateBoard}\r\n                                        updateProgressBar={this.updateProgressBar}\r\n                                    /> : ''\r\n                                }\r\n                                <AssignmentTurnedInOutlinedIcon\r\n                                    style={{\r\n                                        color: '#42526e',\r\n                                        position: 'relative',\r\n                                        top: '35px',\r\n                                        right: '44px',\r\n                                    }}\r\n                                />\r\n                                <h2>Checklist</h2>\r\n\r\n                                {task.todos ?\r\n                                    <div className=\"check-list-container flex column\">\r\n                                        {task.todos.map(todo => {\r\n                                            return <div key={todo.id} className=\"todo-item flex align-center space-between\" onMouseEnter={() => this.showDeleteTodoButton(todo.id)}\r\n                                                onMouseLeave={() => this.hideDeleteTodoButton(todo.id)}>\r\n                                                <div className=\"flex align-center\">\r\n                                                    <input type=\"checkbox\" onChange={() => this.toggleTodoDone(todo)} checked={todo.isDone ? 'checked' : ''}>\r\n                                                    </input>\r\n                                                    <p className={todo.isDone ? \"text-decoration\" : \"\"}>\r\n                                                        {todo.text}\r\n                                                    </p>\r\n                                                </div>\r\n                                                <DeleteOutlineIcon\r\n                                                    onClick={() => this.deleteTodo(todo.id)}\r\n                                                    className=\"pointer delete-btn\"\r\n                                                    style={{ display: this.state.toggleDeleteTodo && this.state.currTodoId === todo.id ? 'block' : 'none' }}\r\n                                                />\r\n                                            </div>\r\n                                        })\r\n                                        }\r\n                                        <div className=\"check-list-progress\">\r\n                                            <div className=\"progress fill-height flex align-center\" style={{ width: this.state.progressWidth + \"%\" }} >\r\n                                                <small className=\"fill-width text-center\">{this.state.progressWidth + \"%\"}</small>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div> : ''\r\n                                }\r\n                            </div>\r\n                            <div className=\"task-details-container-duedate-container\">\r\n                                <EventOutlinedIcon style={{\r\n                                    color: '#42526e', position: 'relative',\r\n                                    top: '35px',\r\n                                    right: '44px'\r\n                                }} />\r\n                                <h2>Due Date</h2>\r\n                                {(task.dueDate) ?\r\n                                    <p>{moment(task.dueDate).format(\"MMMM Do YYYY, hh:mm a\")}</p> :\r\n                                    <p>This task doesn't have a due date yet</p>\r\n                                }\r\n                                {this.state.onToggleDueDate ? <DueDate\r\n                                    task={task}\r\n                                    onToggle={this.onToggleDueDate}\r\n                                    board={this.props.board}\r\n                                    updateBoard={this.props.updateBoard}\r\n                                    updateProgressBar={this.updateProgressBar}\r\n\r\n                                    user={this.props.user}\r\n                                /> : ''}\r\n                            </div>\r\n\r\n                            <div className=\"task-details-container-description\">\r\n                                <NotesIcon style={{\r\n                                    color: '#42526e', position: 'relative',\r\n                                    top: '35px',\r\n                                    right: '44px'\r\n                                }} />\r\n                                <h2>Description</h2>\r\n                                <textarea className=\"fill-width\"\r\n                                    name=\"description\"\r\n                                    cols=\"40\"\r\n                                    onChange={this.changeDescription}\r\n                                    onClick={this.openUpdateDescriptionForm}\r\n                                    value={this.state.description}\r\n                                    spellCheck=\"false\"\r\n                                    placeholder=\"Add a more detailed description...\">\r\n                                </textarea>\r\n                                {this.state.showEditDescriptionForm ?\r\n                                    <div className=\"flex align-center\">\r\n                                        <button className=\"task-form-save-btn uppercase\" onClick={(ev) => this.onSaveDescription(ev, task)}>save</button>\r\n                                        <CloseIcon className=\"task-form-back-btn\" onClick={this.closeUpdateDescriptionForm} />\r\n                                    </div> : ''\r\n                                }\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"task-details-container-overall-options\">\r\n                            <div className=\"task-details-container-add-to-card-options container\">\r\n                                <h3 className=\"uppercase\" style={{\r\n                                    fontSize: '0.75rem',\r\n                                    fontWeight: 500,\r\n                                    letterSpacing: '0.04em'\r\n                                }}>add to card</h3>\r\n                                <div className=\"task-details-container-add-to-card-options flex column\">\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\" onClick={ev => this.toggleChooseLabels(ev)}>\r\n                                        <LabelOutlinedIcon />\r\n                                        <p className=\"capitalize\" >labels</p>\r\n                                    </div>\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\" onClick={ev => this.toggleChooseMembers(ev)} >\r\n                                        <PersonAddOutlinedIcon />\r\n                                        <p className=\"capitalize\">members</p>\r\n                                    </div>\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\" onClick={ev => this.toggleTodos(ev)} >\r\n                                        <AssignmentTurnedInOutlinedIcon />\r\n                                        <p className=\"capitalize\">check list</p>\r\n                                    </div>\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\" onClick={ev => this.onToggleDueDate(ev)}>\r\n                                        <EventOutlinedIcon />\r\n                                        <p className=\"capitalize\">due date</p>\r\n                                    </div>\r\n                                    <div className=\"task-details-container-add-to-card-options-btn flex align-center\">\r\n                                        <ImageOutlinedIcon />\r\n                                        <input style={{ display: \"none\" }} type=\"file\" id=\"upload-img-2\" onChange={ev => this.uploadImage(ev)}></input>\r\n                                        <label htmlFor=\"upload-img-2\"><p className=\"capitalize\">\r\n                                            upload image\r\n                                            </p></label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"task-details-container-actions-options container\">\r\n                                <h3 className=\"uppercase\" style={{\r\n                                    fontSize: '0.75rem',\r\n                                    fontWeight: 500,\r\n                                    letterSpacing: '0.04em'\r\n                                }}>actions</h3>\r\n                                <div className=\"task-details-container-actions-options-btn flex align-center\" onClick={() => this.onDuplicateTask(column, task)}>\r\n                                    <FileCopyOutlinedIcon />\r\n                                    <p className=\"capitalize\">duplicate</p>\r\n                                </div>\r\n                                <div className=\"task-details-container-actions-options-btn flex align-center\" onClick={() => this.onDeleteTask(column, task)}>\r\n                                    <DeleteOutlineOutlinedIcon />\r\n                                    <p className=\"capitalize\">delete</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n            </div >\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class MiniDetailsButton extends Component {\r\n\r\n    render() {\r\n        const { text, onClick } = this.props;\r\n        return <div className=\"mini-details-editor-button\"\r\n            onClick={onClick}>\r\n            <p>{text}</p>\r\n        </div>\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsButton from './MiniDetailsButton';\r\nimport Labels from './Labels';\r\nimport DueDate from './DueDate';\r\nimport Members from './Members';\r\n\r\nimport utils from '../services/utils';\r\n\r\nexport default class MiniDetailsEditor extends Component {\r\n    state = {\r\n        onToggleLabels: false,\r\n        onToggleDueDate: false,\r\n        onToggleMembers: false\r\n    }\r\n\r\n    onToggleLabels = _ => {\r\n        this.setState(prevState => ({ onToggleLabels: !prevState.onToggleLabels }));\r\n    }\r\n\r\n    onToggleDueDate = _ => {\r\n        this.setState(prevState => ({ onToggleDueDate: !prevState.onToggleDueDate }));\r\n    }\r\n\r\n    onToggleMembers = _ => {\r\n        this.setState(prevState => ({ onToggleMembers: !prevState.onToggleMembers }));\r\n    }\r\n\r\n    onDuplicateTask = _ => {\r\n        const { task } = this.props.miniTask\r\n        const newTask = { ...task, id: utils.getRandomId(), labels: [...task.labels], todos: [...task.todos], taskTeamMembers: [...task.taskTeamMembers]};\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        newBoard.columns[this.props.miniTask.column.id].taskIds.push(newTask.id);\r\n        const msg = `The task '${task.title}' was duplicated by ${this.props.user}`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    onDelete = _ => {\r\n        const { miniTask } = this.props;\r\n        const board = { ...this.props.board };\r\n        const column = this.props.miniTask.column;\r\n        const taskIds = column.taskIds;\r\n        const task = board.tasks[miniTask.task.id];\r\n        const idx = taskIds.findIndex(taskId => taskId === miniTask.task.id);\r\n        taskIds.splice(idx, 1);\r\n        delete board.tasks[miniTask.task.id];\r\n        const msg = `'${task.title}' was deleted by ${this.props.user}`;\r\n        const notificationType = 'danger'; \r\n        this.props.updateBoard(board, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { miniTask } = this.props;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        let top = boundingClientRect.top;\r\n\r\n        if(top + 180 > window.innerHeight){\r\n            top = window.innerHeight - 180;\r\n        }\r\n\r\n        return <div\r\n            className=\"mini-details-editor\"\r\n            style={{\r\n                left: (boundingClientRect.left + 265) + 'px',\r\n                top: (top + 1) + 'px'\r\n            }}\r\n        >\r\n            <MiniDetailsButton text=\"🖊️ Edit Labels\" onClick={this.onToggleLabels} />\r\n            {this.state.onToggleLabels ? <Labels\r\n                miniTask={miniTask}\r\n                task={miniTask.task}\r\n                toggleChooseLabels={this.onToggleLabels}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard} /> : ''}\r\n            <MiniDetailsButton text=\"🎭 Change Members\" onClick={this.onToggleMembers} />\r\n            {this.state.onToggleMembers ? <Members\r\n                pos={true}\r\n                task={miniTask.task}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                toggleChooseMembers={this.onToggleMembers}\r\n            /> : ''}\r\n            <MiniDetailsButton text=\"📅 Change Due Date\" onClick={this.onToggleDueDate} />\r\n            {this.state.onToggleDueDate ? <DueDate\r\n                task={miniTask.task}\r\n                onToggle={this.onToggleDueDate}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n            /> : ''}\r\n            <MiniDetailsButton text=\"⎘ Duplicate Task\" onClick={this.onDuplicateTask} />\r\n            <MiniDetailsButton text=\"🗑️ Delete Task\" onClick={this.onDelete} />\r\n        </div>\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport default function ScreenFilter(props) {\r\n    return (\r\n        <div className=\"screen-filter\" onClick={_ => props.onToggle()}></div>\r\n    )\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsEditor from '../MiniDetailsEditor';\r\nimport ScreenFilter from '../ScreenFilter';\r\n\r\nexport default class MiniTextDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textArea = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        title: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textArea.current.focus();\r\n    }\r\n\r\n    handleFocus = ev => {\r\n        ev.target.select();\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ title: targetValue });\r\n    }\r\n\r\n    onSave = _ => {\r\n        const newTask = { ...this.props.miniTask.task, title: this.state.title ? this.state.title : this.props.miniTask.task.title };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} changed the title of the task '${this.props.miniTask.task.title}' to '${this.state.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.miniTask;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        const labelLen = task.labels.length;\r\n        let height = boundingClientRect.height;\r\n        let top = boundingClientRect.top;\r\n\r\n        if (height + top > window.innerHeight) {\r\n            height = (window.innerHeight - top - 50) > 248 ? window.innerHeight - top - 50 : 248;\r\n        }\r\n        if (boundingClientRect.top > (window.innerHeight - (window.innerHeight / 4))) {\r\n            top = window.innerHeight - height - 50;\r\n        }\r\n        \r\n        return <div className=\"mini-details-container\">\r\n            <div\r\n                className=\"mini-details\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: top + 'px',\r\n                    height: height + 'px'\r\n                }}\r\n            >\r\n                <div className=\"task-container-labels flex\">\r\n                    {task.labels.map(label => {\r\n                        return <div key={label} className={label + ' small-label'}>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <textarea\r\n                    name=\"title\"\r\n                    className={\"text-area\" + (labelLen > 0 ? ' preview-label' : '')}\r\n                    defaultValue={task.title}\r\n                    ref={this.textArea}\r\n                    onFocus={this.handleFocus}\r\n                    onInput={this.emitChange}\r\n                    placeholder=\"Add a card title...\"\r\n                >\r\n                </textarea>\r\n            </div>\r\n            <button\r\n                className=\"mini-details-save-btn\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: (top + height + 10) + 'px'\r\n                }}\r\n                onClick={this.onSave}\r\n            >SAVE</button>\r\n            <MiniDetailsEditor\r\n                user={this.props.user}\r\n                miniTask={this.props.miniTask}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle}\r\n            />\r\n            <ScreenFilter onToggle={this.props.onToggle} />\r\n        </div >\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsEditor from '../MiniDetailsEditor';\r\nimport ScreenFilter from '../ScreenFilter';\r\n\r\nexport default class MiniImageDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textArea = React.createRef();\r\n        this.imgContainer = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        title: '',\r\n        imgHeight: 220\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textArea.current.focus();\r\n        this.setState({ imgHeight: this.imgContainer.current.getBoundingClientRect().height });\r\n    }\r\n\r\n    handleFocus = ev => {\r\n        ev.target.select();\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ title: targetValue });\r\n    }\r\n\r\n    onSave = _ => {\r\n        const newTask = { ...this.props.miniTask.task, title: this.state.title ? this.state.title : this.props.miniTask.task.title };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} updated the task '${this.props.miniTask.task.title}' to '${this.state.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.miniTask;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        const labelLen = task.labels.length;\r\n        let height = boundingClientRect.height;\r\n        let top = boundingClientRect.top;\r\n        if (height + top > window.innerHeight) {\r\n            height = (window.innerHeight - top - 50) > 252 ? window.innerHeight - top - 50 : 252;\r\n        }\r\n        if (boundingClientRect.top > (window.innerHeight - (window.innerHeight / 4))) {\r\n            top = window.innerHeight - height - 50;\r\n        }\r\n\r\n        return <div className=\"mini-details-container\">\r\n            <div\r\n                className=\"mini-details\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: top + 'px',\r\n                    height: height + 'px'\r\n                }}\r\n            >\r\n                <img ref={this.imgContainer} title={task.id} alt=\"task\" src={task.url} />\r\n                <div className=\"task-container-labels flex\">\r\n                    {task.labels.map(label => {\r\n                        return <div key={label} className={label + ' small-label'}>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <textarea\r\n                    name=\"title\"\r\n                    className={\"text-area\" + (labelLen > 0 ? ' preview-label' : '')}\r\n                    style={{\r\n                        height: height - this.state.imgHeight + 'px',\r\n                        position: 'relative',\r\n                    }}\r\n                    defaultValue={task.title}\r\n                    ref={this.textArea}\r\n                    onFocus={this.handleFocus}\r\n                    onInput={this.emitChange}\r\n                    placeholder=\"Add a card title...\"\r\n                >\r\n                </textarea>\r\n            </div>\r\n            <button\r\n                className=\"mini-details-save-btn\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: (top + height + (task.title ? 10 : 32)) + 'px'\r\n                }}\r\n                onClick={this.onSave}\r\n            >SAVE</button>\r\n            <MiniDetailsEditor\r\n                user={this.props.user}\r\n                miniTask={this.props.miniTask}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle} />\r\n            <ScreenFilter onToggle={this.props.onToggle} />\r\n        </div >\r\n    }\r\n}","import MiniTextDetails from './MiniTextDetails';\r\nimport MiniImageDetails from './MiniImageDetails';\r\nimport MiniVideoDetails from './MiniVideoDetails';\r\n\r\nexport default {\r\n    text: MiniTextDetails,\r\n    video: MiniVideoDetails,\r\n    image: MiniImageDetails\r\n}","import React, { Component } from 'react';\r\n\r\nimport MiniDetailsEditor from '../MiniDetailsEditor';\r\nimport ScreenFilter from '../ScreenFilter';\r\n\r\nexport default class MiniVideoDetails extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.textArea = React.createRef();\r\n    }\r\n\r\n    state = {\r\n        title: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.textArea.current.focus();\r\n    }\r\n\r\n    handleFocus = ev => {\r\n        ev.target.select();\r\n    }\r\n\r\n    emitChange = (ev) => {\r\n        const targetValue = ev.target.value;\r\n        this.setState({ title: targetValue });\r\n    }\r\n\r\n    onSave = _ => {\r\n        const newTask = { ...this.props.miniTask.task, title: this.state.title ? this.state.title : this.props.miniTask.task.title };\r\n        const newBoard = {\r\n            ...this.props.board,\r\n            tasks: {\r\n                ...this.props.board.tasks,\r\n                [newTask.id]: newTask\r\n            }\r\n        }\r\n        const msg = `${this.props.user} updated the task '${this.props.miniTask.task.title}' to '${this.state.title}'`;\r\n        const notificationType = 'success';\r\n        this.props.updateBoard(newBoard, msg, notificationType);\r\n        this.props.onToggle();\r\n    }\r\n\r\n    render() {\r\n        const { task } = this.props.miniTask;\r\n        const { boundingClientRect } = this.props.miniTask;\r\n        const videoDimensions = { height: 140, width: 246 };\r\n        const labelLen = task.labels.length;\r\n        let height = boundingClientRect.height;\r\n        let top = boundingClientRect.top;\r\n\r\n        if (height + top > window.innerHeight) {\r\n            height = (window.innerHeight - top - 50) > 248 ? window.innerHeight - top - 50 : 248;\r\n        }\r\n        if (boundingClientRect.top > (window.innerHeight - (window.innerHeight / 4))) {\r\n            top = window.innerHeight - height - 50;\r\n        }\r\n        return <div className=\"mini-details-container\">\r\n            <div\r\n                className=\"mini-details\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: top + 'px',\r\n                    height: height + 'px'\r\n                }}\r\n            >\r\n                {task.type === 'video' ?\r\n                    <iframe title={task.id}\r\n                        type='text/html' width={videoDimensions.width}\r\n                        height={videoDimensions.height}\r\n                        src={task.url}\r\n                        allowFullScreen=\"allowfullscreen\"></iframe>\r\n                    : <img ref={this.imgContainer} title={task.id} alt=\"task\" src={task.url} />\r\n                }\r\n                <div className=\"task-container-labels flex\">\r\n                    {task.labels.map(label => {\r\n                        return <div key={label} className={label + ' small-label'}>\r\n                        </div>\r\n                    })\r\n                    }\r\n                </div>\r\n                <textarea\r\n                    name=\"title\"\r\n                    className={\"text-area\" + (labelLen > 0 ? ' preview-label' : '')}\r\n                    style={{\r\n                        height: height - videoDimensions.height,\r\n                        position: 'relative',\r\n                        bottom: 14 + 'px'\r\n                    }}\r\n                    defaultValue={task.title}\r\n                    ref={this.textArea}\r\n                    onFocus={this.handleFocus}\r\n                    onInput={this.emitChange}\r\n                    placeholder=\"Add a card title...\"\r\n                >\r\n                </textarea>\r\n            </div>\r\n            <button\r\n                className=\"mini-details-save-btn\"\r\n                style={{\r\n                    left: boundingClientRect.left + 'px',\r\n                    top: (top + height + (task.title ? 10 : 32)) + 'px'\r\n                }}\r\n                onClick={this.onSave}\r\n            >SAVE</button>\r\n            <MiniDetailsEditor\r\n                user={this.props.user}\r\n                miniTask={this.props.miniTask}\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle} />\r\n            <ScreenFilter onToggle={this.props.onToggle} />\r\n        </div >\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport mapDynamicMiniComponents from \"./mapDynamicMiniComponents\"\r\n\r\nexport default class DynamicMiniComponent extends Component {\r\n    state = {\r\n        previewType: 'text'\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ previewType: this.props.miniTask.previewType });\r\n    }\r\n\r\n    getComponent() {\r\n        return mapDynamicMiniComponents[this.state.previewType];\r\n    }\r\n\r\n    render() {\r\n        const Cmp = this.getComponent();\r\n        return <React.Fragment>\r\n            <Cmp\r\n                miniTask={this.props.miniTask}\r\n                updateBoard={this.props.updateBoard}\r\n                onToggle={this.props.onToggle}\r\n                board={this.props.board}\r\n                user={this.props.user}\r\n            >\r\n            </Cmp>\r\n        </React.Fragment>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { store } from 'react-notifications-component';\r\nimport FastAverageColor from 'fast-average-color';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport LoadPage from '../cmps/LoadPage';\r\nimport BoardColumns from '../cmps/BoardColumns';\r\nimport BoardHistory from '../cmps/BoardHistory';\r\nimport BoardTeamMembers from '../cmps/BoardTeamMembers';\r\nimport ColumnAddForm from '../cmps/ColumnAddForm';\r\nimport Login from '../cmps/Login';\r\nimport Filter from '../cmps/Filter';\r\nimport Sort from '../cmps/Sort';\r\nimport SplashMenu from '../cmps/SplashMenu';\r\nimport TaskDetails from '../cmps/TaskDetails';\r\nimport DynamicMiniComponent from '../cmps/dynamics/DynamicMiniComponent';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport GroupAddOutlinedIcon from '@material-ui/icons/GroupAddOutlined';\r\nimport ImageSearchOutlinedIcon from '@material-ui/icons/ImageSearchOutlined';\r\nimport HistoryOutlinedIcon from '@material-ui/icons/HistoryOutlined';\r\n\r\nimport utils from '../services/utils';\r\nimport SocketService from '../services/SocketService';\r\n\r\nimport { loadBoard, updateBoard, setBoard } from '../actions/BoardActions';\r\nimport { logout, getLoggedInUser, getUsers } from '../actions/UserActions';\r\n\r\n// import { filterBoard } from '../selectors/BoardSelector';\r\n\r\nclass Board extends Component {\r\n  state = {\r\n    showColAddForm: true,\r\n    showTaskDetails: false,\r\n    showMiniTaskDetails: false,\r\n    toggleLogin: false,\r\n    toggleSplashMenu: false,\r\n    showHistory: false,\r\n    toggleBoardTeamMembers: false,\r\n    miniTaskDetails: {},\r\n    filterBy: {\r\n      title: '',\r\n      teamMembers: ''\r\n    },\r\n    sortBy: '',\r\n    sortOrder: '',\r\n    showTopMenuOptions: true,\r\n    showAddForm: false,\r\n    currColumnId: '',\r\n    isBoardLoaded: false,\r\n    isDarkBackground: null,\r\n    filterIconMod: false,\r\n  }\r\n\r\n  componentDidMount() {\r\n    const boardId = this.props.match.params.id;\r\n\r\n    this.props.getUsers();\r\n    this.props.getLoggedInUser();\r\n    this.loadBoard();\r\n    this.resize();\r\n    window.addEventListener('resize', this.resize);\r\n\r\n    SocketService.setup();\r\n    SocketService.emit('boardId', boardId);\r\n    SocketService.on('updateBoard', (board) => this.props.setBoard(board));\r\n    SocketService.on('getNotification', (notification) => store.addNotification(notification));\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const boardId = this.props.match.params.id;\r\n    if (this.state.isBoardLoaded) {\r\n      if (prevProps.board.boardBgImage !== this.props.board.boardBgImage) {\r\n        this.isDarkBackground();\r\n      };\r\n      return;\r\n    } else if (boardId === this.props.board._id) {\r\n      this.setState({ isBoardLoaded: true });\r\n      this.isDarkBackground();\r\n    };\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.resize);\r\n    SocketService.off('updateBoard');\r\n    SocketService.off('getNotification');\r\n    SocketService.terminate();\r\n  }\r\n\r\n  loadBoard = () => {\r\n    const boardId = this.props.match.params.id;\r\n    const filterBy = this.state.filterBy;\r\n    const sortBy = this.state.sortBy;\r\n    const sortOrder = this.state.sortOrder;\r\n    this.props.loadBoard(boardId, filterBy, sortBy, sortOrder);\r\n  }\r\n\r\n  toggleAddColumn = () => {\r\n    this.setState((prevState) => ({\r\n      showColAddForm: !prevState.showColAddForm,\r\n    }))\r\n  }\r\n\r\n  goBack = () => {\r\n    this.props.history.push('/');\r\n  }\r\n\r\n  toggleLogin = (ev) => {\r\n    ev.stopPropagation()\r\n    this.setState((prevState) => ({\r\n      toggleLogin: !prevState.toggleLogin,\r\n      showHistory: false,\r\n      toggleBoardTeamMembers: false,\r\n      toggleSplashMenu: false\r\n    }))\r\n  }\r\n\r\n  closeAllTabs = (ev) => {\r\n    ev.stopPropagation()\r\n    this.setState({\r\n      toggleLogin: false,\r\n      toggleSplashMenu: false,\r\n      showHistory: false,\r\n      toggleBoardTeamMembers: false,\r\n      showTopMenuOptions: false,\r\n      showAddForm: false,\r\n    });\r\n  }\r\n\r\n  toggleTaskDetails = (currTask) => {\r\n    if (currTask === undefined) {\r\n      this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails }));\r\n    } else if (this.state.showTaskDetails && currTask.id !== this.state.currTask.id) {\r\n      this.setState({ currTask });\r\n    } else {\r\n      this.setState(prevState => ({ showTaskDetails: !prevState.showTaskDetails, currTask }));\r\n    }\r\n  }\r\n\r\n  onAddImg = (ev) => {\r\n    const file = ev.target.files[0];\r\n    utils.uploadImg(file).then(res => {\r\n      const newBoard = { ...this.props.board }\r\n      newBoard.boardBgImage = res\r\n      newBoard.boardBgThumbnail = res\r\n      const msg = `${this.props.user} changed background image`;\r\n      const notificationType = 'success';\r\n      this.props.updateBoard(newBoard, msg, notificationType);\r\n    })\r\n  }\r\n\r\n  onFilter = (filterBy) => {\r\n    this.setState(prevState => ({ filterBy: { ...prevState.filterBy, ...filterBy } }), this.loadBoard);\r\n    // this.props.updateFilter(filterBy);\r\n  }\r\n\r\n  onSort = (sortBy, sortOrder) => {\r\n    this.setState({ sortBy, sortOrder }, this.loadBoard);\r\n  }\r\n\r\n  toggleMiniDetails = miniTask => {\r\n    if (miniTask) {\r\n      return this.setState(prevState => ({ showMiniTaskDetails: !prevState.showMiniTaskDetails, miniTaskDetails: miniTask }));\r\n    }\r\n    this.setState(prevState => ({ showMiniTaskDetails: !prevState.showMiniTaskDetails }));\r\n  }\r\n\r\n  toggleSplashMenu = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState(prevState => ({\r\n      toggleSplashMenu: !prevState.toggleSplashMenu,\r\n      showHistory: false,\r\n      toggleBoardTeamMembers: false,\r\n      toggleLogin: false\r\n    }));\r\n  }\r\n\r\n  toggleBoardHistory = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState(prevState => ({\r\n      showHistory: !prevState.showHistory,\r\n      toggleSplashMenu: false,\r\n      toggleBoardTeamMembers: false,\r\n      toggleLogin: false\r\n    }));\r\n  }\r\n\r\n  toggleBoardTeamMembers = (ev) => {\r\n    ev.stopPropagation();\r\n    this.setState(prevState => ({\r\n      toggleBoardTeamMembers: !prevState.toggleBoardTeamMembers,\r\n      showHistory: false,\r\n      toggleSplashMenu: false,\r\n      toggleLogin: false\r\n    }))\r\n  }\r\n\r\n  openAddForm = colId => {\r\n    this.setState({ showAddForm: true, currColumnId: colId }, this.closeEditColumn);\r\n  }\r\n\r\n  closeAddForm = _ => {\r\n    this.setState({ showAddForm: false });\r\n  }\r\n\r\n  openEditColumn = (colId) => {\r\n    this.setState({ showTopMenuOptions: true, currColumnId: colId }, this.closeAddForm());\r\n  }\r\n\r\n  closeEditColumn = _ => {\r\n    this.setState({ showTopMenuOptions: false });\r\n  }\r\n\r\n  isDarkBackground = async (img) => {\r\n    const fac = new FastAverageColor();\r\n    let backgroundImage = new Image();\r\n    backgroundImage.crossOrigin = 'anonymous';\r\n    backgroundImage.src = img || this.props.board.boardBgImage;\r\n    try {\r\n      const color = await fac.getColorAsync(backgroundImage, { algorithm: 'dominant' });\r\n      (color.isDark) ? this.setState({ isDarkBackground: true }) : this.setState({ isDarkBackground: false });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  resize = _ => {\r\n    if (window.innerWidth < 900) {\r\n      this.setState({ filterIconMod: true });\r\n    } else {\r\n      this.setState({ filterIconMod: false })\r\n    };\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.isBoardLoaded) return <LoadPage />\r\n    // const { teamMembers } = { ...this.props.board }\r\n    let button;\r\n    if (this.props.loggedInUser) {\r\n      button = <button className=\"board-page-nav-bar nav-btn\"\r\n        onClick={this.props.logout}>\r\n        logout\r\n      </button>\r\n    } else {\r\n      button = <button className=\"board-page-nav-bar nav-btn\"\r\n        onClick={ev => this.toggleLogin(ev)}>\r\n        login\r\n      </button>\r\n    }\r\n    return (\r\n      <div className=\"screen\" onClick={this.closeAllTabs}>\r\n        <div className=\"board-page fill-height flex column\" style={{ backgroundImage: 'url(' + this.props.board.boardBgImage + ')', backgroundAttachment: 'fixed' }}>\r\n\r\n          <div className=\"board-page-nav-bar flex align-center space-between\">\r\n            <div className=\"board-page-nav-bar-logo\" onClick={this.goBack}> </div>\r\n            <div className=\"flex align-center\">\r\n              {this.props.loggedInUser &&\r\n                <div className=\"flex\">\r\n                  <div className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: 'rgba(223, 225, 230, 0.8)', color: '#172b4d' }} >\r\n                    <div className=\"team-member-icon\">\r\n                      <p>\r\n                        {utils.createUserIcon(this.props.loggedInUser.firstName,\r\n                          this.props.loggedInUser.lastName)}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"logged-in-user flex column\">\r\n                    <small>Logged as:</small>\r\n                    <p> {this.props.loggedInUser.username}</p>\r\n                  </div>\r\n                </div>\r\n              }\r\n\r\n              {button}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"board-page-nav-bar-filters flex align-center space-between\">\r\n            <div className={`flex align-center`}>\r\n              <button\r\n                className={`board-page-nav-bar-filters nav-btn flex \r\n                          ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                onClick={this.goBack} >\r\n                <HomeIcon />\r\n              </button>\r\n\r\n              {/* {this.props.board.teamMembers.length > 0 &&\r\n                <div className=\"board-page-nav-bar-filters team-members-container flex\">\r\n                  {\r\n                    teamMembers.map(member => {\r\n                      return <div key={member.username} className=\"team-member-icon-wrapper flex align-center justify-center\" style={{ backgroundColor: '#dfe1e6', color: '#172b4d' }} >\r\n                        <p className=\"team-member-icon\">\r\n                          {utils.createUserIcon(member.firstName,\r\n                            member.lastName)}\r\n                        </p>\r\n                      </div>\r\n                    })\r\n                  }\r\n                </div>\r\n              } */}\r\n\r\n              <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <Filter onFilter={this.onFilter}\r\n                teamMembers={this.props.board.teamMembers}\r\n                isDarkBackground={this.state.isDarkBackground} />\r\n\r\n              <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <Sort onSort={this.onSort} isDarkBackground={this.state.isDarkBackground} />\r\n            </div>\r\n\r\n            <div className=\"board-page-nav-bar-filters-item flex align-center\">\r\n              <div className=\"board-page-nav-bar-filters-item fill-height\">\r\n                <button\r\n                  className={`nav-btn fill-height capitalize\r\n                  ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                  onClick={this.toggleBoardTeamMembers}>\r\n                  {!this.state.filterIconMod ? <Typography component=\"p\" className=\"flex align-center p-reset\">\r\n                    <GroupAddOutlinedIcon style={{ marginRight: 5 }} />\r\n                    add members\r\n                    </Typography> : <GroupAddOutlinedIcon />}\r\n                </button>\r\n              </div>\r\n\r\n              <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <div className=\"board-page-nav-bar-filters-item fill-height\">\r\n                <button\r\n                  className={`nav-btn fill-height capitalize\r\n                  ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                  onClick={(ev) => this.toggleSplashMenu(ev)}>\r\n                  {!this.state.filterIconMod ? <Typography component=\"p\" className=\"flex align-center p-reset\">\r\n                    <ImageSearchOutlinedIcon style={{ marginRight: 5 }} />\r\n                    change background\r\n                  </Typography> : <ImageSearchOutlinedIcon />}\r\n                </button>\r\n              </div>\r\n\r\n              <div style={{ background: (this.state.isDarkBackground) ? 'white' : 'black' }} className=\"board-page-nav-bar-filters-divider\"></div>\r\n\r\n              <div className=\"board-page-nav-bar-filters-item flex fill-height\">\r\n                <button\r\n                  className={`board-page-nav-bar-filters nav-btn capitalize \r\n                  ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                  onClick={this.toggleBoardHistory}>\r\n                  {!this.state.filterIconMod ? <Typography component=\"p\" className=\"flex align-center p-reset\">\r\n                    <HistoryOutlinedIcon style={{ marginRight: 5 }} />\r\n                    show history\r\n                  </Typography> : <HistoryOutlinedIcon />}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n\r\n          <CSSTransition\r\n            in={this.state.toggleSplashMenu}\r\n            timeout={700}\r\n            classNames=\"modal\"\r\n            unmountOnExit\r\n          >\r\n            <SplashMenu\r\n              // toggleSplashMenu={this.state.toggleSplashMenu}\r\n              board={this.props.board}\r\n              updateBoard={this.props.updateBoard}\r\n              closeAllTabs={this.closeAllTabs}\r\n              onAddImg={this.onAddImg}\r\n              showUploadBgImg={this.state.closeAllTabs}\r\n              isDarkBackground={this.isDarkBackground}\r\n              user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'}\r\n            />\r\n          </CSSTransition>\r\n\r\n          <div className=\"board-page-columns-container\">\r\n            <div className=\"flex align-start fill-height\">\r\n              <CSSTransition\r\n                in={this.state.toggleLogin}\r\n                timeout={700}\r\n                classNames=\"modal\"\r\n                unmountOnExit\r\n              >\r\n                <Login\r\n                  variant=\"outlined\"\r\n                  className=\"home-page-login\"\r\n                  toggleLogin={this.toggleLogin}\r\n                  toggleState={this.state.toggleLogin} />\r\n              </CSSTransition>\r\n              <BoardColumns\r\n                board={this.props.board}\r\n                updateBoard={this.props.updateBoard}\r\n                toggleTaskDetails={this.toggleTaskDetails}\r\n                toggleMiniDetails={this.toggleMiniDetails}\r\n                user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'}\r\n                currColumnId={this.state.currColumnId}\r\n                openAddForm={this.openAddForm}\r\n                closeAddForm={this.closeAddForm}\r\n                openEditColumn={this.openEditColumn}\r\n                closeEditColumn={this.closeEditColumn}\r\n                showTopMenuOptions={this.state.showTopMenuOptions}\r\n                showAddForm={this.state.showAddForm}\r\n              />\r\n              <div className=\"flex column align-center\">\r\n                {this.state.showColAddForm ?\r\n                  <button className={`board-page-add-another-column-btn\r\n                  ${(this.state.isDarkBackground) ? 'dark' : 'light'}`}\r\n                    onClick={this.toggleAddColumn}>\r\n                    <span className=\"add-icon\">+</span>Add another list</button> : ''}\r\n                {!this.state.showColAddForm && <ColumnAddForm board={this.props.board} updateBoard={this.props.updateBoard}\r\n                  toggleAddForm={this.toggleAddColumn} user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'} />}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {this.state.showTaskDetails && <TaskDetails\r\n            taskId={this.state.currTask.id}\r\n            board={this.props.board}\r\n            column={this.state.currTask.column}\r\n            updateBoard={this.props.updateBoard}\r\n            toggleTaskDetails={this.toggleTaskDetails}\r\n            user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'} />}\r\n          {this.state.showMiniTaskDetails && <DynamicMiniComponent\r\n            miniTask={this.state.miniTaskDetails}\r\n            updateBoard={this.props.updateBoard}\r\n            onToggle={this.toggleMiniDetails}\r\n            board={this.props.board}\r\n            user={this.props.loggedInUser ? this.props.loggedInUser.username : 'Guest'}\r\n          />}\r\n          <CSSTransition\r\n            in={this.state.showHistory}\r\n            timeout={700}\r\n            classNames=\"modal\"\r\n            unmountOnExit\r\n          >\r\n            <BoardHistory variant=\"outlined\"\r\n              className=\"home-page-login\" history={this.props.board.history} />\r\n          </CSSTransition>\r\n          <CSSTransition\r\n            in={this.state.toggleBoardTeamMembers}\r\n            timeout={700}\r\n            classNames=\"modal\"\r\n            unmountOnExit\r\n          >\r\n            <BoardTeamMembers board={this.props.board}\r\n              users={this.props.users}\r\n              updateBoard={this.props.updateBoard} />\r\n          </CSSTransition>\r\n        </div>\r\n\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    board: state.boards.board,\r\n    loggedInUser: state.user.loggedInUser,\r\n    users: state.user.users\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  loadBoard,\r\n  updateBoard,\r\n  logout,\r\n  getLoggedInUser,\r\n  setBoard,\r\n  getUsers,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport history from './history';\r\nimport '../src/styles/global.scss'\r\n\r\nimport Home from './pages/Home.js';\r\nimport Board from './pages/Board.js';\r\n\r\nfunction App() {\r\n  return (\r\n      <Router history={history}>\r\n        <Switch>\r\n          <Route path=\"/\" component={Home} exact />\r\n          <Route path=\"/board/:id\" component={Board} exact />\r\n        </Switch>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  boards: [],\r\n  board: {},\r\n  filterBy: {title: '', teamMembers: ''}\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_BOARDS':\r\n      return { ...state, boards: action.boards };\r\n    case 'UPDATE_BOARD':\r\n      return { ...state, board: action.board };\r\n    case 'ADD_BOARD':\r\n      return { ...state, boards: [...state.boards, action.addedBoard] };\r\n    case 'UPDATE_FILTER':\r\n      return { ...state, filterBy: action.filterBy };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","let localLoggedinUser = null;\r\n// if (localStorage.user) localLoggedinUser = JSON.parse(localStorage.user);\r\n\r\nconst initialState = {\r\n  loggedInUser: localLoggedinUser,\r\n  users: []\r\n};\r\n\r\nexport default function(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_USER':\r\n      return { ...state, loggedInUser: action.user };\r\n    case 'SET_USERS':\r\n      return {...state, users: action.users};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport BoardReducer from './BoardReducer'\r\nimport UserReducer from './UserReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  boards: BoardReducer,\r\n  user: UserReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst Store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default Store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport ReactNotification from 'react-notifications-component';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'react-notifications-component/dist/theme.css';\n\nimport Store from './store';\n\nReactDOM.render(\n  <Provider store={Store}>\n    <ReactNotification />\n      <App />\n  </Provider>,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}